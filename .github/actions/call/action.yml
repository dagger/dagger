name: "dagger call"
description: ""

inputs:
  function:
    description: "The Dagger function to call"
    required: true

  module:
    description: "The Dagger module to call"
    default: "."
    required: false

  version:
    description: "Dagger version to run against"
    default: "v0.12.5"
    required: false

  dev-engine:
    description: "Whether to run against a dev Engine"
    default: "false"
    required: false

  redirect:
    description: "Filepath to redirect result to"
    default: ""
    required: false

  upload-logs:
    description: "Whether to redirect logs to an artifact"
    default: "false"
    required: false

runs:
  using: "composite"
  steps:
    - name: Setup
      shell: bash
      run: |
        mkdir -p /tmp/actions/call
        touch /tmp/actions/call/local-envs

    - name: Install dagger
      shell: bash
      env:
        DAGGER_VERSION: "${{ inputs.version }}"
      run: |
        if [[ -x "$(command -v dagger)" ]]; then
          echo "::group::Checking dagger"
          version="$(dagger --silent version | cut --fields 2 --delimiter ' ')"
          if [[ "$version" != "$DAGGER_VERSION" ]]; then
            echo "dagger ${version} is installed, but needed ${DAGGER_VERSION}"
            exit 1
          fi
          echo "::endgroup::"
        else
          echo "::group::Installing dagger"
          curl -fsSL https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin/ sudo -E sh
          echo "::endgroup::"
        fi

    - name: Install go
      uses: actions/setup-go@v5
      if: inputs.dev-engine == 'true'
      with:
        go-version: "1.22"
        cache-dependency-path: "dev/go.sum"

    - name: Start dev dagger
      shell: bash
      if: inputs.dev-engine == 'true'
      run: |
        echo "::group::Starting dev engine"
        if ! [[ -x "$(command -v docker)" ]]; then
          echo "docker is not installed"
          exit 1
        fi

        # put env variables in /tmp/actions/call/local-envs instead of
        # $GITHUB_ENV to avoid leaking into parent workflow
        (cd .dagger/mage; go run main.go -w ../.. engine:dev) | tee /tmp/actions/call/local-envs

        echo "::endgroup::"
      env:
        # create separate outputs and containers for each workflow (to prevent
        # collisions with shared docker containers). With `arc` the runner name
        # is the name of the pod, and each pod runs a single dedicated job.
        _EXPERIMENTAL_DAGGER_DEV_OUTPUT: ./bin/dev-${{ runner.name }}
        _EXPERIMENTAL_DAGGER_DEV_CONTAINER: dagger-engine.dev-${{ runner.name }}

    - name: Wait for dagger to be ready
      shell: bash
      run: |
        source /tmp/actions/call/local-envs

        echo "::group::Dagger client version"
        dagger --silent version
        echo "::endgroup::"

        echo "::group::Dagger server version"
        echo "{version}" | dagger --silent query
        echo "::endgroup::"

    - name: ${{ inputs.function }}
      shell: bash
      run: |
        source /tmp/actions/call/local-envs

        function redirect_logs() {
          if [[ "${{ inputs.upload-logs }}" == "true" ]]; then
            "$@" &> /tmp/actions/call/call.log
          elif [[ -n "${{ inputs.redirect }}" ]]; then
            "$@" | tee "${{ inputs.redirect }}"
          else
            "$@"
          fi
        }

        set -x
        if [[ "${{ inputs.module }}" == "." ]]; then
          # set some sane defaults for the current module
          if [[ -f $HOME/.docker/config.json ]]; then
            redirect_logs dagger -m "${{ inputs.module }}" call --source=".:default" --docker-cfg=file:"$HOME/.docker/config.json" ${{ inputs.function }}
          else
            redirect_logs dagger -m "${{ inputs.module }}" call --source=".:default" ${{ inputs.function }}
          fi
        else
          redirect_logs dagger -m "${{ inputs.module }}" call ${{ inputs.function }}
        fi
      env:
        DAGGER_CLOUD_TOKEN: "dag_dagger_sBIv6DsjNerWvTqt2bSFeigBUqWxp9bhh3ONSSgeFnw"

    - name: Archive call logs
      if: always() && inputs.upload-logs == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: call-logs-${{ runner.name }}-${{ github.job }}
        path: /tmp/actions/call/call.log
        overwrite: true

    - name: Capture dev engine logs
      if: always() && inputs.dev-engine == 'true'
      shell: bash
      run: |
        docker logs dagger-engine.dev-${{ runner.name }} &> /tmp/actions/call/engine.log

    - name: Archive engine logs
      if: always() && inputs.dev-engine == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: engine-logs-${{ runner.name }}
        path: /tmp/actions/call/engine.log
        overwrite: true

    - name: Cleanup
      shell: bash
      run: |
        rm -rf /tmp/actions/call
