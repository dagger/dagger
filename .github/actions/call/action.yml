name: "dagger call"
description: ""

inputs:
  function:
    description: "The Dagger function to call"
    required: true

  module:
    description: "The Dagger module to call"
    default: "dev"
    required: false

  version:
    description: "Dagger version to run against"
    default: "v0.11.9"
    required: false

  dev-engine:
    description: "Whether to run against a dev Engine"
    default: "false"
    required: false

runs:
  using: "composite"
  steps:
    - name: Install dagger
      shell: bash
      env:
        DAGGER_VERSION: "${{ inputs.version }}"
      run: |
        if [[ -x "$(command -v dagger)" ]]; then
          echo "::group::Checking dagger"
          version="$(dagger --silent version | cut --fields 2 --delimiter ' ')"
          if [[ "$version" != "$DAGGER_VERSION" ]]; then
            echo "dagger ${version} is installed, but needed ${DAGGER_VERSION}"
            exit 1
          fi
          echo "::endgroup::"
        else
          echo "::group::Installing dagger"
          curl -L https://dl.dagger.io/dagger/install.sh | BIN_DIR=/usr/local/bin/ sudo -E sh
          echo "::endgroup::"
        fi

    - name: Wait for dagger to be ready
      shell: bash
      run: |
        echo "::group::Dagger client version"
        dagger --silent version
        echo "::endgroup::"

        echo "::group::Dagger server version"
        echo "{version}" | dagger --silent query
        echo "::endgroup::"

    # normal function run
    - name: ${{ inputs.function }}
      shell: bash
      if: inputs.dev-engine != 'true'
      run: |
        set -x

        if [[ "${{ inputs.module }}" == "dev" ]]; then
          flags="--source=.:default"
          if [[ -f $HOME/.docker/config.json ]]; then
            flags="$flags --docker-cfg=file:${HOME}/.docker/config.json"
          fi
        fi

        dagger -m ${{ inputs.module }} call ${flags} ${{ inputs.function }}
      env:
        DAGGER_CLOUD_TOKEN: "p.eyJ1IjogIjFiZjEwMmRjLWYyZmQtNDVhNi1iNzM1LTgxNzI1NGFkZDU2ZiIsICJpZCI6ICIwYzhmMGY2Yy00YjY1LTRhODktYTI0YS0yN2NjNWNhNzNmNTcifQ.Em92UDP-KmcNd80Y-euTS2IrRkIE8qTisP3SXYkQi3c"

    # nested dev function run
    - name: ${{ inputs.function }}
      shell: bash
      if: inputs.dev-engine == 'true'
      run: |
        set -x

        if [[ "${{ inputs.module }}" == "." ]]; then
          flags="--source=.:default"
          flagsdev="--source=.:default"
          if [[ -f $HOME/.docker/config.json ]]; then
            # don't evaluate env vars in internal command...
            flags="$flags "'--host-docker-config=file:${HOME}/.docker/config.json'
            # ...but do for the external wrapper
            flagsdev="$flagsdev --host-docker-config=file:${HOME}/.docker/config.json"
          fi
        fi

        cmd="dagger -m ${{ inputs.module }} call ${flags} ${{ inputs.function }}"
        dagger -m . call ${flagsdev} dev --target=".:default" --cmd "${cmd}" directory --path=. -o .
      env:
        DAGGER_CLOUD_TOKEN: "p.eyJ1IjogIjFiZjEwMmRjLWYyZmQtNDVhNi1iNzM1LTgxNzI1NGFkZDU2ZiIsICJpZCI6ICIwYzhmMGY2Yy00YjY1LTRhODktYTI0YS0yN2NjNWNhNzNmNTcifQ.Em92UDP-KmcNd80Y-euTS2IrRkIE8qTisP3SXYkQi3c"
