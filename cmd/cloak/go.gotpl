{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "encoding/json"  }}

{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}

{{ reserveImport	"github.com/dagger/cloak/sdk/go/dagger" }}

{{ $root := . }}

{{ range $resolver := .Resolvers -}}
    // {{ $resolver.Comment }}
	func (r *{{lcFirst $resolver.Object.Name}}{{ucFirst $.ResolverType}}) {{$resolver.Field.GoFieldName}}{{ $resolver.Field.ShortResolverDeclaration }} {
		{{ $resolver.Implementation }}
	}

{{ end }}

{{ range $object := .Objects -}}
	type {{lcFirst $object.Name}}{{ucFirst $.ResolverType}} struct {}
{{ end }}


func main() {
	dagger.Serve(context.Background(), map[string]func(context.Context, dagger.ArgsInput) (interface{}, error) {
  {{ range $resolver := .Resolvers -}}
    {{if $resolver.Field.ArgsFunc}}
      "{{$resolver.Field.GoFieldName}}": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
        var bytes []byte
        var err error

        {{ range $arg := $resolver.Field.Args }}
        {{ $type := $root.ShortTypeName $arg.TypeReference.GO.String}}
        {{ $pointedType := $root.PointedToShortTypeName $arg.TypeReference.GO.String}}

        {{if $pointedType}}
        var {{$arg.VarName}} {{$pointedType}}
        {{else}}
        var {{$arg.VarName}} {{$type}}
        {{end}}
        bytes, err = json.Marshal(fc.Args["{{$arg.VarName}}"])
        if err != nil {
          return nil, err
        }
        if err := json.Unmarshal(bytes, &{{$arg.VarName}}); err != nil {
          return nil, err
        }
        {{ end }}

        return (&{{lcFirst $resolver.Object.Name}}{{ucFirst $.ResolverType}}{}).{{$resolver.Field.GoFieldName}}(ctx, 
        {{ range $arg := $resolver.Field.Args }}
        {{ $pointedType := $root.PointedToShortTypeName $arg.TypeReference.GO.String}}
        {{if $pointedType}}
        &{{$arg.VarName}},
        {{else}}
        {{$arg.VarName}},
        {{end}}
        {{ end }}
        )
      },
    {{end}}
  {{ end }}
  })
}
