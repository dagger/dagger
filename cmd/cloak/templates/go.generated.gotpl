{{ reserveImport "context"  }}
{{ reserveImport "fmt"  }}
{{ reserveImport "io"  }}
{{ reserveImport "strconv"  }}
{{ reserveImport "time"  }}
{{ reserveImport "sync"  }}
{{ reserveImport "errors"  }}
{{ reserveImport "bytes"  }}
{{ reserveImport "encoding/json"  }}

{{ reserveImport "github.com/vektah/gqlparser/v2" }}
{{ reserveImport "github.com/vektah/gqlparser/v2/ast" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql" }}
{{ reserveImport "github.com/99designs/gqlgen/graphql/introspection" }}

{{ reserveImport	"github.com/dagger/cloak/sdk/go/dagger" }}

{{ $root := . }}

{{ range $resolver := .Resolvers -}}
  {{if not $resolver.HasArgs}}
    // {{ $resolver.Comment }}
	func (r *{{lcFirst $resolver.Object.Name}}{{ucFirst $.ResolverType}}) {{goPrivate $resolver.Field.GoFieldName}}{{ $resolver.MethodSignature }} {
    {{ if $resolver.Object.Root }}
      {{ $type := $root.ShortTypeName $resolver.Field.TypeReference.GO.String}}
      {{ $pointedType := $root.PointedToShortTypeName $resolver.Field.TypeReference.GO.String}}
      {{if $pointedType}}
      return new({{$pointedType}}), nil
      {{else if $type}}
      return *new({{$type}}), nil
      {{else}}
      return nil, nil
      {{end}}
    {{else}}
      return obj.{{$resolver.Field.GoFieldName}}, nil
    {{end}}
	}
  {{end}}
{{ end }}

{{ range $object := .Objects -}}
	type {{lcFirst $object.Name}}{{ucFirst $.ResolverType}} struct {}
{{ end }}


func main() {
	dagger.Serve(context.Background(), map[string]func(context.Context, dagger.ArgsInput) (interface{}, error) {
  {{ range $resolver := .Resolvers -}}
      "{{$resolver.Field.Object.Name}}.{{goPrivate $resolver.Field.GoFieldName}}": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
        var bytes []byte
        _ = bytes
        var err error
        _ = err

        {{if $resolver.Field.ArgsFunc}}
          {{ range $arg := $resolver.Field.Args }}
          {{ $type := $root.ShortTypeName $arg.TypeReference.GO.String}}
          {{ $pointedType := $root.PointedToShortTypeName $arg.TypeReference.GO.String}}

          {{if $pointedType}}
          var {{$arg.VarName}} {{$pointedType}}
          {{else}}
          var {{$arg.VarName}} {{$type}}
          {{end}}
          bytes, err = json.Marshal(fc.Args["{{$arg.VarName}}"])
          if err != nil {
            return nil, err
          }
          if err := json.Unmarshal(bytes, &{{$arg.VarName}}); err != nil {
            return nil, err
          }
          {{ end }}
        {{end}}

        {{if $resolver.IncludeParentObject}}
        obj := new({{ $root.PointedToShortTypeName $resolver.Object.Reference.String }})
        bytes, err = json.Marshal(fc.ParentResult)
        if err != nil {
          return nil, err
        }
        if err := json.Unmarshal(bytes, obj); err != nil {
          return nil, err
        }
        {{end}}

        return (&{{lcFirst $resolver.Object.Name}}{{ucFirst $.ResolverType}}{}).{{goPrivate $resolver.Field.GoFieldName}}(ctx, 
        {{if $resolver.IncludeParentObject}}
        obj,
        {{end}}
        {{ range $arg := $resolver.Field.Args }}
        {{ $pointedType := $root.PointedToShortTypeName $arg.TypeReference.GO.String}}
        {{if $pointedType}}
        &{{$arg.VarName}},
        {{else}}
        {{$arg.VarName}},
        {{end}}
        {{ end }}
        )
      },
  {{ end }}
  })
}
