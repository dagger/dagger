// Code generated by dagger. DO NOT EDIT.

package {{.PackageName}}

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"net"
	"net/http"
	"os"
	"strconv"
	"runtime"
	"fmt"
	"reflect"

	"github.com/Khan/genqlient/graphql"

	"{{.PackageImport}}/querybuilder"
)

// assertNotNil panic if the given value is nil.
// This function is used to validate that input with pointer type are not nil.
// See https://github.com/dagger/dagger/issues/5696 for more context.
func assertNotNil(argName string, value any) {
	// We use reflect because just comparing value to nil is not working since
	// the value is wrapped into a type when passed as parameter.
	// E.g., nil become (*dagger.File)(nil).
	if reflect.ValueOf(value).IsNil() {
		panic(fmt.Sprintf("unexpected nil pointer for argument %q", argName))
	}
}

// ptr returns a pointer to the given value.
func ptr[T any](v T) *T {
	return &v
}

type Optional[T comparable] struct {
	value T
	isSet bool
}

func Opt[T comparable](v T) Optional[T] {
	return Optional[T]{value: v, isSet: true}
}

func (o Optional[T]) Get() (T, bool) {
	var zero T
	return o.value, o.isSet || o.value != zero
}

func (o Optional[T]) GetOr(defaultValue T) T {
	value, ok := o.Get()
	if !ok {
		return defaultValue
	}
	return value
}

func (o *Optional[T]) MarshalJSON() ([]byte, error) {
	return json.Marshal(&o.value)
}

func (o *Optional[T]) UnmarshalJSON(dt []byte) error {
	o.isSet = true
	return json.Unmarshal(dt, &o.value)
}
