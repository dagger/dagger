{{- /* Header template.
A static file to define BaseClient class that will be
inherited by futures objects and common types.
 */ -}}
{{ define "header" -}}
/**
 * This file was auto-generated by `client-gen`.
 * Do not make direct changes to the file.
 */
import { GraphQLClient } from "graphql-request"

import { computeQuery } from "./utils.js"

/**
 * @hidden
 */
export type QueryTree = {
  operation: string
  args?: Record<string, unknown>
}

/**
 * @hidden
 */
export type Metadata = {
  [key: string]: {
    is_enum?: boolean
  }
}

interface ClientConfig {
  queryTree?: QueryTree[]
  host?: string
  sessionToken?: string
}

class BaseClient {
  protected _queryTree: QueryTree[]
  protected client: GraphQLClient
  /**
   * @defaultValue `127.0.0.1:8080`
   */
  public clientHost: string
  public sessionToken: string

  /**
   * @hidden
   */
  constructor({ queryTree, host, sessionToken }: ClientConfig = {}) {
    this._queryTree = queryTree || []
    this.clientHost = host || "127.0.0.1:8080"
    this.sessionToken = sessionToken || ""
    this.client = new GraphQLClient(`http://${host}/query`, {
      headers: {
        Authorization:
          "Basic " + Buffer.from(sessionToken + ":").toString("base64"),
      },
    })
  }

  /**
   * @hidden
   */
  get queryTree() {
    return this._queryTree
  }
}
{{- end }}
