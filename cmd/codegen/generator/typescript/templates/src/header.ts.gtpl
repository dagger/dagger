{{- /* Header template.
A static file to define BaseClient class that will be
inherited by futures objects and common types.
 */ -}}
{{ define "header" -}}
/**
 * This file was auto-generated by `client-gen`.
 * Do not make direct changes to the file.
 */
 {{- if IsBundle }}
import { Context, runWithSpan } from "./core.js"
{{- else if (not IsClientOnly)}}
import { Context } from "../common/context.js"
import { runWithSpan } from "../telemetry/index.js"
{{- else }}
import { Context, connect as _connect, connection as _connection, ConnectOpts, CallbackFct, runWithSpan } from "@dagger.io/dagger"
{{- end }}

{{ if IsClientOnly }}
async function serveModuleDependencies(client: Client): Promise<void> {
  {{- /* Store the dependencies in a variable to avoid duplicating the code */ -}}
  {{- $dependencies := Dependencies -}}

  {{- /* Loop over the Git dependencies and serve them */ -}}
  {{- range $i, $dep := $dependencies -}}
    {{- if eq $dep.Kind "GIT_SOURCE" }}
  await client.moduleSource(
      "{{ $dep.Source }}",
      { refPin: "{{ $dep.Pin }}" },
    )
    .withName("{{ $dep.Name }}")
    .asModule()
    .serve()
    {{ end -}}
  {{- end -}}

  {{/* Serve the local module if there are any local dependencies */}}

  const modSrc = client.moduleSource(".")
  const configExist = await modSrc.configExists()

  {{- if (HasLocalDependencies) }}
  if (!configExist) {
    console.error("WARNING: dagger.json not found but is required to load local dependencies or the module itself")
    return
  }
  {{- end }}

  if (configExist) {
    await modSrc.asModule().serve({ includeDependencies: true })
  }
}

export async function connection(
  fct: () => Promise<void>,
  cfg: ConnectOpts = {},
) {
  const wrapperFunc = async (): Promise<void> => {
    await serveModuleDependencies(dag)

    // Call the callback
    await fct()
  }

  return await _connection(wrapperFunc, cfg)
}

export async function connect(
  fct: CallbackFct,
  cfg: ConnectOpts = {},
) {
  // Serve remote dependencies before calling the callback
  const wrapperFunc = async (client: Client): Promise<void> => {
    await serveModuleDependencies(client)

    // Call the callback with the client
    // This requires to use `any` to pass the type system
    await fct(client as any)
  }

  return await _connect(wrapperFunc as unknown as CallbackFct, cfg)
}
{{- end }}

/**
 * Declare a number as float in the Dagger API.
 */
export type float = number

class BaseClient {
  /**
   * @hidden
   */

  constructor(protected _ctx: Context = new Context()) {}
}
{{- end }}
