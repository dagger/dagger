package main

import (
	"path/filepath"

	"dagger.io/dagger"
)

/*
This is a simple template showing what a dagger project for a Go codebase
could look like. Feel free to modify or delete everything here, plugging in
your own commands to `dagger.ServeCommands`.

If you prefer this file is not autogenerated in the future, you can call
`dagger init --no-template ...` to skip it.
*/

func main() {
	dagger.ServeCommands(
		SayHello,
		Build,
		Test,
	)
}

// Say hello to the given string
func SayHello(ctx dagger.Context, to string) (string, error) {
	return "Hello, " + to + "!", nil
}

// Build a Go binary from a main package at subdir pkg-path
func Build(ctx dagger.Context, pkgPath string) (*dagger.File, error) {
	binPath := filepath.Join("/out", filepath.Base(pkgPath))
	return ctx.Client().Container().
		From("golang:1.20-alpine").
		WithMountedCache("/go/pkg/mod", ctx.Client().CacheVolume("go-mod")).
		WithMountedCache("/root/.cache/go-build", ctx.Client().CacheVolume("go-build")).
		WithMountedDirectory("/src", ctx.Client().Host().Directory(".")).
		WithWorkdir("/src").
		WithExec([]string{"go", "build", "-o", binPath, "./" + pkgPath}).
		File(binPath), nil
}

// Test a Go package at subdir pkg-path
func Test(ctx dagger.Context, pkgPath string) (string, error) {
	return ctx.Client().Container().
		From("golang:1.20-alpine").
		WithMountedCache("/go/pkg/mod", ctx.Client().CacheVolume("go-mod")).
		WithMountedCache("/root/.cache/go-build", ctx.Client().CacheVolume("go-build")).
		WithMountedDirectory("/src", ctx.Client().Host().Directory(".")).
		WithWorkdir("/src").
		WithExec([]string{"go", "test", "-v", "./" + pkgPath}).
		Stdout(ctx)
}
