{{ define "header" -}}
/**
 * This file was auto-generated by `cloak clientgen`.
 * Do not make direct changes to the file.
 */

import axios from "axios"
import { GraphQLClient, gql } from "graphql-request";
import { queryBuilder, queryFlatten } from "./utils.js"
import { Headers, Response } from "cross-fetch"

/**
 * @hidden
 */
export type QueryTree = {
  operation: string
  args?: Record<string, unknown>
}

interface ClientConfig {
  queryTree?: QueryTree[],
  host?: string
}

class BaseClient {
  protected _queryTree:  QueryTree[]
	private client: GraphQLClient;
  /**
   * @defaultValue `127.0.0.1:8080`
   */
  public clientHost: string

  /**
   * @hidden
   */
  constructor({queryTree, host}: ClientConfig = {}) {
    this._queryTree = queryTree || []
    this.clientHost = host || "127.0.0.1:8080"
    const url = `http://dagger/query`
    this.client = new GraphQLClient(url, {
      fetch: function (
        input: RequestInfo,
        init?: RequestInit
      ): Promise<Response> {
        return axios({
          method: init?.method,
          url: url,
          headers: init?.headers as Record<string, string>,
          data: init?.body,
          socketPath: host,
          responseType: "stream",
        }).then((res) => {
          const headers = new Headers()
          for (const [key, value] of Object.entries(res.headers)) {
            headers.append(key, value as string)
          }
          return new Response(res.data, {
            status: res.status,
            statusText: res.statusText,
            headers: headers,
          })
        })
      },
    });
  }

  /**
   * @hidden
   */
  get queryTree() {
    return this._queryTree;
  }

  /**
   * @hidden
   */
  protected async _compute<T>(): Promise<T> {
    try {
      // run the query and return the result.
      const query = queryBuilder(this._queryTree)
      const computeQuery: Awaited<T> = await this.client.request(
        gql`
          ${query}
        `
      )

      return queryFlatten(computeQuery)
    } catch (error) {
      throw Error(`Error: ${JSON.stringify(error, undefined, 2)}`)
    }
  }
}
{{- end }}
