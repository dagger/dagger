package core

import (
	"fmt"
	"sync"

	"go.dagger.io/dagger/core/filesystem"
	"go.dagger.io/dagger/project"
	"go.dagger.io/dagger/router"
	"golang.org/x/sync/singleflight"
)

type Project struct {
	Name         string               `json:"name"`
	Schema       string               `json:"schema,omitempty"`
	Dependencies []*Project           `json:"dependencies,omitempty"`
	Scripts      []*project.Script    `json:"scripts,omitempty"`
	Extensions   []*project.Extension `json:"extensions,omitempty"`
}

var _ router.ExecutableSchema = &projectSchema{}

type projectSchema struct {
	*baseSchema
	remoteSchemas     map[string]*project.RemoteSchema
	remoteSchemasMu   sync.RWMutex
	compiledSchemas   map[string]*project.CompiledRemoteSchema
	compiledSchemasMu sync.RWMutex
	sf                singleflight.Group
	sshAuthSockID     string
}

func (s *projectSchema) Name() string {
	return "project"
}

func (s *projectSchema) Schema() string {
	return `
"A set of scripts and/or extensions"
type Project {
	"name of the project"
	name: String!

	"schema provided by the project"
	schema: String

	"extensions in this project"
	extensions: [Extension!]

	"scripts in this project"
	scripts: [Script!]

	"other projects with schema this project depends on"
	dependencies: [Project!]

	"install the project's schema"
	install: Boolean!

	"Code files generated by the SDKs in the project"
	generatedCode: Filesystem!
}

"A schema extension provided by a project"
type Extension {
	"path to the extension's code within the project's filesystem"
	path: String!

	"schema contributed to the project by this extension"
	schema: String!

	"sdk used to generate code for and/or execute this extension"
	sdk: String!
}

"An executable script that uses the project's dependencies and/or extensions"
type Script {
	"path to the script's code within the project's filesystem"
	path: String!

	"sdk used to generate code for and/or execute this script"
	sdk: String!
}

extend type Filesystem {
	"load a project's metadata"
	loadProject(configPath: String!): Project!
}

extend type Core {
	"Look up a project by name"
	project(name: String!): Project!
}
`
}

func (s *projectSchema) Resolvers() router.Resolvers {
	return router.Resolvers{
		"Filesystem": router.ObjectResolver{
			"loadProject": router.ToResolver(s.loadProject),
		},
		"Core": router.ObjectResolver{
			"project": router.ToResolver(s.project),
		},
		"Project": router.ObjectResolver{
			"install":       router.ToResolver(s.install),
			"generatedCode": router.ToResolver(s.generatedCode),
		},
	}
}

func (s *projectSchema) Dependencies() []router.ExecutableSchema {
	return nil
}

func (s *projectSchema) install(ctx *router.Context, parent *Project, args struct{}) (bool, error) {
	s.remoteSchemasMu.RLock()
	remoteSchema, ok := s.remoteSchemas[parent.Name]
	s.remoteSchemasMu.RUnlock()
	if !ok {
		return false, fmt.Errorf("project %q not found", parent.Name)
	}

	executableSchema, err := remoteSchema.Compile(ctx, s.compiledSchemas, &s.compiledSchemasMu, &s.sf)
	if err != nil {
		return false, err
	}

	if err := s.router.Add(executableSchema); err != nil {
		return false, err
	}

	return true, nil
}

type loadProjectArgs struct {
	ConfigPath string
}

func (s *projectSchema) loadProject(ctx *router.Context, parent *filesystem.Filesystem, args loadProjectArgs) (*Project, error) {
	schema, err := project.Load(ctx, s.gw, s.platform, parent, args.ConfigPath, s.sshAuthSockID)
	if err != nil {
		return nil, err
	}
	s.remoteSchemasMu.Lock()
	defer s.remoteSchemasMu.Unlock()
	s.remoteSchemas[schema.Name()] = schema
	return remoteSchemaToProject(schema), nil
}

type projectArgs struct {
	Name string
}

func (s *projectSchema) project(ctx *router.Context, parent struct{}, args projectArgs) (*Project, error) {
	if args.Name == (&coreSchema{}).Name() {
		coreSchema := s.router.Get(args.Name)
		return &Project{
			Name:   "core",
			Schema: coreSchema.Schema(),
		}, nil
	}

	s.remoteSchemasMu.RLock()
	defer s.remoteSchemasMu.RUnlock()
	remoteSchema, ok := s.remoteSchemas[args.Name]
	if !ok {
		return nil, fmt.Errorf("project %q not found", args.Name)
	}
	return remoteSchemaToProject(remoteSchema), nil
}

func (s *projectSchema) generatedCode(ctx *router.Context, parent *Project, args struct{}) (*filesystem.Filesystem, error) {
	s.remoteSchemasMu.RLock()
	remoteSchema, ok := s.remoteSchemas[parent.Name]
	s.remoteSchemasMu.RUnlock()
	if !ok {
		return nil, fmt.Errorf("project %q not found", parent.Name)
	}

	coreSchema := s.router.Get((&coreSchema{}).Name())
	return remoteSchema.Generate(ctx, coreSchema.Schema())
}

// TODO:(sipsma) guard against infinite recursion
func remoteSchemaToProject(schema *project.RemoteSchema) *Project {
	ext := &Project{
		Name:       schema.Name(),
		Schema:     schema.Schema(),
		Scripts:    schema.Scripts(),
		Extensions: schema.Extensions(),
	}
	for _, dep := range schema.Dependencies() {
		ext.Dependencies = append(ext.Dependencies, remoteSchemaToProject(dep))
	}
	return ext
}
