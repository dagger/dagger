extend type Query {
  """
  Loads a container from ID.

  Null ID returns an empty container (scratch).
  Optional platform argument initializes new containers to execute and publish as that platform.
  Platform defaults to that of the builder's host.
  """
  container(id: ContainerID, platform: Platform): Container!
}

"A unique container identifier. Null designates an empty container (scratch)."
scalar ContainerID

"""
An OCI-compatible container, also known as a docker container.
"""
type Container {
  "A unique identifier for this container."
  id: ContainerID!

  """
  Forces evaluation of the pipeline in the engine.

  It doesn't run the default command if no exec has been set.
  """
  sync: ContainerID!

  "The platform this container executes and publishes as."
  platform: Platform!

  "Creates a named sub-pipeline"
  pipeline(
    "Pipeline name."
    name: String!
    "Pipeline description."
    description: String
    "Pipeline labels."
    labels: [PipelineLabel!]
  ): Container!

  """
  Initializes this container from a pulled base image.
  """
  from(
    """
    Image's address from its registry.

    Formatted as [host]/[user]/[repo]:[tag] (e.g., "docker.io/dagger/dagger:main").
    """
    address: String!
  ): Container!

  """
  Initializes this container from a Dockerfile build.
  """
  build(
    "Directory context used by the Dockerfile."
    context: DirectoryID!

    """
    Path to the Dockerfile to use.

    Default: './Dockerfile'.
    """
    dockerfile: String

    "Additional build arguments."
    buildArgs: [BuildArg!]

    "Target build stage to build."
    target: String

    """
    Secrets to pass to the build.

    They will be mounted at /run/secrets/[secret-name].
    """
    secrets: [SecretID!]
  ): Container!

  "Retrieves this container's root filesystem. Mounts are not included."
  rootfs: Directory!

  "Retrieves this container's root filesystem. Mounts are not included."
  fs: Directory! @deprecated(reason: "Replaced by `rootfs`.")

  "Initializes this container from this DirectoryID."
  withRootfs(id: DirectoryID!): Container!

  "Initializes this container from this DirectoryID."
  withFS(id: DirectoryID!): Container!
    @deprecated(reason: "Replaced by `withRootfs`.")

  """
  Retrieves a directory at the given path.

  Mounts are included.
  """
  directory(
    """
    The path of the directory to retrieve (e.g., "./src").
    """
    path: String!
  ): Directory!

  """
  Retrieves a file at the given path.

  Mounts are included.
  """
  file(
    """
    The path of the file to retrieve (e.g., "./README.md").
    """
    path: String!
  ): File!

  "Retrieves the user to be set for all commands."
  user: String

  """
  Retrieves this container with a different command user.
  """
  withUser(
    """
    The user to set (e.g., "root").
    """
    name: String!
  ): Container!

  "Retrieves the working directory for all commands."
  workdir: String

  """
  Retrieves this container with a different working directory.
  """
  withWorkdir(
    """
    The path to set as the working directory (e.g., "/app").
    """
    path: String!
  ): Container!

  "Retrieves the list of environment variables passed to commands."
  envVariables: [EnvVariable!]!

  """
  Retrieves the value of the specified environment variable.
  """
  envVariable(
    """
    The name of the environment variable to retrieve (e.g., "PATH").
    """
    name: String!
  ): String

  """
  Retrieves this container plus the given environment variable.
  """
  withEnvVariable(
    """
    The name of the environment variable (e.g., "HOST").
    """
    name: String!

    """
    The value of the environment variable. (e.g., "localhost").
    """
    value: String!
  ): Container!

  "Retrieves the list of labels passed to container."
  labels: [Label!]!

  """
  Retrieves the value of the specified label.
  """
  label(name: String!): String

  """
  Retrieves this container plus the given label.
  """
  withLabel(
    """
    The name of the label (e.g., "org.opencontainers.artifact.created").
    """
    name: String!

    """
    The value of the label (e.g., "2023-01-01T00:00:00Z").
    """
    value: String!
  ): Container!

  """
  Retrieves this container minus the given environment label.
  """
  withoutLabel(
    """
    The name of the label to remove (e.g., "org.opencontainers.artifact.created").
    """
    name: String!
  ): Container!

  """
  Retrieves this container plus an env variable containing the given secret.
  """
  withSecretVariable(
    """
    The name of the secret variable (e.g., "API_SECRET").
    """
    name: String!

    "The identifier of the secret value."
    secret: SecretID!
  ): Container!

  """
  Retrieves this container minus the given environment variable.
  """
  withoutEnvVariable(
    """
    The name of the environment variable (e.g., "HOST").
    """
    name: String!
  ): Container!

  "Retrieves entrypoint to be prepended to the arguments of all commands."
  entrypoint: [String!]

  """
  Retrieves this container but with a different command entrypoint.
  """
  withEntrypoint(
    """
    Entrypoint to use for future executions (e.g., ["go", "run"]).
    """
    args: [String!]!
  ): Container!

  "Retrieves default arguments for future commands."
  defaultArgs: [String!]

  """
  Configures default arguments for future commands.
  """
  withDefaultArgs(
    """
    Arguments to prepend to future executions (e.g., ["-v", "--no-cache"]).
    """
    args: [String!]
  ): Container!

  "Retrieves the list of paths where a directory is mounted."
  mounts: [String!]!

  """
  Retrieves this container plus a directory mounted at the given path.
  """
  withMountedDirectory(
    """
    Location of the mounted directory (e.g., "/mnt/directory").
    """
    path: String!

    "Identifier of the mounted directory."
    source: DirectoryID!

    """
    A user:group to set for the mounted directory and its contents.

    The user and group can either be an ID (1000:1000) or a name (foo:bar).

    If the group is omitted, it defaults to the same as the user.
    """
    owner: String
  ): Container!

  """
  Retrieves this container plus a file mounted at the given path.
  """
  withMountedFile(
    """
    Location of the mounted file (e.g., "/tmp/file.txt").
    """
    path: String!

    "Identifier of the mounted file."
    source: FileID!

    """
    A user or user:group to set for the mounted file.

    The user and group can either be an ID (1000:1000) or a name (foo:bar).

    If the group is omitted, it defaults to the same as the user.
    """
    owner: String
  ): Container!

  """
  Retrieves this container plus a temporary directory mounted at the given path.
  """
  withMountedTemp(
    """
    Location of the temporary directory (e.g., "/tmp/temp_dir").
    """
    path: String!
  ): Container!

  """
  Retrieves this container plus a cache volume mounted at the given path.
  """
  withMountedCache(
    """
    Location of the cache directory (e.g., "/cache/node_modules").
    """
    path: String!

    "Identifier of the cache volume to mount."
    cache: CacheID!

    "Identifier of the directory to use as the cache volume's root."
    source: DirectoryID

    "Sharing mode of the cache volume."
    sharing: CacheSharingMode

    """
    A user:group to set for the mounted cache directory.

    Note that this changes the ownership of the specified mount along with the
    initial filesystem provided by source (if any). It does not have any effect
    if/when the cache has already been created.

    The user and group can either be an ID (1000:1000) or a name (foo:bar).

    If the group is omitted, it defaults to the same as the user.
    """
    owner: String
  ): Container!

  """
  Retrieves this container plus a secret mounted into a file at the given path.
  """
  withMountedSecret(
    """
    Location of the secret file (e.g., "/tmp/secret.txt").
    """
    path: String!

    "Identifier of the secret to mount."
    source: SecretID!

    """
    A user:group to set for the mounted secret.

    The user and group can either be an ID (1000:1000) or a name (foo:bar).

    If the group is omitted, it defaults to the same as the user.
    """
    owner: String
  ): Container!

  """
  Retrieves this container after unmounting everything at the given path.
  """
  withoutMount(
    """
    Location of the cache directory (e.g., "/cache/node_modules").
    """
    path: String!
  ): Container!

  """
  Retrieves this container plus the contents of the given file copied to the given path.
  """
  withFile(
    """
    Location of the copied file (e.g., "/tmp/file.txt").
    """
    path: String!

    "Identifier of the file to copy."
    source: FileID!

    """
    Permission given to the copied file (e.g., 0600).

    Default: 0644.
    """
    permissions: Int

    """
    A user:group to set for the file.

    The user and group can either be an ID (1000:1000) or a name (foo:bar).

    If the group is omitted, it defaults to the same as the user.
    """
    owner: String
  ): Container!

  """
  Retrieves this container plus a new file written at the given path.
  """
  withNewFile(
    """
    Location of the written file (e.g., "/tmp/file.txt").
    """
    path: String!

    """
    Content of the file to write (e.g., "Hello world!").
    """
    contents: String

    """
    Permission given to the written file (e.g., 0600).

    Default: 0644.
    """
    permissions: Int

    """
    A user:group to set for the file.

    The user and group can either be an ID (1000:1000) or a name (foo:bar).

    If the group is omitted, it defaults to the same as the user.
    """
    owner: String
  ): Container!

  """
  Retrieves this container plus a directory written at the given path.
  """
  withDirectory(
    """
    Location of the written directory (e.g., "/tmp/directory").
    """
    path: String!

    "Identifier of the directory to write"
    directory: DirectoryID!

    """
    Patterns to exclude in the written directory (e.g., ["node_modules/**", ".gitignore", ".git/"]).
    """
    exclude: [String!]

    """
    Patterns to include in the written directory (e.g., ["*.go", "go.mod", "go.sum"]).
    """
    include: [String!]

    """
    A user:group to set for the directory and its contents.

    The user and group can either be an ID (1000:1000) or a name (foo:bar).

    If the group is omitted, it defaults to the same as the user.
    """
    owner: String
  ): Container!

  """
  Retrieves this container plus a socket forwarded to the given Unix socket path.
  """
  withUnixSocket(
    """
    Location of the forwarded Unix socket (e.g., "/tmp/socket").
    """
    path: String!

    """
    Identifier of the socket to forward.
    """
    source: SocketID!

    """
    A user:group to set for the mounted socket.

    The user and group can either be an ID (1000:1000) or a name (foo:bar).

    If the group is omitted, it defaults to the same as the user.
    """
    owner: String
  ): Container!

  """
  Retrieves this container with a previously added Unix socket removed.
  """
  withoutUnixSocket(
    """
    Location of the socket to remove (e.g., "/tmp/socket").
    """
    path: String!
  ): Container!

  """
  Retrieves this container after executing the specified command inside it.
  """
  withExec(
    """
    Command to run instead of the container's default command (e.g., ["run", "main.go"]).

    If empty, the container's default command is used.
    """
    args: [String!]!

    """
    If the container has an entrypoint, ignore it for args rather than using it to wrap them.
    """
    skipEntrypoint: Boolean

    """
    Content to write to the command's standard input before closing (e.g., "Hello world").
    """
    stdin: String

    """
    Redirect the command's standard output to a file in the container (e.g., "/tmp/stdout").
    """
    redirectStdout: String

    """
    Redirect the command's standard error to a file in the container (e.g., "/tmp/stderr").
    """
    redirectStderr: String

    """
    Provides dagger access to the executed command.

    Do not use this option unless you trust the command being executed.
    The command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
    """
    experimentalPrivilegedNesting: Boolean

    """
    Execute the command with all root capabilities. This is similar to running a command
    with "sudo" or executing `docker run` with the `--privileged` flag. Containerization
    does not provide any security guarantees when using this option. It should only be used
    when absolutely necessary and only with trusted commands.
    """
    insecureRootCapabilities: Boolean
  ): Container!

  """
  Retrieves this container after executing the specified command inside it.
  """
  exec(
    """
    Command to run instead of the container's default command (e.g., ["run", "main.go"]).
    """
    args: [String!]

    """
    Content to write to the command's standard input before closing (e.g., "Hello world").
    """
    stdin: String

    """
    Redirect the command's standard output to a file in the container (e.g., "/tmp/stdout").
    """
    redirectStdout: String

    """
    Redirect the command's standard error to a file in the container (e.g., "/tmp/stderr").
    """
    redirectStderr: String

    """
    Provide dagger access to the executed command.
    Do not use this option unless you trust the command being executed.
    The command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
    """
    experimentalPrivilegedNesting: Boolean
  ): Container! @deprecated(reason: "Replaced by `withExec`.")

  """
  Exit code of the last executed command. Zero means success.

  Will execute default command if none is set, or error if there's no default.
  """
  exitCode: Int!

  """
  The output stream of the last executed command.

  Will execute default command if none is set, or error if there's no default.
  """
  stdout: String!

  """
  The error stream of the last executed command.

  Will execute default command if none is set, or error if there's no default.
  """
  stderr: String!

  # FIXME: this is the last case of an actual "verb" that cannot cleanly go away.
  #    This may actually be a good candidate for a mutation. To be discussed.
  """
  Publishes this container as a new image to the specified address.

  Publish returns a fully qualified ref.
  It can also publish platform variants.
  """
  publish(
    """
    Registry's address to publish the image to.

    Formatted as [host]/[user]/[repo]:[tag] (e.g. "docker.io/dagger/dagger:main").
    """
    address: String!

    """
    Identifiers for other platform specific containers.
    Used for multi-platform image.
    """
    platformVariants: [ContainerID!]

    """
    Force each layer of the published image to use the specified compression algorithm.
    If this is unset, then if a layer already has a compressed blob in the engine's
    cache, that will be used (this can result in a mix of compression algorithms for
    different layers). If this is unset and a layer has no compressed blob in the
    engine's cache, then it will be compressed using Gzip.
    """
    forcedCompression: ImageLayerCompression
  ): String!

  """
  Writes the container as an OCI tarball to the destination file path on the host for the specified platform variants.

  Return true on success.
  It can also publishes platform variants.
  """
  export(
    """
    Host's destination path (e.g., "./tarball").
    Path can be relative to the engine's workdir or absolute.
    """
    path: String!

    """
    Identifiers for other platform specific containers.
    Used for multi-platform image.
    """
    platformVariants: [ContainerID!]

    """
    Force each layer of the exported image to use the specified compression algorithm.
    If this is unset, then if a layer already has a compressed blob in the engine's
    cache, that will be used (this can result in a mix of compression algorithms for
    different layers). If this is unset and a layer has no compressed blob in the
    engine's cache, then it will be compressed using Gzip.
    """
    forcedCompression: ImageLayerCompression
  ): Boolean!

  """
  Reads the container from an OCI tarball.

  NOTE: this involves unpacking the tarball to an OCI store on the host at
  $XDG_CACHE_DIR/dagger/oci. This directory can be removed whenever you like.
  """
  import(
    """
    File to read the container from.
    """
    source: FileID!

    """
    Identifies the tag to import from the archive, if the archive bundles
    multiple tags.
    """
    tag: String
  ): Container!

  "Retrieves this container with a registry authentication for a given address."
  withRegistryAuth(
    """
    Registry's address to bind the authentication to.
    Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
    """
    address: String!

    """
    The username of the registry's account (e.g., "Dagger").
    """
    username: String!

    """
    The API key, password or token to authenticate to this registry.
    """
    secret: SecretID!
  ): Container!

  "Retrieves this container without the registry authentication of a given address."
  withoutRegistryAuth(
    """
    Registry's address to remove the authentication from.
    Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
    """
    address: String!
  ): Container!

  "The unique image reference which can only be retrieved immediately after the 'Container.From' call."
  imageRef: String

  """
  Expose a network port.

  Exposed ports serve two purposes:
    - For health checks and introspection, when running services
    - For setting the EXPOSE OCI field when publishing the container

  Currently experimental; set _EXPERIMENTAL_DAGGER_SERVICES_DNS=0 to disable.
  """
  withExposedPort(
    "Port number to expose"
    port: Int!
    "Transport layer network protocol"
    protocol: NetworkProtocol = TCP
    "Optional port description"
    description: String
  ): Container!

  """
  Unexpose a previously exposed port.

  Currently experimental; set _EXPERIMENTAL_DAGGER_SERVICES_DNS=0 to disable.
  """
  withoutExposedPort(
    "Port number to unexpose"
    port: Int!
    "Port protocol to unexpose"
    protocol: NetworkProtocol = TCP
  ): Container!

  """
  Retrieves the list of exposed ports.

  Currently experimental; set _EXPERIMENTAL_DAGGER_SERVICES_DNS=0 to disable.
  """
  exposedPorts: [Port!]!

  """
  Establish a runtime dependency on a service.

  The service will be started automatically when needed and detached when it is
  no longer needed, executing the default command if none is set.

  The service will be reachable from the container via the provided hostname alias.

  The service dependency will also convey to any files or directories produced by the container.

  Currently experimental; set _EXPERIMENTAL_DAGGER_SERVICES_DNS=0 to disable.
  """
  withServiceBinding(
    "A name that can be used to reach the service from the container"
    alias: String!
    "Identifier of the service container"
    service: ContainerID!
  ): Container!

  """
  Retrieves a hostname which can be used by clients to reach this container.

  Currently experimental; set _EXPERIMENTAL_DAGGER_SERVICES_DNS=0 to disable.
  """
  hostname: String!

  """
  Retrieves an endpoint that clients can use to reach this container.

  If no port is specified, the first exposed port is used. If none exist an error is returned.

  If a scheme is specified, a URL is returned. Otherwise, a host:port pair is returned.

  Currently experimental; set _EXPERIMENTAL_DAGGER_SERVICES_DNS=0 to disable.
  """
  endpoint(
    "The exposed port number for the endpoint"
    port: Int
    "Return a URL with the given scheme, eg. http for http://"
    scheme: String
  ): String!
}

"A simple key value object that represents an environment variable."
type EnvVariable {
  "The environment variable name."
  name: String!

  "The environment variable value."
  value: String!
}

"A port exposed by a container."
type Port {
  "The port number."
  port: Int!

  "The transport layer network protocol."
  protocol: NetworkProtocol!

  "The port description."
  description: String
}

"A simple key value object that represents a label."
type Label {
  "The label name."
  name: String!

  "The label value."
  value: String!
}

"""
Key value object that represents a build argument.
"""
input BuildArg {
  """
  The build argument name.
  """
  name: String!

  """
  The build argument value.
  """
  value: String!
}

"Transport layer network protocol associated to a port."
enum NetworkProtocol {
  "TCP (Transmission Control Protocol)"
  TCP
  "UDP (User Datagram Protocol)"
  UDP
}

"Compression algorithm to use for image layers"
enum ImageLayerCompression {
  Gzip
  Zstd
  EStarGZ
  Uncompressed
}
