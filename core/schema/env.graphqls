extend type Query {
  "The environment initialized from the given ID."
  environment(id: EnvironmentID): Environment!

  """
  Install the given environment into this graphql API. Its schema will be
  stitched into the schema of this server, making those APIs available for
  subsequent queries.

  If an environment with the same ID has already been installed, this is a no-op.

  If there are any conflicts between the environment's schema and any existing
  schemas, an error will be returned.
  """
  installEnvironment(id: EnvironmentID!): Boolean!

  "The check initialized from the given ID."
  check(id: CheckID): Check!

  "The check result initialized from the given ID."
  checkResult(id: CheckResultID): CheckResult!

  "A check result initialized with the given success and output."
  staticCheckResult(success: Boolean!, output: String): CheckResult!

  """
  The environment the requester is being executed in (or an error if none).
  """
  currentEnvironment: Environment!
}

"A unique environment identifier."
scalar EnvironmentID

"A unique environment check identifier."
scalar CheckID

"A unique environment check result identifier."
scalar CheckResultID

"A group of Dagger entrypoints that can be queried and/or invoked."
type Environment {
  "A unique identifier for this environment."
  id: EnvironmentID!

  "Name of the environment"
  name: String

  "The directory containing all the source needed to execute this environment's code"
  sourceDirectory: Directory!

  "The SDK that this environment will be executed with"
  sdk: String!

  """
  Other environments that this environment depends on. If this environment is installed,
  all dependencies will be (recursively) installed too.
  """
  dependencies: [Environment!]

  """
  The environment initialized with the given name, sourceDirectory, sdk and dependencies.

  If set, sourceDirectorySubpath should point to the subpath of sourceDirectory that
  contains the environment code. If unset, it will default to the root of the sourceDirectory.
  """
  from(
    name: String!
    sourceDirectory: DirectoryID!
    sdk: String!
    sourceDirectorySubpath: String
    dependencies: [EnvironmentID!]
  ): Environment!

  """
  The environment initialized with the sourceDirectory and environment configuration file path.
  If configPath is not set, it defaults to the root of the sourceDirectory.
  """
  fromConfig(sourceDirectory: DirectoryID!, configPath: String): Environment!

  """
  The directory that the environment code will execute in as its current working directory.
  If not set explicitly, it will default to the root of the sourceDirectory.
  """
  workdir: Directory!

  "This environment with the given workdir"
  withWorkdir(id: DirectoryID!): Environment!

  "The list of checks in this environment"
  checks: [Check!]

  "The check in this environment with the given name, if any"
  check(name: String!): Check
}

"An entrypoint for tests, lints or anything that can pass/fail."
type Check {
  "A unique identifier for this check."
  id: CheckID!

  "The name of the check."
  name: String!

  "This check with the given name"
  withName(name: String!): Check!

  "Documentation for this check."
  description: String

  "This check with the given description"
  withDescription(description: String!): Check!

  "The subchecks of this check."
  subchecks: [Check!]

  "This check with the given subcheck"
  withSubcheck(id: CheckID!): Check!

  """
  This check with the given container used to determine the check's result.
  If set, the container will be executed and the check success will be true
  if the container exits with a zero exit code, false otherwise.
  """
  withContainer(id: ContainerID!): Check!

  "The result of evaluating this check."
  result: CheckResult!
}

type CheckResult {
  "A unique identifier for this check result."
  id: CheckResultID!

  "Whether the check was successful."
  success: Boolean!

  "Any output obtained from evaluating the check's success."
  output: String!
}

extend type Environment {
  """
  Internal only.

  This environment with the given check. It is an error to call this outside
  of environment initialization code.
  """
  withCheck(id: CheckID!, returnType: CheckEntrypointReturnType): Environment!

  """
  Internal only.

  The input for the current entrypoint invocation.
  """
  entrypointInput: EntrypointInput!

  """
  Internal only.

  Return the given value as the result of the current entrypoint invocation.
  The value is expected to be the json-serialized representation of the return.
  """
  returnEntrypointValue(value: String!): Boolean!
}

"""
Internal-only.

The input provided to an SDK entrypoint invocation.
"""
type EntrypointInput {
  """
  Internal-only.

  The name of the entrypoint to invoke. If not set, then the sdk
  is expected to return the environment definition.
  """
  name: String

  """
  Internal-only.

  The json-serialized arguments to pass to the entrypoint. The json
  object is a map of argument names to argument values.
  """
  args: String!
}

"""
Internal-only.

The handled return types for a check entrypoint.
"""
enum CheckEntrypointReturnType {
  """
  Internal-only.

  The entrypoint does not return any value.

  In this case, the check's result is based on the entrypoint exit code.

  Exit code 0 will result in a successful check.

  Exiting with exit code 1 will result in a failed check, but the entrypoint
  execution will be cached.

  Exiting with any other exit code will be treated an internal error and not
  result in the entrypoint execution being cached. This error will be forwarded
  to any clients querying the check result.
  """
  CheckEntrypointReturnVoid

  """
  Internal-only.

  The entrypoint returns a check. In this case, the check's result will be
  determined by (recursively) evaluating the returned check.

  A non-zero entrypoint exit code will be treated as an internal error and
  result in the entrypoint execution not being cached.
  """
  CheckEntrypointReturnCheck

  """
  Internal-only.

  The entrypoint returns a check result. In this case, the check's result will
  be set to this return value.

  A non-zero entrypoint exit code will be treated as an internal error and
  result in the entrypoint execution not being cached.
  """
  CheckEntrypointReturnCheckResult

  """
  Internal-only.

  The entrypoint returns a string. In this case, the check's output will be
  set to that string and the check's success based on the entrypoint exit code.

  Exit code 0 will result in a successful check.

  Exiting with exit code 1 will result in a failed check, but the entrypoint
  execution will be cached.

  Exiting with any other exit code will be treated an internal error and not
  result in the entrypoint execution being cached. This error will be forwarded
  to any clients querying the check result.
  """
  CheckEntrypointReturnString
}
