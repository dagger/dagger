extend type Query {
  "Load a environment from ID."
  environment(id: EnvironmentID): Environment!

  "Load a environment check from ID."
  check(id: CheckID): Check!

  "Load a environment check result from ID."
  checkResult(id: CheckResultID): CheckResult!

  "Create a check result with the given success and output."
  staticCheckResult(success: Boolean!, output: String): CheckResult!

  "Return the current environment being executed in."
  currentEnvironment: Environment!
}

"A unique environment identifier."
scalar EnvironmentID

"A unique environment check identifier."
scalar CheckID

"A unique environment check result identifier."
scalar CheckResultID

"A group of Dagger entrypoints that can be queried and/or invoked."
type Environment {
  "A unique identifier for this environment."
  id: EnvironmentID!

  "Name of the environment"
  name: String!

  """
  Initialize this environment from its source. The full context needed to execute
  the environment is provided as environmentDirectory, with the environment's configuration
  file located at configPath.
  """
  load(environmentDirectory: DirectoryID!, configPath: String!): Environment!

  """
  The directory the environment code will execute in as its current working directory.
  """
  workdir: DirectoryID!

  "This environment with the given workdir"
  withWorkdir(workdir: DirectoryID!): Environment!

  "This environment plus the given check"
  withCheck(id: CheckID!): Environment!

  "The list of checks in this environment"
  checks: [Check!]

  "The check in this environment with the given name, if any"
  check(name: String!): Check

  "TODO: hide from docs, possibly standard codegen too"
  exportEnvironmentResult(result: String!): Boolean!
}

"An entrypoint for tests, lints or anything that can pass/fail."
type Check {
  "A unique identifier for this check."
  id: CheckID!

  "The name of the check."
  name: String!

  "This check with the given name"
  withName(name: String!): Check!

  "Documentation for this check."
  description: String

  "This check with the given description"
  withDescription(description: String!): Check!

  "The subchecks of this check."
  subchecks: [Check!]

  "This check with the given subcheck"
  withSubcheck(id: CheckID!): Check!

  """
  This check with the given container used to determine the check's result.
  If set, the container will be executed and the check success will be true
  if the container exits with a zero exit code, false otherwise.
  """
  withContainer(id: ContainerID!): Check!

  "The result of evaluating this check."
  result: CheckResult!
}

type CheckResult {
  "A unique identifier for this check result."
  id: CheckResultID!

  "Whether the check was successful."
  success: Boolean!

  "Any output obtained from evaluating the check's success."
  output: String!
}
