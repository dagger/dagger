extend type Query {
  "Load a environment from ID."
  environment(id: EnvironmentID): Environment!

  "Load a environment check from ID."
  environmentCheck(id: CheckID): Check!

  "Return the current environment being executed in."
  currentEnvironment: Environment!
}

"A unique environment identifier."
scalar EnvironmentID

"A unique environment check identifier."
scalar CheckID

"A unique environment check result identifier."
scalar CheckResultID

"A group of Dagger entrypoints that can be queried and/or invoked."
type Environment {
  "A unique identifier for this environment."
  id: EnvironmentID!

  """
  Initialize this environment from its source. The full context needed to execute
  the environment is provided as environmentDirectory, with the environment's configuration
  file located at configPath.
  """
  load(environmentDirectory: DirectoryID!, configPath: String!): Environment!

  """
  The directory the environment code will execute in as its current working directory.
  """
  workdir: DirectoryID!

  "This environment with the given workdir"
  withWorkdir(workdir: DirectoryID!): Environment!

  "Name of the environment"
  name: String!

  "This environment plus the given check"
  withCheck(id: CheckID!): Environment!

  "The list of checks in this environment"
  checks: [Check!]

  "The check in this environment with the given name, if any"
  check(name: String!): Check
}

"An entrypoint for tests, lints or anything that can pass/fail."
type Check {
  "A unique identifier for this check."
  id: CheckID!

  "The name of the check."
  name: String!

  "This check with the given name"
  withName(name: String!): Check!

  "Documentation for this check."
  description: String

  "This check with the given description"
  withDescription(description: String!): Check!

  "The subchecks of this check."
  subchecks: [Check!]

  "This check with the given subcheck"
  withSubcheck(id: CheckID!): Check!

  """
  This check with the given container used to determine the check's result.
  If set, the container will be executed and the check result will be set to
  success if the container exits with a zero exit code, failure otherwise.
  """
  withContainer(id: ContainerID!): Check!

  "The result of this check."
  result: CheckResult!
}

"The result of an environment's check."
type CheckResult {
  "A unique identifier for this check result."
  id: CheckResultID!

  "The name of the check result."
  name: String!

  "This check result with the given name"
  withName(name: String!): CheckResult!

  "Whether this check result was successful."
  success: Boolean!

  "This check result with success set to the given value."
  withSuccess(success: Boolean!): CheckResult!

  "Any output associated with this check result."
  output: String!

  "This check result with the given output."
  withOutput(output: String!): CheckResult!
}
