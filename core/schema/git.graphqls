extend type Query {
  """
  Queries a git repository.
  """
  git(
    """
    Url of the git repository.
    Can be formatted as https://{host}/{owner}/{repo}, git@{host}:{owner}/{repo}
    Suffix ".git" is optional.
    """
    url: String!

    "Set to true to keep .git directory."
    keepGitDir: Boolean

    "Set SSH known hosts"
    sshKnownHosts: String

    "Set SSH auth socket"
    sshAuthSocket: SocketID

    "A service which must be started before the repo is fetched."
    experimentalServiceHost: ServiceID
  ): GitRepository!
}

"A git repository."
type GitRepository {
  "The default branch of the repository."
  defaultBranch: String!

  """
  Returns details on one branch.
  """
  branch(
    """
    Branch's name (e.g., "main").
    """
    name: String!
  ): GitRef!

  """
  Returns tags that match any of the given glob patterns.
  """
  tags(patterns: [String!]): [String!]!

  """
  Returns details on one tag.
  """
  tag(
    """
    Tag's name (e.g., "v0.3.9").
    """
    name: String!
  ): GitRef!

  """
  Returns details on one commit.
  """
  commit(
    """
    Identifier of the commit (e.g., "b6315d8f2810962c601af73f86831f6866ea798b").
    """
    id: String!
  ): GitRef!
}

type GitTag {
  "The name of the ref."
  name: String!

  "The resolved commit id at this tag."
  commit: String!
}

"A git ref (tag, branch or commit)."
type GitRef {
  "The resolved commit id at this ref."
  commit: String!

  "The filesystem tree at this ref."
  tree(
    sshKnownHosts: String @deprecated(reason: "This option should be passed to `git` instead.")
    sshAuthSocket: SocketID @deprecated(reason: "This option should be passed to `git` instead.")
  ): Directory!
}
