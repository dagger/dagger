extend type Query {
  "Queries the host environment."
  host: Host!
}

"Information about the host execution environment."
type Host {
  """
  Accesses a directory on the host.
  """
  directory(
    """
    Location of the directory to access (e.g., ".").
    """
    path: String!,

    """
    Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
    """
    exclude: [String!],

    """
    Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
    """
    include: [String!]
  ): Directory!

  """
  Accesses a file on the host.
  """
  file(
    """
    Location of the file to retrieve (e.g., "README.md").
    """
    path: String!
  ): File!

  """
  Accesses a Unix socket on the host.
  """
  unixSocket(
    """
    Location of the Unix socket (e.g., "/var/run/docker.sock").
    """
    path: String!
  ): Socket!

  """
  Creates a tunnel that forwards traffic from the host to a service.
  """
  tunnel(
    "Service to send traffic from the tunnel."
    service: ServiceID!

    """
    Map each service port to the same port on the host, as if the service were
    running natively.

    Note: enabling may result in port conflicts.
    """
    native: Boolean = false

    """
    Configure explicit port forwarding rules for the tunnel.

    If a port's frontend is unspecified or 0, a random port will be chosen by
    the host.

    If no ports are given, all of the service's ports are forwarded. If native
    is true, each port maps to the same port on the host. If native is false,
    each port maps to a random port chosen by the host.

    If ports are given and native is true, the ports are additive.
    """
    ports: [PortForward!]
  ): Service!

  """
  Creates a service that forwards traffic to a specified address via the host.
  """
  service(
    """
    Ports to expose via the service, forwarding through the host network.

    If a port's frontend is unspecified or 0, it defaults to the same as the
    backend port.

    An empty set of ports is not valid; an error will be returned.
    """
    ports: [PortForward!]!

    "Upstream host to forward traffic to."
    host: String = "localhost"
  ): Service!

  """
  Sets a secret given a user-defined name and the file path on the host, and returns the secret.
  The file is limited to a size of 512000 bytes.
  """
  setSecretFile(
    """
    The user defined name for this secret.
    """
    name: String!

    """
    Location of the file to set as a secret.
    """
    path: String!
  ): Secret!
}

"Port forwarding rules for tunneling network traffic."
input PortForward {
  """
  Port to expose to clients. If unspecified, a default will be chosen.
  """
  frontend: Int

  "Destination port for traffic."
  backend: Int!

  "Protocol to use for traffic."
  protocol: NetworkProtocol = TCP
}
