extend type Query {
  "Query the host environment"
  host: Host!
}

"Information about the host execution environment"
type Host {
  "The current working directory on the host"
  workdir(exclude: [String!], include: [String!]): Directory!
    @deprecated(reason: "Use `directory` with path set to '.' instead.")

  "Access a directory on the host"
  directory(path: String!, exclude: [String!], include: [String!]): Directory!

  "Access an environment variable on the host"
  envVariable(name: String!): HostVariable

  "Access a Unix socket on the host"
  unixSocket(path: String!): Socket!

  "Start a proxy service to forward network connections between host and containers"
  proxy(
    """
    Inbound port forwarding: forward ports from containers to the host.
    This is conceptually equivalent to 'ssh -R'

      - Listen on ports in the proxy container namespace
      - Forward to ports in the host machine's namespace
    """
    inbound: [...PortForward!],
  
    """
    Outbound port forwarding: forward ports from the host to containers.
    
    This is conceptually equivalent to 'ssh -L':

      - Listen on ports in the host machine's namespace
      - Forward to ports in the proxy container's namespace
    
    Use in conjunction with 'serviceDependencies'
    """
    outbound: [...PortForward!],

    """
    Service dependencies for this proxy.

    Combined with `outboundRules`, this allows host-to-container networking (h2c), by using the service alias as a forwardAddress for the outbound rule.    
    """
    #FIXME: slight duplication of Container{withServiceDependency}, to share the Service type. Good tradeoff for now.
    serviceDependencies: [...ServiceDependency!]
  ): Service!
}

"""
A TCP/UDP port forwarding configuration
"""
input PortForward {
  """
  The port number to listen on.

    Example: 80
  """
  listenPort: Integer!

  """
  The network protocol to listen on (TCP or UDP)
  """
  listenProtocol: NetworkProtocol=TCP

  """
  The host address to listen on. Default to "0.0.0.0"
  """
  listenHost: String="0.0.0.0"

  """
  The network protocol to forward traffic to (optional).
  Defaults to the value of listenProtocol
  """
  forwardProtocol: NetworkProtocol
  
  """
  The network host address to forward to. Defaults to "localhost"
  """
  forwardHost: String="localhost"
  
  """
  The port number to forward to. Defaults to the value of listenPort
  """
  forwardPort: Integer
}


"An environment variable on the host environment"
type HostVariable {
  "The value of this variable"
  value: String!

  "A secret referencing the value of this variable"
  secret: Secret!
}
