"A reference to a Module."
scalar ModuleID

extend type Query {
  """
  Create a new module.
  """
  module: Module!

  """
  Load a module by ID.
  """
  loadModuleFromID(id: ModuleID!): Module!

  """
  The module currently being served in the session, if any.
  """
  currentModule: Module
}

type Module {
  "The ID of the module"
  id: ModuleID!

  "The name of the module"
  name: String!

  "The doc string of the module, if any"
  description: String

  "The SDK used by this module. Either a name of a builtin SDK or a module ref pointing to the SDK's implementation."
  sdk: String!

  "The code generated by the SDK's runtime"
  generatedCode: GeneratedCode!

  "Modules used by this module"
  dependencies: [Module!]!

  "The dependencies as configured by the module"
  dependencyConfig: [String!]!

  "The directory containing the module's source code"
  sourceDirectory: Directory!

  "The module's subpath within the source directory"
  sourceDirectorySubPath: String!

  "Objects served by this module"
  objects: [TypeDef!]

  "This module plus the given Object type and associated functions"
  withObject(object: TypeDefID!): Module! # TODO: ObjectTypeDefID?
  """
  Serve a module's API in the current session.
      Note: this can only be called once per session.
      In the future, it could return a stream or service to remove the side effect.
  """
  serve: Void
}

"A reference to GeneratedCode."
scalar GeneratedCodeID

extend type Query {
  """
  Create a code generation result, given a directory containing the generated
  code.
  """
  generatedCode(code: DirectoryID!): GeneratedCode!

  """
  Load a GeneratedCode by ID.
  """
  loadGeneratedCodeFromID(id: GeneratedCodeID!): GeneratedCode!
}

type GeneratedCode {
  id: GeneratedCodeID!

  "The directory containing the generated code"
  code: Directory!

  "List of paths to ignore in version control (i.e. .gitignore)"
  vcsIgnoredPaths: [String!]
  "Set the list of paths to ignore in version control"
  withVCSIgnoredPaths(paths: [String!]!): GeneratedCode!

  "List of paths to mark generated in version control (i.e. .gitattributes)"
  vcsGeneratedPaths: [String!]
  "Set the list of paths to mark generated in version control"
  withVCSGeneratedPaths(paths: [String!]!): GeneratedCode!
}

extend type Directory {
  """
  Load the directory as a Dagger module
  """
  asModule(
    """
    An optional subpath of the directory which contains the module's source
    code.

    This is needed when the module code is in a subdirectory but requires
    parent directories to be loaded in order to execute. For example, the
    module source code may need a go.mod, project.toml, package.json, etc. file
    from a parent directory.

    If not set, the module source code is loaded from the root of the
    directory.
    """
    sourceSubpath: String
  ): Module!
}

"Static configuration for a module (e.g. parsed contents of dagger.json)"
type ModuleConfig {
  "The name of the module."
  name: String!

  "The root directory of the module's project, which may be above the module source code."
  root: String

  "Either the name of a built-in SDK ('go', 'python', etc.) OR a module reference pointing to the SDK's module implementation."
  sdk: String!

  "Include only these file globs when loading the module root."
  include: [String!]

  "Exclude these file globs when loading the module root."
  exclude: [String!]

  "Modules that this module depends on."
  dependencies: [String!]
}

extend type Query {
  """
  Load the static configuration for a module from the given source directory and optional subpath.
  """
  moduleConfig(sourceDirectory: DirectoryID!, subpath: String): ModuleConfig!
}
