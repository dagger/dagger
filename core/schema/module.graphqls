"A reference to a Module."
scalar ModuleID

extend type Query {
  """
  Load a module by ID, or create a new one if id is unset.
  """
  module(id: ModuleID): Module!

  """
  The module currently being served in the session, if any.
  """
  currentModule: Module
}

type Module {
  "The ID of the module"
  id: ModuleID!

  "The name of the module"
  name: String!

  "The doc string of the module, if any"
  description: String

  "The SDK used by this module"
  sdk: String!

  "The SDK runtime module image ref."
  sdkRuntime: String!

  "The code generated by the SDK's runtime"
  generatedCode: GeneratedCode!

  "Modules used by this module"
  dependencies: [Module!]!

  "The dependencies as configured by the module"
  dependencyConfig: [String!]!

  "The directory containing the module's source code"
  sourceDirectory: Directory!

  "The module's subpath within the source directory"
  sourceDirectorySubPath: String!

  "Objects served by this module"
  objects: [TypeDef!]

  "This module plus the given Object type and associated functions"
  withObject(object: TypeDefID!): Module! # TODO: ObjectTypeDefID?
  """
  Serve a module's API in the current session.
      Note: this can only be called once per session.
      In the future, it could return a stream or service to remove the side effect.
  """
  serve(environment: [ModuleEnvironmentVariable!]): Void
}

"A reference to GeneratedCode."
scalar GeneratedCodeID

extend type Query {
  """
  Load GeneratedCode by ID, or create a new one if id is unset.
  """
  generatedCode(id: GeneratedCodeID): GeneratedCode!
}

type GeneratedCode {
  id: GeneratedCodeID!

  "The directory containing the generated code"
  code: Directory!
  "Set the directory containing the generated code"
  withCode(code: DirectoryID!): GeneratedCode!

  "List of paths to ignore in version control (i.e. .gitignore)"
  vcsIgnoredPaths: [String!]
  "Set the list of paths to ignore in version control"
  withVCSIgnoredPaths(paths: [String!]!): GeneratedCode!

  "List of paths to mark generated in version control (i.e. .gitattributes)"
  vcsGeneratedPaths: [String!]
  "Set the list of paths to mark generated in version control"
  withVCSGeneratedPaths(paths: [String!]!): GeneratedCode!
}

extend type Directory {
  """
  Load the directory as a Dagger module
  """
  asModule(
    """
    An optional subpath of the directory which contains the module's source
    code.

    This is needed when the module code is in a subdirectory but requires
    parent directories to be loaded in order to execute. For example, the
    module source code may need a go.mod, project.toml, package.json, etc. file
    from a parent directory.

    If not set, the module source code is loaded from the root of the
    directory.
    """
    sourceSubpath: String

    """
    A pre-built runtime container to use instead of building one from the
    source code. This is useful for bootstrapping.

    You should ignore this unless you're building a Dagger SDK.
    """
    runtime: ContainerID
  ): Module!
}

input ModuleEnvironmentVariable {
  name: String!
  value: String
}
