extend type Query {
  "Load a project from ID."
  project(id: ProjectID): Project!

  "Load a project command from ID."
  projectCommand(id: ProjectCommandID): ProjectCommand!
}

"A unique project identifier."
scalar ProjectID

"A unique project command identifier."
scalar ProjectCommandID

"A collection of Dagger resources that can be queried and invoked."
type Project {
  "A unique identifier for this project."
  id: String!

  "Initialize this project from the given directory and config path"
  load(source: DirectoryID!, configPath: String!): Project!

  "Name of the project"
  name: String!

  "Commands provided by this project"
  commands: [ProjectCommand!]
}

"A command defined in a project that can be invoked from the CLI."
type ProjectCommand {
  "A unique identifier for this command."
  id: String!

  "The name of the command."
  name: String!

  "Flags accepted by this command."
  flags: [ProjectCommandFlag!]

  "Documentation for what this command does."
  description: String

  "Subcommands, if any, that this command provides."
  subcommands: [ProjectCommand!]
}

"A flag accepted by a project command."
type ProjectCommandFlag {
  "The name of the flag."
  name: String!

  "Documentation for what this flag sets."
  description: String
}
