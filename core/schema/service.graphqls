extend type Query {
  """
  Loads a service from ID.
  """
  loadServiceFromID(id: ServiceID!): Service!
}

"A unique service identifier."
scalar ServiceID

type Service {
  "A unique identifier for this service."
  id: ServiceID!

  """
  Retrieves a hostname which can be used by clients to reach this container.
  """
  hostname: String!

  "Retrieves the list of ports provided by the service."
  ports: [Port!]!

  """
  Retrieves an endpoint that clients can use to reach this container.

  If no port is specified, the first exposed port is used. If none exist an error is returned.

  If a scheme is specified, a URL is returned. Otherwise, a host:port pair is returned.
  """
  endpoint(
    "The exposed port number for the endpoint"
    port: Int
    "Return a URL with the given scheme, eg. http for http://"
    scheme: String
  ): String!

  """
  Start the service and wait for its health checks to succeed.

  Services bound to a Container do not need to be manually started.
  """
  start: ServiceID!

  """
  Stop the service.
  """
  stop: ServiceID!
}

extend type Container {
  """
  Turn the container into a Service.

  Be sure to set any exposed ports before this conversion.
  """
  asService: Service!
}
