package core

import (
	"github.com/dagger/cloak/dagger"
	"github.com/moby/buildkit/client/llb"
)

//
//
//
//
// TODO: actually autogenerate core too from CUE, just handwritten still for now
//
//
//
//

type ImageInput struct {
	Ref string
}

type ImageOutput struct {
	FS FSOutput
	// TODO: Config ImageConfig
}

type GitRepoInput struct {
	Remote string
	Ref    string
}

type GitRepoOutput struct {
	FS FSOutput
}

type ExecInput struct {
	Base   FSOutput
	Dir    string
	Args   []string
	Mounts []Mount
}

type Mount struct {
	FS   FSOutput
	Path string
}

type ExecOutput struct {
	FS     FSOutput
	Mounts map[string]FSOutput
}

//
//
//
//
// AUTOGENERATED STOP
//
//
//
//

// temporarily just an alias for llb.State, in long term probably need more thorough wrapping type to
// fully hide llb from users
type FSOutput llb.State

// Evaluate synchronously instantiates the filesystem, blocking until it is created
// TODO: maybe more args to support caching config like "always" and maybe remote imports
func (fs FSOutput) Evaluate(ctx *dagger.Context) error {
	panic("TODO")
}

// TODO: FS.ReadFile and similar

func Image(i *ImageInput) *ImageOutput {
	return &ImageOutput{FS: FSOutput(llb.Image(i.Ref))}
}

func GitRepo(i *GitRepoInput) *GitRepoOutput {
	return &GitRepoOutput{FS: FSOutput(llb.Git(i.Remote, i.Ref))}
}

func Exec(i *ExecInput) *ExecOutput {
	exec := llb.State(i.Base).Run(
		llb.Dir(i.Dir),
		llb.Args(i.Args),
	)
	out := make(map[string]FSOutput)
	out["/"] = FSOutput(exec.Root())
	for _, m := range i.Mounts {
		out[m.Path] = FSOutput(exec.AddMount(m.Path, llb.State(m.FS)))
	}
	return &ExecOutput{FS: FSOutput(exec.Root()), Mounts: out}
}
