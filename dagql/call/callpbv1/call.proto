syntax = "proto3";
package dagger;

option go_package = "./callpbv1";

// DAG represents a GraphQL value of a certain type, constructed by evaluating
// its contained DAG of Calls. In other words, it represents a
// constructor-addressed value, which may be an object, an array, or a scalar
// value.
//
// It may be binary=>base64-encoded to be used as a GraphQL ID value for
// objects. Alternatively it may be stored in a database and referred to via an
// RFC-6920 ni://sha-256;... URI.
message DAG {
  // The digest of the Call representing the "root" of the DAG. All other Calls
  // in this message are referenced through the root Call's receiver, args or
  // module.
  string rootDigest = 1;

  // Map of Call digests to the Calls they represent. This structure
  // allows us to deduplicate occurrences of the same Call in the DAG.
  map<string, Call> callsByDigest = 2;
}

// Call represents a function call, including all inputs necessary to call it
// again, a hint as to whether you can expect the same result, and the GraphQL
// return type for runtime type checking.
//
// In GraphQL terms, Call corresponds to a field selection against an object.
message Call {
  // The receiving object for the Call's field selection. If specified, this is
  // the digest of the Call that returns the receiver. If not specified, Query
  // is implied.
  string receiverDigest = 1;

  // The GraphQL type of the call's return value.
  Type type = 2;

  // The GraphQL field name to select.
  string field = 3;

  // The arguments to pass to the GraphQL field selection. The order matters;
  // if it changes, the digest changes. For optimal readability hese should
  // ideally be in the order defined in the schema.
  repeated Argument args = 4;

  // If true, this Call is not reproducible; repeated evaluations may return
  // different values.
  bool tainted = 5;

  // If true, this Call may be omitted from the DAG without changing
  // the final result.
  //
  // This may be used to prevent meta-queries from busting cache keys when
  // desired, if Calls are used as a cache key for persistence.
  //
  // It is worth noting that we don't store meta information at this level and
  // continue to force metadata to be set via GraphQL queries. It makes Calls
  // always easy to evaluate.
  bool meta = 6;

  // If the field selection returns a list, this is the index of the element to
  // return from the Call. This value is 1-indexed, hence being call nth (1st,
  // not 0th). At the same time that this is set, the Call's Type must also be
  // changed to its Elem. If the type does not have an Elem.
  //
  // Here we're teetering dangerously close to full blown attribute path
  // selection, but we're intentionally limiting ourselves instead to cover
  // only the common case of returning a list of objects. The only case not
  // handled is a nested list. Don't do that; return a list of typed values
  // instead.
  int64 nth = 7;

  // The module that provides the implementation of the field.
  //
  // The actual usage of this is opaque to the protocol. In Dagger this is
  // the module providing the implementation of the field.
  Module module = 8;

  // A unique digest of this Call. Note that this must not be set when
  // calculating the Call's digest.
  string digest = 9;
}

// Module represents a self-contained logical module that can be dynamically
// loaded to evaluate an Call that uses it. The details of this task are not
// defined at the protocol layer.
message Module {
  // The digest of the Call that provides the module.
  string callDigest = 1;
  // The name of the module.
  string name = 2;
  // A human-readable ref which may be interpreted by an external system to
  // yield the same module.
  string ref = 3;
}

// A named value passed to a GraphQL field or contained in an input object.
message Argument {
  string name = 1;
  Literal value = 2;
}

// A value passed to an argument or contained in a list.
message Literal {
  oneof value {
    string callDigest = 1;
    bool null = 2;
    bool bool = 3;
    string enum = 4;
    int64 int = 5;
    double float = 6;
    string string = 7;
    List list = 8;
    Object object = 9;
  }
}

// A list of values.
message List {
  repeated Literal values = 1;
}

// A series of named values.
message Object {
  repeated Argument values = 1;
}

// A GraphQL type reference.
message Type {
  string namedType = 1;
  Type elem = 2;
  bool nonNull = 3;
}
