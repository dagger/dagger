import React, { useEffect, useState } from "react";
import Link from "@docusaurus/Link";
import styles from "@site/src/css/cookbookLoader.module.scss";

interface CookbookFrontMatter {
  title: string;
  description: string;
  cookbook_tag: string;
  slug?: string;
}

interface CookbookFile {
  path: string;
  frontMatter: CookbookFrontMatter;
  contentTitle: string;
  excerpt: string;
  firstHeading?: string;
}

interface CookbookData {
  cookbookFiles: { [tag: string]: CookbookFile[] };
  tags: string[];
}

interface CookbookLoaderProps {
  cookbookTag: string;
  className?: string;
}

/**
 * Component that displays cookbook files filtered by cookbook_tag
 * Loads cookbook data from static JSON file generated by the cookbook plugin
 * 
 * @param cookbookTag - The tag to filter cookbook files by
 * @param className - Optional CSS class name for the container
 */
export default function CookbookLoader({
  cookbookTag,
  className,
}: CookbookLoaderProps) {
  const [cookbookData, setCookbookData] = useState<CookbookData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadCookbookData = async () => {
      try {
        // Load the cookbook data from the static JSON file
        const response = await fetch('/cookbook.json');
        if (!response.ok) {
          throw new Error(`Failed to load cookbook data: ${response.statusText}`);
        }
        const data: CookbookData = await response.json();
        setCookbookData(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load cookbook data');
        console.error('Error loading cookbook data:', err);
      } finally {
        setLoading(false);
      }
    };

    loadCookbookData();
  }, []);

  const containerClass = className ? `${styles.cookbookLoader} ${className}` : styles.cookbookLoader;

  if (loading) {
    return (
      <div className={containerClass}>
        <div className={styles.cookbookLoading}>Loading cookbook files...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className={containerClass}>
        <div className={styles.cookbookError}>
          Error loading cookbook files: {error}
        </div>
      </div>
    );
  }

  if (!cookbookData) {
    return (
      <div className={containerClass}>
        <div className={styles.cookbookEmpty}>
          No cookbook data available.
        </div>
      </div>
    );
  }

  const cookbookFiles: CookbookFile[] = cookbookData.cookbookFiles[cookbookTag] || [];

  if (cookbookFiles.length === 0) {
    return (
      <div className={containerClass}>
        <div className={styles.cookbookEmpty}>
          <p>No cookbook files found for tag: <strong>{cookbookTag}</strong></p>
          <p>Available tags: {cookbookData.tags.join(', ')}</p>
        </div>
      </div>
    );
  }

  return (
    <div className={containerClass}>
      {cookbookFiles.map((file, index) => (
        <CookbookFileCard key={index} file={file} />
      ))}
    </div>
  );
}

function CookbookFileCard({ file }: { file: CookbookFile }) {
  const [expanded, setExpanded] = useState(false);

  return (
    <div className={styles.cookbookFileCard}>
      <div 
        onClick={() => setExpanded(!expanded)}
        style={{ cursor: 'pointer' }}
      >
        <h2 className={styles.cookbookFileTitle}>
          {file.frontMatter.title}
          <span style={{ 
            float: 'right', 
            fontSize: '1rem', 
            color: 'var(--ifm-color-emphasis-600)' 
          }}>
            {expanded ? 'â–¼' : 'â–¶'}
          </span>
        </h2>
        <p className={styles.cookbookFileDescription}>
          {file.frontMatter.description}
        </p>
      </div>
      
      {expanded && (
        <div 
          className={styles.cookbookContent}
          style={{
            marginTop: '1rem',
            padding: '1.5rem',
            backgroundColor: 'var(--ifm-color-emphasis-100)',
            border: '1px solid var(--ifm-color-emphasis-200)',
            borderRadius: '8px'
          }}
        >
          {file.firstHeading && (
            <h3 style={{ 
              marginTop: 0, 
              color: 'var(--ifm-color-primary)',
              borderBottom: '2px solid var(--ifm-color-primary)',
              paddingBottom: '0.5rem'
            }}>
              {file.firstHeading}
            </h3>
          )}
          
          <div style={{ 
            color: 'var(--ifm-color-emphasis-800)',
            lineHeight: '1.6'
          }}>
            <p style={{ fontStyle: 'italic', marginBottom: '1rem' }}>
              {file.excerpt || 'This cookbook entry provides practical examples and code snippets for this functionality.'}
            </p>
            
            <div style={{
              padding: '1rem',
              backgroundColor: 'var(--ifm-background-color)',
              border: '1px solid var(--ifm-color-emphasis-300)',
              borderRadius: '4px',
              marginTop: '1rem'
            }}>
              <p style={{ margin: 0, fontSize: '0.9rem' }}>
                <strong>ðŸ’¡ Tip:</strong> This section includes code examples in multiple languages (Go, Python, TypeScript, PHP) 
                and practical command-line examples showing different usage patterns.
              </p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

