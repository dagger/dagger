// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package clientdb

import (
	"context"
	"database/sql"
)

const insertLog = `-- name: InsertLog :one
INSERT INTO logs (
    trace_id, span_id, timestamp, severity, body, attributes
) VALUES (
    ?, ?, ?, ?, ?, ?
) RETURNING id
`

type InsertLogParams struct {
	TraceID    sql.NullString
	SpanID     sql.NullString
	Timestamp  int64
	Severity   int64
	Body       interface{}
	Attributes interface{}
}

func (q *Queries) InsertLog(ctx context.Context, arg InsertLogParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertLog,
		arg.TraceID,
		arg.SpanID,
		arg.Timestamp,
		arg.Severity,
		arg.Body,
		arg.Attributes,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const insertSpan = `-- name: InsertSpan :one
INSERT INTO spans (
    trace_id, span_id, trace_state, parent_span_id, flags, name, kind, start_time, end_time, attributes, dropped_attributes_count, events, dropped_events_count, links, dropped_links_count, status_code, status_message, instrumentation_scope, resource
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
) RETURNING id
`

type InsertSpanParams struct {
	TraceID                string
	SpanID                 string
	TraceState             string
	ParentSpanID           sql.NullString
	Flags                  int64
	Name                   string
	Kind                   string
	StartTime              int64
	EndTime                sql.NullInt64
	Attributes             interface{}
	DroppedAttributesCount int64
	Events                 interface{}
	DroppedEventsCount     int64
	Links                  interface{}
	DroppedLinksCount      int64
	StatusCode             int64
	StatusMessage          string
	InstrumentationScope   interface{}
	Resource               interface{}
}

func (q *Queries) InsertSpan(ctx context.Context, arg InsertSpanParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, insertSpan,
		arg.TraceID,
		arg.SpanID,
		arg.TraceState,
		arg.ParentSpanID,
		arg.Flags,
		arg.Name,
		arg.Kind,
		arg.StartTime,
		arg.EndTime,
		arg.Attributes,
		arg.DroppedAttributesCount,
		arg.Events,
		arg.DroppedEventsCount,
		arg.Links,
		arg.DroppedLinksCount,
		arg.StatusCode,
		arg.StatusMessage,
		arg.InstrumentationScope,
		arg.Resource,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
