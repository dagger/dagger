// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fswatch.proto

package fswatch

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FileEventType int32

const (
	CREATE FileEventType = 0
	WRITE  FileEventType = 1
	REMOVE FileEventType = 2
	RENAME FileEventType = 3
	CHMOD  FileEventType = 4
)

var FileEventType_name = map[int32]string{
	0: "CREATE",
	1: "WRITE",
	2: "REMOVE",
	3: "RENAME",
	4: "CHMOD",
}

var FileEventType_value = map[string]int32{
	"CREATE": 0,
	"WRITE":  1,
	"REMOVE": 2,
	"RENAME": 3,
	"CHMOD":  4,
}

func (FileEventType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_66f028b687043841, []int{0}
}

type WatchRequest struct {
	// Types that are valid to be assigned to Request:
	//
	//	*WatchRequest_UpdateWatch
	Request isWatchRequest_Request `protobuf_oneof:"request"`
}

func (m *WatchRequest) Reset()      { *m = WatchRequest{} }
func (*WatchRequest) ProtoMessage() {}
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_66f028b687043841, []int{0}
}
func (m *WatchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchRequest.Merge(m, src)
}
func (m *WatchRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchRequest proto.InternalMessageInfo

type isWatchRequest_Request interface {
	isWatchRequest_Request()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WatchRequest_UpdateWatch struct {
	UpdateWatch *UpdateWatch `protobuf:"bytes,1,opt,name=update_watch,json=updateWatch,proto3,oneof" json:"update_watch,omitempty"`
}

func (*WatchRequest_UpdateWatch) isWatchRequest_Request() {}

func (m *WatchRequest) GetRequest() isWatchRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *WatchRequest) GetUpdateWatch() *UpdateWatch {
	if x, ok := m.GetRequest().(*WatchRequest_UpdateWatch); ok {
		return x.UpdateWatch
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WatchRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WatchRequest_UpdateWatch)(nil),
	}
}

type UpdateWatch struct {
	Path      string   `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Include   []string `protobuf:"bytes,2,rep,name=include,proto3" json:"include,omitempty"`
	Exclude   []string `protobuf:"bytes,3,rep,name=exclude,proto3" json:"exclude,omitempty"`
	Gitignore bool     `protobuf:"varint,4,opt,name=gitignore,proto3" json:"gitignore,omitempty"`
}

func (m *UpdateWatch) Reset()      { *m = UpdateWatch{} }
func (*UpdateWatch) ProtoMessage() {}
func (*UpdateWatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_66f028b687043841, []int{1}
}
func (m *UpdateWatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateWatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateWatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateWatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateWatch.Merge(m, src)
}
func (m *UpdateWatch) XXX_Size() int {
	return m.Size()
}
func (m *UpdateWatch) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateWatch.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateWatch proto.InternalMessageInfo

func (m *UpdateWatch) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *UpdateWatch) GetInclude() []string {
	if m != nil {
		return m.Include
	}
	return nil
}

func (m *UpdateWatch) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

func (m *UpdateWatch) GetGitignore() bool {
	if m != nil {
		return m.Gitignore
	}
	return false
}

type WatchResponse struct {
	// Types that are valid to be assigned to Event:
	//
	//	*WatchResponse_FileEvents
	Event isWatchResponse_Event `protobuf_oneof:"event"`
}

func (m *WatchResponse) Reset()      { *m = WatchResponse{} }
func (*WatchResponse) ProtoMessage() {}
func (*WatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_66f028b687043841, []int{2}
}
func (m *WatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchResponse.Merge(m, src)
}
func (m *WatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchResponse proto.InternalMessageInfo

type isWatchResponse_Event interface {
	isWatchResponse_Event()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type WatchResponse_FileEvents struct {
	FileEvents *FileEvents `protobuf:"bytes,1,opt,name=file_events,json=fileEvents,proto3,oneof" json:"file_events,omitempty"`
}

func (*WatchResponse_FileEvents) isWatchResponse_Event() {}

func (m *WatchResponse) GetEvent() isWatchResponse_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (m *WatchResponse) GetFileEvents() *FileEvents {
	if x, ok := m.GetEvent().(*WatchResponse_FileEvents); ok {
		return x.FileEvents
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*WatchResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*WatchResponse_FileEvents)(nil),
	}
}

type FileEvents struct {
	Events []*FileEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (m *FileEvents) Reset()      { *m = FileEvents{} }
func (*FileEvents) ProtoMessage() {}
func (*FileEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_66f028b687043841, []int{3}
}
func (m *FileEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileEvents.Merge(m, src)
}
func (m *FileEvents) XXX_Size() int {
	return m.Size()
}
func (m *FileEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_FileEvents.DiscardUnknown(m)
}

var xxx_messageInfo_FileEvents proto.InternalMessageInfo

func (m *FileEvents) GetEvents() []*FileEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

type FileEvent struct {
	Path string        `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Type FileEventType `protobuf:"varint,2,opt,name=type,proto3,enum=dagger.fswatch.FileEventType" json:"type,omitempty"`
}

func (m *FileEvent) Reset()      { *m = FileEvent{} }
func (*FileEvent) ProtoMessage() {}
func (*FileEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_66f028b687043841, []int{4}
}
func (m *FileEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileEvent.Merge(m, src)
}
func (m *FileEvent) XXX_Size() int {
	return m.Size()
}
func (m *FileEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FileEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FileEvent proto.InternalMessageInfo

func (m *FileEvent) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *FileEvent) GetType() FileEventType {
	if m != nil {
		return m.Type
	}
	return CREATE
}

func init() {
	proto.RegisterEnum("dagger.fswatch.FileEventType", FileEventType_name, FileEventType_value)
	proto.RegisterType((*WatchRequest)(nil), "dagger.fswatch.WatchRequest")
	proto.RegisterType((*UpdateWatch)(nil), "dagger.fswatch.UpdateWatch")
	proto.RegisterType((*WatchResponse)(nil), "dagger.fswatch.WatchResponse")
	proto.RegisterType((*FileEvents)(nil), "dagger.fswatch.FileEvents")
	proto.RegisterType((*FileEvent)(nil), "dagger.fswatch.FileEvent")
}

func init() { proto.RegisterFile("fswatch.proto", fileDescriptor_66f028b687043841) }

var fileDescriptor_66f028b687043841 = []byte{
	// 424 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xbf, 0x6e, 0xd3, 0x40,
	0x18, 0xbf, 0x6b, 0xfe, 0x18, 0x7f, 0x6e, 0x2a, 0xeb, 0x26, 0x53, 0xda, 0x53, 0xe4, 0xc9, 0x62,
	0xb0, 0xa8, 0x99, 0x2b, 0x68, 0x8a, 0x2b, 0x77, 0x08, 0x95, 0xae, 0x81, 0x48, 0x30, 0x54, 0xa6,
	0xb9, 0x18, 0x4b, 0x91, 0x6d, 0xec, 0x33, 0xd0, 0x8d, 0x47, 0xe0, 0x31, 0x78, 0x14, 0xc6, 0x8c,
	0x1d, 0x89, 0xb3, 0x30, 0xf6, 0x11, 0x90, 0xef, 0x4c, 0xd2, 0x46, 0xcd, 0xf6, 0xfb, 0xf7, 0xfd,
	0xe4, 0xef, 0xf3, 0x41, 0x6f, 0x5a, 0x7c, 0x0b, 0xc5, 0xf5, 0x67, 0x37, 0xcb, 0x53, 0x91, 0x92,
	0xbd, 0x49, 0x18, 0x45, 0x3c, 0x77, 0x1b, 0xd5, 0xfe, 0x08, 0xbb, 0xe3, 0x1a, 0x30, 0xfe, 0xa5,
	0xe4, 0x85, 0x20, 0xaf, 0x61, 0xb7, 0xcc, 0x26, 0xa1, 0xe0, 0x57, 0xd2, 0xb7, 0x70, 0x1f, 0x3b,
	0x86, 0xf7, 0xcc, 0x7d, 0x38, 0xe6, 0xbe, 0x93, 0x19, 0x39, 0x19, 0x20, 0x66, 0x94, 0x6b, 0x3a,
	0xd0, 0x41, 0xcb, 0x55, 0x99, 0x5d, 0x80, 0x71, 0x2f, 0x48, 0x08, 0xb4, 0xb3, 0x50, 0xa8, 0x4e,
	0x9d, 0x49, 0x4c, 0x2c, 0xd0, 0xe2, 0xe4, 0x7a, 0x56, 0x4e, 0xb8, 0xb5, 0xd3, 0x6f, 0x39, 0x3a,
	0xfb, 0x4f, 0x6b, 0x87, 0x7f, 0x57, 0x4e, 0x4b, 0x39, 0x0d, 0x25, 0x07, 0xa0, 0x47, 0xb1, 0x88,
	0xa3, 0x24, 0xcd, 0xb9, 0xd5, 0xee, 0x63, 0xe7, 0x09, 0x5b, 0x0b, 0xf6, 0x18, 0x7a, 0xcd, 0x46,
	0x45, 0x96, 0x26, 0x05, 0x27, 0xc7, 0x60, 0x4c, 0xe3, 0x19, 0xbf, 0xe2, 0x5f, 0x79, 0x22, 0x8a,
	0x66, 0xa3, 0xfd, 0xcd, 0x8d, 0xce, 0xe2, 0x19, 0xf7, 0x65, 0x22, 0x40, 0x0c, 0xa6, 0x2b, 0x36,
	0xd0, 0xa0, 0x23, 0x27, 0xed, 0x57, 0x00, 0xeb, 0x10, 0x39, 0x82, 0xee, 0xaa, 0xb0, 0xe5, 0x18,
	0xde, 0xd3, 0xad, 0x85, 0xac, 0x09, 0xda, 0x0c, 0xf4, 0x95, 0xf8, 0xe8, 0x31, 0x8e, 0xa0, 0x2d,
	0x6e, 0xb2, 0xfa, 0x12, 0xd8, 0xd9, 0xf3, 0x0e, 0xb7, 0x36, 0x8e, 0x6e, 0x32, 0xce, 0x64, 0xf4,
	0xf9, 0x39, 0xf4, 0x1e, 0xc8, 0x04, 0xa0, 0x7b, 0xca, 0xfc, 0x93, 0x91, 0x6f, 0x22, 0xa2, 0x43,
	0x67, 0xcc, 0xce, 0x47, 0xbe, 0x89, 0x6b, 0x99, 0xf9, 0xc3, 0x8b, 0xf7, 0xbe, 0xb9, 0xa3, 0xf0,
	0xdb, 0x93, 0xa1, 0x6f, 0xb6, 0xea, 0xc8, 0x69, 0x30, 0xbc, 0x78, 0x63, 0xb6, 0xbd, 0x4b, 0xd0,
	0xce, 0x2e, 0xd5, 0x9f, 0x0a, 0xa0, 0xa3, 0xc0, 0xc1, 0xe6, 0x37, 0xdc, 0x7f, 0x2c, 0xfb, 0x87,
	0x5b, 0x5c, 0x75, 0x78, 0x07, 0xbf, 0xc0, 0x83, 0xe3, 0xf9, 0x82, 0xa2, 0xdb, 0x05, 0x45, 0x77,
	0x0b, 0x8a, 0x7f, 0x54, 0x14, 0xff, 0xaa, 0x28, 0xfe, 0x5d, 0x51, 0x3c, 0xaf, 0x28, 0xfe, 0x53,
	0x51, 0xfc, 0xb7, 0xa2, 0xe8, 0xae, 0xa2, 0xf8, 0xe7, 0x92, 0xa2, 0xf9, 0x92, 0xa2, 0xdb, 0x25,
	0x45, 0x1f, 0xb4, 0xa6, 0xf0, 0x53, 0x57, 0xbe, 0xda, 0x97, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x46, 0xec, 0xfb, 0x20, 0xc6, 0x02, 0x00, 0x00,
}

func (x FileEventType) String() string {
	s, ok := FileEventType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *WatchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WatchRequest)
	if !ok {
		that2, ok := that.(WatchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Request == nil {
		if this.Request != nil {
			return false
		}
	} else if this.Request == nil {
		return false
	} else if !this.Request.Equal(that1.Request) {
		return false
	}
	return true
}
func (this *WatchRequest_UpdateWatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WatchRequest_UpdateWatch)
	if !ok {
		that2, ok := that.(WatchRequest_UpdateWatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpdateWatch.Equal(that1.UpdateWatch) {
		return false
	}
	return true
}
func (this *UpdateWatch) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateWatch)
	if !ok {
		that2, ok := that.(UpdateWatch)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if len(this.Include) != len(that1.Include) {
		return false
	}
	for i := range this.Include {
		if this.Include[i] != that1.Include[i] {
			return false
		}
	}
	if len(this.Exclude) != len(that1.Exclude) {
		return false
	}
	for i := range this.Exclude {
		if this.Exclude[i] != that1.Exclude[i] {
			return false
		}
	}
	if this.Gitignore != that1.Gitignore {
		return false
	}
	return true
}
func (this *WatchResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WatchResponse)
	if !ok {
		that2, ok := that.(WatchResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Event == nil {
		if this.Event != nil {
			return false
		}
	} else if this.Event == nil {
		return false
	} else if !this.Event.Equal(that1.Event) {
		return false
	}
	return true
}
func (this *WatchResponse_FileEvents) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WatchResponse_FileEvents)
	if !ok {
		that2, ok := that.(WatchResponse_FileEvents)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FileEvents.Equal(that1.FileEvents) {
		return false
	}
	return true
}
func (this *FileEvents) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileEvents)
	if !ok {
		that2, ok := that.(FileEvents)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Events) != len(that1.Events) {
		return false
	}
	for i := range this.Events {
		if !this.Events[i].Equal(that1.Events[i]) {
			return false
		}
	}
	return true
}
func (this *FileEvent) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FileEvent)
	if !ok {
		that2, ok := that.(FileEvent)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *WatchRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fswatch.WatchRequest{")
	if this.Request != nil {
		s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WatchRequest_UpdateWatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fswatch.WatchRequest_UpdateWatch{` +
		`UpdateWatch:` + fmt.Sprintf("%#v", this.UpdateWatch) + `}`}, ", ")
	return s
}
func (this *UpdateWatch) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&fswatch.UpdateWatch{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Include: "+fmt.Sprintf("%#v", this.Include)+",\n")
	s = append(s, "Exclude: "+fmt.Sprintf("%#v", this.Exclude)+",\n")
	s = append(s, "Gitignore: "+fmt.Sprintf("%#v", this.Gitignore)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WatchResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fswatch.WatchResponse{")
	if this.Event != nil {
		s = append(s, "Event: "+fmt.Sprintf("%#v", this.Event)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WatchResponse_FileEvents) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&fswatch.WatchResponse_FileEvents{` +
		`FileEvents:` + fmt.Sprintf("%#v", this.FileEvents) + `}`}, ", ")
	return s
}
func (this *FileEvents) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&fswatch.FileEvents{")
	if this.Events != nil {
		s = append(s, "Events: "+fmt.Sprintf("%#v", this.Events)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FileEvent) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&fswatch.FileEvent{")
	s = append(s, "Path: "+fmt.Sprintf("%#v", this.Path)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFswatch(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FSWatchClient is the client API for FSWatch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FSWatchClient interface {
	Watch(ctx context.Context, opts ...grpc.CallOption) (FSWatch_WatchClient, error)
}

type fSWatchClient struct {
	cc *grpc.ClientConn
}

func NewFSWatchClient(cc *grpc.ClientConn) FSWatchClient {
	return &fSWatchClient{cc}
}

func (c *fSWatchClient) Watch(ctx context.Context, opts ...grpc.CallOption) (FSWatch_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FSWatch_serviceDesc.Streams[0], "/dagger.fswatch.FSWatch/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &fSWatchWatchClient{stream}
	return x, nil
}

type FSWatch_WatchClient interface {
	Send(*WatchRequest) error
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type fSWatchWatchClient struct {
	grpc.ClientStream
}

func (x *fSWatchWatchClient) Send(m *WatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fSWatchWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FSWatchServer is the server API for FSWatch service.
type FSWatchServer interface {
	Watch(FSWatch_WatchServer) error
}

// UnimplementedFSWatchServer can be embedded to have forward compatible implementations.
type UnimplementedFSWatchServer struct {
}

func (*UnimplementedFSWatchServer) Watch(srv FSWatch_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}

func RegisterFSWatchServer(s *grpc.Server, srv FSWatchServer) {
	s.RegisterService(&_FSWatch_serviceDesc, srv)
}

func _FSWatch_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FSWatchServer).Watch(&fSWatchWatchServer{stream})
}

type FSWatch_WatchServer interface {
	Send(*WatchResponse) error
	Recv() (*WatchRequest, error)
	grpc.ServerStream
}

type fSWatchWatchServer struct {
	grpc.ServerStream
}

func (x *fSWatchWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fSWatchWatchServer) Recv() (*WatchRequest, error) {
	m := new(WatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FSWatch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dagger.fswatch.FSWatch",
	HandlerType: (*FSWatchServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _FSWatch_Watch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fswatch.proto",
}

func (m *WatchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WatchRequest_UpdateWatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchRequest_UpdateWatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpdateWatch != nil {
		{
			size, err := m.UpdateWatch.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFswatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *UpdateWatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateWatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateWatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Gitignore {
		i--
		if m.Gitignore {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Exclude) > 0 {
		for iNdEx := len(m.Exclude) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Exclude[iNdEx])
			copy(dAtA[i:], m.Exclude[iNdEx])
			i = encodeVarintFswatch(dAtA, i, uint64(len(m.Exclude[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Include) > 0 {
		for iNdEx := len(m.Include) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Include[iNdEx])
			copy(dAtA[i:], m.Include[iNdEx])
			i = encodeVarintFswatch(dAtA, i, uint64(len(m.Include[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintFswatch(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Event != nil {
		{
			size := m.Event.Size()
			i -= size
			if _, err := m.Event.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *WatchResponse_FileEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WatchResponse_FileEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.FileEvents != nil {
		{
			size, err := m.FileEvents.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFswatch(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *FileEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Events[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFswatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FileEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintFswatch(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintFswatch(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFswatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovFswatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WatchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Request != nil {
		n += m.Request.Size()
	}
	return n
}

func (m *WatchRequest_UpdateWatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpdateWatch != nil {
		l = m.UpdateWatch.Size()
		n += 1 + l + sovFswatch(uint64(l))
	}
	return n
}
func (m *UpdateWatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFswatch(uint64(l))
	}
	if len(m.Include) > 0 {
		for _, s := range m.Include {
			l = len(s)
			n += 1 + l + sovFswatch(uint64(l))
		}
	}
	if len(m.Exclude) > 0 {
		for _, s := range m.Exclude {
			l = len(s)
			n += 1 + l + sovFswatch(uint64(l))
		}
	}
	if m.Gitignore {
		n += 2
	}
	return n
}

func (m *WatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		n += m.Event.Size()
	}
	return n
}

func (m *WatchResponse_FileEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FileEvents != nil {
		l = m.FileEvents.Size()
		n += 1 + l + sovFswatch(uint64(l))
	}
	return n
}
func (m *FileEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.Size()
			n += 1 + l + sovFswatch(uint64(l))
		}
	}
	return n
}

func (m *FileEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovFswatch(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovFswatch(uint64(m.Type))
	}
	return n
}

func sovFswatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFswatch(x uint64) (n int) {
	return sovFswatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *WatchRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WatchRequest{`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WatchRequest_UpdateWatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WatchRequest_UpdateWatch{`,
		`UpdateWatch:` + strings.Replace(fmt.Sprintf("%v", this.UpdateWatch), "UpdateWatch", "UpdateWatch", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateWatch) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateWatch{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Include:` + fmt.Sprintf("%v", this.Include) + `,`,
		`Exclude:` + fmt.Sprintf("%v", this.Exclude) + `,`,
		`Gitignore:` + fmt.Sprintf("%v", this.Gitignore) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WatchResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WatchResponse{`,
		`Event:` + fmt.Sprintf("%v", this.Event) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WatchResponse_FileEvents) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WatchResponse_FileEvents{`,
		`FileEvents:` + strings.Replace(fmt.Sprintf("%v", this.FileEvents), "FileEvents", "FileEvents", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileEvents) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForEvents := "[]*FileEvent{"
	for _, f := range this.Events {
		repeatedStringForEvents += strings.Replace(f.String(), "FileEvent", "FileEvent", 1) + ","
	}
	repeatedStringForEvents += "}"
	s := strings.Join([]string{`&FileEvents{`,
		`Events:` + repeatedStringForEvents + `,`,
		`}`,
	}, "")
	return s
}
func (this *FileEvent) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FileEvent{`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFswatch(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *WatchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFswatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateWatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFswatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFswatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpdateWatch{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &WatchRequest_UpdateWatch{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFswatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFswatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateWatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFswatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateWatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateWatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFswatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFswatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Include", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFswatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFswatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Include = append(m.Include, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exclude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFswatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFswatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exclude = append(m.Exclude, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gitignore", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Gitignore = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFswatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFswatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFswatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFswatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFswatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &FileEvents{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Event = &WatchResponse_FileEvents{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFswatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFswatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFswatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFswatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFswatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &FileEvent{})
			if err := m.Events[len(m.Events)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFswatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFswatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FileEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFswatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFswatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFswatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFswatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= FileEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFswatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFswatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFswatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFswatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFswatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFswatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFswatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFswatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFswatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFswatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFswatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFswatch = fmt.Errorf("proto: unexpected end of group")
)
