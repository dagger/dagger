// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: basic.proto

package store

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Data struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Data) Reset()      { *m = Data{} }
func (*Data) ProtoMessage() {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc45f6ac745dd88, []int{0}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

func (m *Data) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type LoadResponse struct {
}

func (m *LoadResponse) Reset()      { *m = LoadResponse{} }
func (*LoadResponse) ProtoMessage() {}
func (*LoadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0cc45f6ac745dd88, []int{1}
}
func (m *LoadResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadResponse.Merge(m, src)
}
func (m *LoadResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoadResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Data)(nil), "dagger.store.Data")
	proto.RegisterType((*LoadResponse)(nil), "dagger.store.LoadResponse")
}

func init() { proto.RegisterFile("basic.proto", fileDescriptor_0cc45f6ac745dd88) }

var fileDescriptor_0cc45f6ac745dd88 = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4a, 0x2c, 0xce,
	0x4c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x49, 0x49, 0x4c, 0x4f, 0x4f, 0x2d, 0xd2,
	0x2b, 0x2e, 0xc9, 0x2f, 0x4a, 0x95, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xcb,
	0x25, 0x95, 0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x94, 0x2a, 0x49, 0x71, 0xb1, 0xb8,
	0x24, 0x96, 0x24, 0x0a, 0x09, 0x71, 0xb1, 0xa4, 0x24, 0x96, 0x24, 0x4a, 0x30, 0x2a, 0x30, 0x6a,
	0xf0, 0x04, 0x81, 0xd9, 0x4a, 0x7c, 0x5c, 0x3c, 0x3e, 0xf9, 0x89, 0x29, 0x41, 0xa9, 0xc5, 0x05,
	0xf9, 0x79, 0xc5, 0xa9, 0x46, 0x5d, 0x8c, 0x5c, 0x5c, 0x4e, 0x20, 0x6b, 0x82, 0x41, 0xe6, 0x0a,
	0xd9, 0x73, 0x71, 0x83, 0xa4, 0x43, 0x12, 0x8b, 0x92, 0x12, 0x73, 0x72, 0x84, 0x84, 0xf4, 0x90,
	0x6d, 0xd5, 0x03, 0x99, 0x2a, 0x25, 0x85, 0x2a, 0x86, 0x6c, 0x9a, 0x06, 0xa3, 0x90, 0x35, 0x17,
	0x77, 0x50, 0x2a, 0xc2, 0x00, 0x31, 0x3d, 0x88, 0x43, 0xf5, 0x60, 0x0e, 0xd5, 0x73, 0x05, 0x39,
	0x54, 0x0a, 0x8b, 0xc1, 0x06, 0x8c, 0x4e, 0xd6, 0x17, 0x1e, 0xca, 0x31, 0xdc, 0x78, 0x28, 0xc7,
	0xf0, 0xe1, 0xa1, 0x1c, 0x63, 0xc3, 0x23, 0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c, 0x92,
	0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4, 0x18, 0x3e, 0x3c,
	0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2,
	0x58, 0xc1, 0x66, 0x24, 0xb1, 0x81, 0xad, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x1c, 0x37,
	0x23, 0xed, 0x36, 0x01, 0x00, 0x00,
}

func (this *Data) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Data)
	if !ok {
		that2, ok := that.(Data)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *LoadResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LoadResponse)
	if !ok {
		that2, ok := that.(LoadResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Data) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&store.Data{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LoadResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&store.LoadResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBasic(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BasicStoreClient is the client API for BasicStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BasicStoreClient interface {
	// TODO: rename when breaking client<->server compat
	// rpc WriteTarball(stream Data) returns (google.protobuf.Empty);
	LoadTarball(ctx context.Context, opts ...grpc.CallOption) (BasicStore_LoadTarballClient, error)
	ReadTarball(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BasicStore_ReadTarballClient, error)
}

type basicStoreClient struct {
	cc *grpc.ClientConn
}

func NewBasicStoreClient(cc *grpc.ClientConn) BasicStoreClient {
	return &basicStoreClient{cc}
}

func (c *basicStoreClient) LoadTarball(ctx context.Context, opts ...grpc.CallOption) (BasicStore_LoadTarballClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BasicStore_serviceDesc.Streams[0], "/dagger.store.BasicStore/LoadTarball", opts...)
	if err != nil {
		return nil, err
	}
	x := &basicStoreLoadTarballClient{stream}
	return x, nil
}

type BasicStore_LoadTarballClient interface {
	Send(*Data) error
	CloseAndRecv() (*LoadResponse, error)
	grpc.ClientStream
}

type basicStoreLoadTarballClient struct {
	grpc.ClientStream
}

func (x *basicStoreLoadTarballClient) Send(m *Data) error {
	return x.ClientStream.SendMsg(m)
}

func (x *basicStoreLoadTarballClient) CloseAndRecv() (*LoadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LoadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *basicStoreClient) ReadTarball(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (BasicStore_ReadTarballClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BasicStore_serviceDesc.Streams[1], "/dagger.store.BasicStore/ReadTarball", opts...)
	if err != nil {
		return nil, err
	}
	x := &basicStoreReadTarballClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BasicStore_ReadTarballClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type basicStoreReadTarballClient struct {
	grpc.ClientStream
}

func (x *basicStoreReadTarballClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BasicStoreServer is the server API for BasicStore service.
type BasicStoreServer interface {
	// TODO: rename when breaking client<->server compat
	// rpc WriteTarball(stream Data) returns (google.protobuf.Empty);
	LoadTarball(BasicStore_LoadTarballServer) error
	ReadTarball(*emptypb.Empty, BasicStore_ReadTarballServer) error
}

// UnimplementedBasicStoreServer can be embedded to have forward compatible implementations.
type UnimplementedBasicStoreServer struct {
}

func (*UnimplementedBasicStoreServer) LoadTarball(srv BasicStore_LoadTarballServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadTarball not implemented")
}
func (*UnimplementedBasicStoreServer) ReadTarball(req *emptypb.Empty, srv BasicStore_ReadTarballServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadTarball not implemented")
}

func RegisterBasicStoreServer(s *grpc.Server, srv BasicStoreServer) {
	s.RegisterService(&_BasicStore_serviceDesc, srv)
}

func _BasicStore_LoadTarball_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BasicStoreServer).LoadTarball(&basicStoreLoadTarballServer{stream})
}

type BasicStore_LoadTarballServer interface {
	SendAndClose(*LoadResponse) error
	Recv() (*Data, error)
	grpc.ServerStream
}

type basicStoreLoadTarballServer struct {
	grpc.ServerStream
}

func (x *basicStoreLoadTarballServer) SendAndClose(m *LoadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *basicStoreLoadTarballServer) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _BasicStore_ReadTarball_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BasicStoreServer).ReadTarball(m, &basicStoreReadTarballServer{stream})
}

type BasicStore_ReadTarballServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type basicStoreReadTarballServer struct {
	grpc.ServerStream
}

func (x *basicStoreReadTarballServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

var _BasicStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dagger.store.BasicStore",
	HandlerType: (*BasicStoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadTarball",
			Handler:       _BasicStore_LoadTarball_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReadTarball",
			Handler:       _BasicStore_ReadTarball_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "basic.proto",
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintBasic(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintBasic(dAtA []byte, offset int, v uint64) int {
	offset -= sovBasic(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBasic(uint64(l))
	}
	return n
}

func (m *LoadResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovBasic(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBasic(x uint64) (n int) {
	return sovBasic(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Data) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Data{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LoadResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LoadResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringBasic(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBasic
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBasic
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBasic
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBasic(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBasic
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBasic(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBasic
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBasic
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBasic
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBasic
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBasic
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBasic        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBasic          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBasic = fmt.Errorf("proto: unexpected end of group")
)
