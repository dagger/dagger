// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package alpine

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/dagger/cloak/sdk/go/dagger"
)

// BuildAlpine includes the requested fields of the GraphQL type Alpine.
type BuildAlpine struct {
	Build dagger.Filesystem `json:"build"`
}

// GetBuild returns BuildAlpine.Build, and is useful for accessing the field via an interface.
func (v *BuildAlpine) GetBuild() dagger.Filesystem { return v.Build }

// BuildResponse is returned by Build on success.
type BuildResponse struct {
	Alpine BuildAlpine `json:"alpine"`
}

// GetAlpine returns BuildResponse.Alpine, and is useful for accessing the field via an interface.
func (v *BuildResponse) GetAlpine() BuildAlpine { return v.Alpine }

// __BuildInput is used internally by genqlient
type __BuildInput struct {
	Pkgs []string `json:"pkgs"`
}

// GetPkgs returns __BuildInput.Pkgs, and is useful for accessing the field via an interface.
func (v *__BuildInput) GetPkgs() []string { return v.Pkgs }

func Build(
	ctx context.Context,
	pkgs []string,
) (*BuildResponse, error) {
	req := &graphql.Request{
		OpName: "Build",
		Query: `
query Build ($pkgs: [String!]) {
	alpine {
		build(pkgs: $pkgs) {
			id
		}
	}
}
`,
		Variables: &__BuildInput{
			Pkgs: pkgs,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data BuildResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
