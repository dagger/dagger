// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package core

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/dagger/cloak/sdk/go/dagger"
)

type CoreExecInput struct {
	Mounts  []CoreMount `json:"mounts"`
	Args    []string    `json:"args"`
	Workdir string      `json:"workdir"`
}

// GetMounts returns CoreExecInput.Mounts, and is useful for accessing the field via an interface.
func (v *CoreExecInput) GetMounts() []CoreMount { return v.Mounts }

// GetArgs returns CoreExecInput.Args, and is useful for accessing the field via an interface.
func (v *CoreExecInput) GetArgs() []string { return v.Args }

// GetWorkdir returns CoreExecInput.Workdir, and is useful for accessing the field via an interface.
func (v *CoreExecInput) GetWorkdir() string { return v.Workdir }

type CoreMount struct {
	Path string    `json:"path"`
	Fs   dagger.FS `json:"fs"`
}

// GetPath returns CoreMount.Path, and is useful for accessing the field via an interface.
func (v *CoreMount) GetPath() string { return v.Path }

// GetFs returns CoreMount.Fs, and is useful for accessing the field via an interface.
func (v *CoreMount) GetFs() dagger.FS { return v.Fs }

// ExecCore includes the requested fields of the GraphQL type Core.
type ExecCore struct {
	Exec ExecCoreExec `json:"exec"`
}

// GetExec returns ExecCore.Exec, and is useful for accessing the field via an interface.
func (v *ExecCore) GetExec() ExecCoreExec { return v.Exec }

// ExecCoreExec includes the requested fields of the GraphQL type CoreExec.
type ExecCoreExec struct {
	Root dagger.FS `json:"root"`
}

// GetRoot returns ExecCoreExec.Root, and is useful for accessing the field via an interface.
func (v *ExecCoreExec) GetRoot() dagger.FS { return v.Root }

// ExecResponse is returned by Exec on success.
type ExecResponse struct {
	Core ExecCore `json:"core"`
}

// GetCore returns ExecResponse.Core, and is useful for accessing the field via an interface.
func (v *ExecResponse) GetCore() ExecCore { return v.Core }

// ImageCore includes the requested fields of the GraphQL type Core.
type ImageCore struct {
	Image ImageCoreImage `json:"image"`
}

// GetImage returns ImageCore.Image, and is useful for accessing the field via an interface.
func (v *ImageCore) GetImage() ImageCoreImage { return v.Image }

// ImageCoreImage includes the requested fields of the GraphQL type CoreImage.
type ImageCoreImage struct {
	Fs dagger.FS `json:"fs"`
}

// GetFs returns ImageCoreImage.Fs, and is useful for accessing the field via an interface.
func (v *ImageCoreImage) GetFs() dagger.FS { return v.Fs }

// ImageResponse is returned by Image on success.
type ImageResponse struct {
	Core ImageCore `json:"core"`
}

// GetCore returns ImageResponse.Core, and is useful for accessing the field via an interface.
func (v *ImageResponse) GetCore() ImageCore { return v.Core }

// __ExecInput is used internally by genqlient
type __ExecInput struct {
	Input CoreExecInput `json:"input"`
}

// GetInput returns __ExecInput.Input, and is useful for accessing the field via an interface.
func (v *__ExecInput) GetInput() CoreExecInput { return v.Input }

// __ImageInput is used internally by genqlient
type __ImageInput struct {
	Ref string `json:"ref"`
}

// GetRef returns __ImageInput.Ref, and is useful for accessing the field via an interface.
func (v *__ImageInput) GetRef() string { return v.Ref }

func Exec(
	ctx context.Context,
	input CoreExecInput,
) (*ExecResponse, error) {
	req := &graphql.Request{
		OpName: "Exec",
		Query: `
query Exec ($input: CoreExecInput!) {
	core {
		exec(input: $input) {
			root
		}
	}
}
`,
		Variables: &__ExecInput{
			Input: input,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ExecResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Image(
	ctx context.Context,
	ref string,
) (*ImageResponse, error) {
	req := &graphql.Request{
		OpName: "Image",
		Query: `
query Image ($ref: String!) {
	core {
		image(ref: $ref) {
			fs
		}
	}
}
`,
		Variables: &__ImageInput{
			Ref: ref,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ImageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
