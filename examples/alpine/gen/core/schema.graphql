
scalar FS

type CoreImage {
	fs: FS!
}

input CoreMount {
	path: String!
	fs: FS!
}
input CoreExecInput {
	mounts: [CoreMount!]!
	args: [String!]!
	workdir: String
}
type CoreExec {
	root: FS!
	getMount(path: String!): FS!
}

type Core {
	image(ref: String!): CoreImage
	exec(input: CoreExecInput!): CoreExec
	dockerfile(context: FS!, dockerfileName: String): FS!
	copy(src: FS!, srcPath: String, dst: FS, dstPath: String): FS!
}

type Query {
	core: Core!
	source: Source!
}

type Package {
	name: String!
	fs: FS
	schema: String!
	operations: String!
}

type Mutation {
	import(name: String!, fs: FS): Package
	readfile(fs: FS!, path: String!): String
	clientdir(id: String!): FS
	readsecret(id: String!): String
}

type Exec {
	fs: Filesystem!
	stdout: String
	stderr: String
	exitCode: Int
}

type Source {
	image(ref: String!): Filesystem!
	git(remote: String!, ref: String): Filesystem!
}

type Filesystem {
	id: ID!
	exec(args: [String!]): Exec!
	dockerbuild(dockerfile: String): Filesystem!
	file(path: String!): String
}
