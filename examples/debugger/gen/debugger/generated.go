// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package debugger

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/dagger/cloak/sdk/go/dagger"
)

// DebugCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type DebugCore struct {
	// Fetch an OCI image
	Image dagger.Filesystem `json:"image"`
}

// GetImage returns DebugCore.Image, and is useful for accessing the field via an interface.
func (v *DebugCore) GetImage() dagger.Filesystem { return v.Image }

// DebugResponse is returned by Debug on success.
type DebugResponse struct {
	// Core API
	Core DebugCore `json:"core"`
}

// GetCore returns DebugResponse.Core, and is useful for accessing the field via an interface.
func (v *DebugResponse) GetCore() DebugCore { return v.Core }

// __DebugInput is used internally by genqlient
type __DebugInput struct {
	Fs dagger.FSID `json:"fs"`
}

// GetFs returns __DebugInput.Fs, and is useful for accessing the field via an interface.
func (v *__DebugInput) GetFs() dagger.FSID { return v.Fs }

func Debug(
	ctx context.Context,
	fs dagger.FSID,
) (*DebugResponse, error) {
	req := &graphql.Request{
		OpName: "Debug",
		Query: `
query Debug ($fs: FSID!) {
	core {
		image(ref: "alpine") {
			start(input: {args:["sh"],mounts:[{path:"/mnt",fs:$fs}],workdir:"/mnt"}) {
				id
			}
		}
	}
}
`,
		Variables: &__DebugInput{
			Fs: fs,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data DebugResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
