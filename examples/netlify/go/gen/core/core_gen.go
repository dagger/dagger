// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package core

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/dagger/cloak/sdk/go/dagger"
)

type CoreExecInput struct {
	Mounts  []CoreMount `json:"mounts"`
	Args    []string    `json:"args"`
	Workdir string      `json:"workdir"`
}

// GetMounts returns CoreExecInput.Mounts, and is useful for accessing the field via an interface.
func (v *CoreExecInput) GetMounts() []CoreMount { return v.Mounts }

// GetArgs returns CoreExecInput.Args, and is useful for accessing the field via an interface.
func (v *CoreExecInput) GetArgs() []string { return v.Args }

// GetWorkdir returns CoreExecInput.Workdir, and is useful for accessing the field via an interface.
func (v *CoreExecInput) GetWorkdir() string { return v.Workdir }

type CoreMount struct {
	Path string    `json:"path"`
	Fs   dagger.FS `json:"fs"`
}

// GetPath returns CoreMount.Path, and is useful for accessing the field via an interface.
func (v *CoreMount) GetPath() string { return v.Path }

// GetFs returns CoreMount.Fs, and is useful for accessing the field via an interface.
func (v *CoreMount) GetFs() dagger.FS { return v.Fs }

// DockerfileCore includes the requested fields of the GraphQL type Core.
type DockerfileCore struct {
	Dockerfile dagger.FS `json:"dockerfile"`
}

// GetDockerfile returns DockerfileCore.Dockerfile, and is useful for accessing the field via an interface.
func (v *DockerfileCore) GetDockerfile() dagger.FS { return v.Dockerfile }

// DockerfileResponse is returned by Dockerfile on success.
type DockerfileResponse struct {
	Core DockerfileCore `json:"core"`
}

// GetCore returns DockerfileResponse.Core, and is useful for accessing the field via an interface.
func (v *DockerfileResponse) GetCore() DockerfileCore { return v.Core }

// ExecCore includes the requested fields of the GraphQL type Core.
type ExecCore struct {
	Exec ExecCoreExec `json:"exec"`
}

// GetExec returns ExecCore.Exec, and is useful for accessing the field via an interface.
func (v *ExecCore) GetExec() ExecCoreExec { return v.Exec }

// ExecCoreExec includes the requested fields of the GraphQL type CoreExec.
type ExecCoreExec struct {
	Root dagger.FS `json:"root"`
}

// GetRoot returns ExecCoreExec.Root, and is useful for accessing the field via an interface.
func (v *ExecCoreExec) GetRoot() dagger.FS { return v.Root }

// ExecGetMountCore includes the requested fields of the GraphQL type Core.
type ExecGetMountCore struct {
	Exec ExecGetMountCoreExec `json:"exec"`
}

// GetExec returns ExecGetMountCore.Exec, and is useful for accessing the field via an interface.
func (v *ExecGetMountCore) GetExec() ExecGetMountCoreExec { return v.Exec }

// ExecGetMountCoreExec includes the requested fields of the GraphQL type CoreExec.
type ExecGetMountCoreExec struct {
	GetMount dagger.FS `json:"getMount"`
}

// GetGetMount returns ExecGetMountCoreExec.GetMount, and is useful for accessing the field via an interface.
func (v *ExecGetMountCoreExec) GetGetMount() dagger.FS { return v.GetMount }

// ExecGetMountResponse is returned by ExecGetMount on success.
type ExecGetMountResponse struct {
	Core ExecGetMountCore `json:"core"`
}

// GetCore returns ExecGetMountResponse.Core, and is useful for accessing the field via an interface.
func (v *ExecGetMountResponse) GetCore() ExecGetMountCore { return v.Core }

// ExecResponse is returned by Exec on success.
type ExecResponse struct {
	Core ExecCore `json:"core"`
}

// GetCore returns ExecResponse.Core, and is useful for accessing the field via an interface.
func (v *ExecResponse) GetCore() ExecCore { return v.Core }

// ImageCore includes the requested fields of the GraphQL type Core.
type ImageCore struct {
	Image ImageCoreImage `json:"image"`
}

// GetImage returns ImageCore.Image, and is useful for accessing the field via an interface.
func (v *ImageCore) GetImage() ImageCoreImage { return v.Image }

// ImageCoreImage includes the requested fields of the GraphQL type CoreImage.
type ImageCoreImage struct {
	Fs dagger.FS `json:"fs"`
}

// GetFs returns ImageCoreImage.Fs, and is useful for accessing the field via an interface.
func (v *ImageCoreImage) GetFs() dagger.FS { return v.Fs }

// ImageResponse is returned by Image on success.
type ImageResponse struct {
	Core ImageCore `json:"core"`
}

// GetCore returns ImageResponse.Core, and is useful for accessing the field via an interface.
func (v *ImageResponse) GetCore() ImageCore { return v.Core }

// ImportImportPackage includes the requested fields of the GraphQL type Package.
type ImportImportPackage struct {
	Name       string `json:"name"`
	Schema     string `json:"schema"`
	Operations string `json:"operations"`
}

// GetName returns ImportImportPackage.Name, and is useful for accessing the field via an interface.
func (v *ImportImportPackage) GetName() string { return v.Name }

// GetSchema returns ImportImportPackage.Schema, and is useful for accessing the field via an interface.
func (v *ImportImportPackage) GetSchema() string { return v.Schema }

// GetOperations returns ImportImportPackage.Operations, and is useful for accessing the field via an interface.
func (v *ImportImportPackage) GetOperations() string { return v.Operations }

// ImportResponse is returned by Import on success.
type ImportResponse struct {
	Import ImportImportPackage `json:"import"`
}

// GetImport returns ImportResponse.Import, and is useful for accessing the field via an interface.
func (v *ImportResponse) GetImport() ImportImportPackage { return v.Import }

// ReadSecretResponse is returned by ReadSecret on success.
type ReadSecretResponse struct {
	Readsecret string `json:"readsecret"`
}

// GetReadsecret returns ReadSecretResponse.Readsecret, and is useful for accessing the field via an interface.
func (v *ReadSecretResponse) GetReadsecret() string { return v.Readsecret }

// __DockerfileInput is used internally by genqlient
type __DockerfileInput struct {
	Context        dagger.FS `json:"context"`
	DockerfileName string    `json:"dockerfileName"`
}

// GetContext returns __DockerfileInput.Context, and is useful for accessing the field via an interface.
func (v *__DockerfileInput) GetContext() dagger.FS { return v.Context }

// GetDockerfileName returns __DockerfileInput.DockerfileName, and is useful for accessing the field via an interface.
func (v *__DockerfileInput) GetDockerfileName() string { return v.DockerfileName }

// __ExecGetMountInput is used internally by genqlient
type __ExecGetMountInput struct {
	Input     CoreExecInput `json:"input"`
	MountPath string        `json:"mountPath"`
}

// GetInput returns __ExecGetMountInput.Input, and is useful for accessing the field via an interface.
func (v *__ExecGetMountInput) GetInput() CoreExecInput { return v.Input }

// GetMountPath returns __ExecGetMountInput.MountPath, and is useful for accessing the field via an interface.
func (v *__ExecGetMountInput) GetMountPath() string { return v.MountPath }

// __ExecInput is used internally by genqlient
type __ExecInput struct {
	Input CoreExecInput `json:"input"`
}

// GetInput returns __ExecInput.Input, and is useful for accessing the field via an interface.
func (v *__ExecInput) GetInput() CoreExecInput { return v.Input }

// __ImageInput is used internally by genqlient
type __ImageInput struct {
	Ref string `json:"ref"`
}

// GetRef returns __ImageInput.Ref, and is useful for accessing the field via an interface.
func (v *__ImageInput) GetRef() string { return v.Ref }

// __ImportInput is used internally by genqlient
type __ImportInput struct {
	Name string    `json:"name"`
	Fs   dagger.FS `json:"fs"`
}

// GetName returns __ImportInput.Name, and is useful for accessing the field via an interface.
func (v *__ImportInput) GetName() string { return v.Name }

// GetFs returns __ImportInput.Fs, and is useful for accessing the field via an interface.
func (v *__ImportInput) GetFs() dagger.FS { return v.Fs }

// __ReadSecretInput is used internally by genqlient
type __ReadSecretInput struct {
	Id string `json:"id"`
}

// GetId returns __ReadSecretInput.Id, and is useful for accessing the field via an interface.
func (v *__ReadSecretInput) GetId() string { return v.Id }

func Dockerfile(
	ctx context.Context,
	context dagger.FS,
	dockerfileName string,
) (*DockerfileResponse, error) {
	req := &graphql.Request{
		OpName: "Dockerfile",
		Query: `
query Dockerfile ($context: FS!, $dockerfileName: String!) {
	core {
		dockerfile(context: $context, dockerfileName: $dockerfileName)
	}
}
`,
		Variables: &__DockerfileInput{
			Context:        context,
			DockerfileName: dockerfileName,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data DockerfileResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Exec(
	ctx context.Context,
	input CoreExecInput,
) (*ExecResponse, error) {
	req := &graphql.Request{
		OpName: "Exec",
		Query: `
query Exec ($input: CoreExecInput!) {
	core {
		exec(input: $input) {
			root
		}
	}
}
`,
		Variables: &__ExecInput{
			Input: input,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ExecResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ExecGetMount(
	ctx context.Context,
	input CoreExecInput,
	mountPath string,
) (*ExecGetMountResponse, error) {
	req := &graphql.Request{
		OpName: "ExecGetMount",
		Query: `
query ExecGetMount ($input: CoreExecInput!, $mountPath: String!) {
	core {
		exec(input: $input) {
			getMount(path: $mountPath)
		}
	}
}
`,
		Variables: &__ExecGetMountInput{
			Input:     input,
			MountPath: mountPath,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ExecGetMountResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Image(
	ctx context.Context,
	ref string,
) (*ImageResponse, error) {
	req := &graphql.Request{
		OpName: "Image",
		Query: `
query Image ($ref: String!) {
	core {
		image(ref: $ref) {
			fs
		}
	}
}
`,
		Variables: &__ImageInput{
			Ref: ref,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ImageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Import(
	ctx context.Context,
	name string,
	fs dagger.FS,
) (*ImportResponse, error) {
	req := &graphql.Request{
		OpName: "Import",
		Query: `
mutation Import ($name: String!, $fs: FS!) {
	import(name: $name, fs: $fs) {
		name
		schema
		operations
	}
}
`,
		Variables: &__ImportInput{
			Name: name,
			Fs:   fs,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ImportResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadSecret(
	ctx context.Context,
	id string,
) (*ReadSecretResponse, error) {
	req := &graphql.Request{
		OpName: "ReadSecret",
		Query: `
mutation ReadSecret ($id: String!) {
	readsecret(id: $id)
}
`,
		Variables: &__ReadSecretInput{
			Id: id,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ReadSecretResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
