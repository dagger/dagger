// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package core

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/dagger/cloak/sdk/go/dagger"
)

// AddSecretCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type AddSecretCore struct {
	// Add a secret
	AddSecret dagger.SecretID `json:"addSecret"`
}

// GetAddSecret returns AddSecretCore.AddSecret, and is useful for accessing the field via an interface.
func (v *AddSecretCore) GetAddSecret() dagger.SecretID { return v.AddSecret }

// AddSecretResponse is returned by AddSecret on success.
type AddSecretResponse struct {
	// Core API
	Core AddSecretCore `json:"core"`
}

// GetCore returns AddSecretResponse.Core, and is useful for accessing the field via an interface.
func (v *AddSecretResponse) GetCore() AddSecretCore { return v.Core }

type CacheMountInput struct {
	// Cache mount name
	Name string `json:"name"`
	// Cache mount sharing mode (TODO: switch to enum)
	SharingMode string `json:"sharingMode"`
	// path at which the cache will be mounted
	Path string `json:"path"`
}

// GetName returns CacheMountInput.Name, and is useful for accessing the field via an interface.
func (v *CacheMountInput) GetName() string { return v.Name }

// GetSharingMode returns CacheMountInput.SharingMode, and is useful for accessing the field via an interface.
func (v *CacheMountInput) GetSharingMode() string { return v.SharingMode }

// GetPath returns CacheMountInput.Path, and is useful for accessing the field via an interface.
func (v *CacheMountInput) GetPath() string { return v.Path }

// DockerfileCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type DockerfileCore struct {
	// Look up a filesystem by its ID
	Filesystem dagger.Filesystem `json:"filesystem"`
}

// GetFilesystem returns DockerfileCore.Filesystem, and is useful for accessing the field via an interface.
func (v *DockerfileCore) GetFilesystem() dagger.Filesystem { return v.Filesystem }

// DockerfileResponse is returned by Dockerfile on success.
type DockerfileResponse struct {
	// Core API
	Core DockerfileCore `json:"core"`
}

// GetCore returns DockerfileResponse.Core, and is useful for accessing the field via an interface.
func (v *DockerfileResponse) GetCore() DockerfileCore { return v.Core }

// ExecCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type ExecCore struct {
	// Look up a filesystem by its ID
	Filesystem dagger.Filesystem `json:"filesystem"`
}

// GetFilesystem returns ExecCore.Filesystem, and is useful for accessing the field via an interface.
func (v *ExecCore) GetFilesystem() dagger.Filesystem { return v.Filesystem }

type ExecEnvInput struct {
	// Env var name
	Name string `json:"name"`
	// Env var value
	Value string `json:"value"`
}

// GetName returns ExecEnvInput.Name, and is useful for accessing the field via an interface.
func (v *ExecEnvInput) GetName() string { return v.Name }

// GetValue returns ExecEnvInput.Value, and is useful for accessing the field via an interface.
func (v *ExecEnvInput) GetValue() string { return v.Value }

// ExecGetMountCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type ExecGetMountCore struct {
	// Look up a filesystem by its ID
	Filesystem dagger.Filesystem `json:"filesystem"`
}

// GetFilesystem returns ExecGetMountCore.Filesystem, and is useful for accessing the field via an interface.
func (v *ExecGetMountCore) GetFilesystem() dagger.Filesystem { return v.Filesystem }

// ExecGetMountResponse is returned by ExecGetMount on success.
type ExecGetMountResponse struct {
	// Core API
	Core ExecGetMountCore `json:"core"`
}

// GetCore returns ExecGetMountResponse.Core, and is useful for accessing the field via an interface.
func (v *ExecGetMountResponse) GetCore() ExecGetMountCore { return v.Core }

type ExecInput struct {
	// Command to execute
	// Example: ["echo", "hello, world!"]
	Args []string `json:"args"`
	// Filesystem mounts
	Mounts []MountInput `json:"mounts"`
	// Cached mounts
	CacheMounts []CacheMountInput `json:"cacheMounts"`
	// Working directory
	Workdir string `json:"workdir"`
	// Env vars
	Env []ExecEnvInput `json:"env"`
	// Secret env vars
	SecretEnv []ExecSecretEnvInput `json:"secretEnv"`
}

// GetArgs returns ExecInput.Args, and is useful for accessing the field via an interface.
func (v *ExecInput) GetArgs() []string { return v.Args }

// GetMounts returns ExecInput.Mounts, and is useful for accessing the field via an interface.
func (v *ExecInput) GetMounts() []MountInput { return v.Mounts }

// GetCacheMounts returns ExecInput.CacheMounts, and is useful for accessing the field via an interface.
func (v *ExecInput) GetCacheMounts() []CacheMountInput { return v.CacheMounts }

// GetWorkdir returns ExecInput.Workdir, and is useful for accessing the field via an interface.
func (v *ExecInput) GetWorkdir() string { return v.Workdir }

// GetEnv returns ExecInput.Env, and is useful for accessing the field via an interface.
func (v *ExecInput) GetEnv() []ExecEnvInput { return v.Env }

// GetSecretEnv returns ExecInput.SecretEnv, and is useful for accessing the field via an interface.
func (v *ExecInput) GetSecretEnv() []ExecSecretEnvInput { return v.SecretEnv }

// ExecResponse is returned by Exec on success.
type ExecResponse struct {
	// Core API
	Core ExecCore `json:"core"`
}

// GetCore returns ExecResponse.Core, and is useful for accessing the field via an interface.
func (v *ExecResponse) GetCore() ExecCore { return v.Core }

type ExecSecretEnvInput struct {
	// Env var name
	Name string `json:"name"`
	// Secret env var value
	Id dagger.SecretID `json:"id"`
}

// GetName returns ExecSecretEnvInput.Name, and is useful for accessing the field via an interface.
func (v *ExecSecretEnvInput) GetName() string { return v.Name }

// GetId returns ExecSecretEnvInput.Id, and is useful for accessing the field via an interface.
func (v *ExecSecretEnvInput) GetId() dagger.SecretID { return v.Id }

// ImageCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type ImageCore struct {
	// Fetch an OCI image
	Image dagger.Filesystem `json:"image"`
}

// GetImage returns ImageCore.Image, and is useful for accessing the field via an interface.
func (v *ImageCore) GetImage() dagger.Filesystem { return v.Image }

// ImageResponse is returned by Image on success.
type ImageResponse struct {
	// Core API
	Core ImageCore `json:"core"`
}

// GetCore returns ImageResponse.Core, and is useful for accessing the field via an interface.
func (v *ImageResponse) GetCore() ImageCore { return v.Core }

type MountInput struct {
	// filesystem to mount
	Fs dagger.FSID `json:"fs"`
	// path at which the filesystem will be mounted
	Path string `json:"path"`
}

// GetFs returns MountInput.Fs, and is useful for accessing the field via an interface.
func (v *MountInput) GetFs() dagger.FSID { return v.Fs }

// GetPath returns MountInput.Path, and is useful for accessing the field via an interface.
func (v *MountInput) GetPath() string { return v.Path }

// SecretCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type SecretCore struct {
	// Look up a secret by ID
	Secret string `json:"secret"`
}

// GetSecret returns SecretCore.Secret, and is useful for accessing the field via an interface.
func (v *SecretCore) GetSecret() string { return v.Secret }

// SecretResponse is returned by Secret on success.
type SecretResponse struct {
	// Core API
	Core SecretCore `json:"core"`
}

// GetCore returns SecretResponse.Core, and is useful for accessing the field via an interface.
func (v *SecretResponse) GetCore() SecretCore { return v.Core }

// WorkdirHost includes the requested fields of the GraphQL type Host.
// The GraphQL type's documentation follows.
//
// TODO move these to their own file
type WorkdirHost struct {
	Workdir WorkdirHostWorkdirLocalDir `json:"workdir"`
}

// GetWorkdir returns WorkdirHost.Workdir, and is useful for accessing the field via an interface.
func (v *WorkdirHost) GetWorkdir() WorkdirHostWorkdirLocalDir { return v.Workdir }

// WorkdirHostWorkdirLocalDir includes the requested fields of the GraphQL type LocalDir.
// The GraphQL type's documentation follows.
//
// TODO move these to their own file
type WorkdirHostWorkdirLocalDir struct {
	Read dagger.Filesystem `json:"read"`
}

// GetRead returns WorkdirHostWorkdirLocalDir.Read, and is useful for accessing the field via an interface.
func (v *WorkdirHostWorkdirLocalDir) GetRead() dagger.Filesystem { return v.Read }

// WorkdirResponse is returned by Workdir on success.
type WorkdirResponse struct {
	// TODO doc
	Host WorkdirHost `json:"host"`
}

// GetHost returns WorkdirResponse.Host, and is useful for accessing the field via an interface.
func (v *WorkdirResponse) GetHost() WorkdirHost { return v.Host }

// WriteWorkdirHost includes the requested fields of the GraphQL type Host.
// The GraphQL type's documentation follows.
//
// TODO move these to their own file
type WriteWorkdirHost struct {
	Workdir WriteWorkdirHostWorkdirLocalDir `json:"workdir"`
}

// GetWorkdir returns WriteWorkdirHost.Workdir, and is useful for accessing the field via an interface.
func (v *WriteWorkdirHost) GetWorkdir() WriteWorkdirHostWorkdirLocalDir { return v.Workdir }

// WriteWorkdirHostWorkdirLocalDir includes the requested fields of the GraphQL type LocalDir.
// The GraphQL type's documentation follows.
//
// TODO move these to their own file
type WriteWorkdirHostWorkdirLocalDir struct {
	Write bool `json:"write"`
}

// GetWrite returns WriteWorkdirHostWorkdirLocalDir.Write, and is useful for accessing the field via an interface.
func (v *WriteWorkdirHostWorkdirLocalDir) GetWrite() bool { return v.Write }

// WriteWorkdirResponse is returned by WriteWorkdir on success.
type WriteWorkdirResponse struct {
	// TODO doc
	Host WriteWorkdirHost `json:"host"`
}

// GetHost returns WriteWorkdirResponse.Host, and is useful for accessing the field via an interface.
func (v *WriteWorkdirResponse) GetHost() WriteWorkdirHost { return v.Host }

// __AddSecretInput is used internally by genqlient
type __AddSecretInput struct {
	Plaintext string `json:"plaintext"`
}

// GetPlaintext returns __AddSecretInput.Plaintext, and is useful for accessing the field via an interface.
func (v *__AddSecretInput) GetPlaintext() string { return v.Plaintext }

// __DockerfileInput is used internally by genqlient
type __DockerfileInput struct {
	Context        dagger.FSID `json:"context"`
	DockerfileName string      `json:"dockerfileName"`
}

// GetContext returns __DockerfileInput.Context, and is useful for accessing the field via an interface.
func (v *__DockerfileInput) GetContext() dagger.FSID { return v.Context }

// GetDockerfileName returns __DockerfileInput.DockerfileName, and is useful for accessing the field via an interface.
func (v *__DockerfileInput) GetDockerfileName() string { return v.DockerfileName }

// __ExecGetMountInput is used internally by genqlient
type __ExecGetMountInput struct {
	Fsid    dagger.FSID `json:"fsid"`
	Input   ExecInput   `json:"input"`
	GetPath string      `json:"getPath"`
}

// GetFsid returns __ExecGetMountInput.Fsid, and is useful for accessing the field via an interface.
func (v *__ExecGetMountInput) GetFsid() dagger.FSID { return v.Fsid }

// GetInput returns __ExecGetMountInput.Input, and is useful for accessing the field via an interface.
func (v *__ExecGetMountInput) GetInput() ExecInput { return v.Input }

// GetGetPath returns __ExecGetMountInput.GetPath, and is useful for accessing the field via an interface.
func (v *__ExecGetMountInput) GetGetPath() string { return v.GetPath }

// __ExecInput is used internally by genqlient
type __ExecInput struct {
	Fsid  dagger.FSID `json:"fsid"`
	Input ExecInput   `json:"input"`
}

// GetFsid returns __ExecInput.Fsid, and is useful for accessing the field via an interface.
func (v *__ExecInput) GetFsid() dagger.FSID { return v.Fsid }

// GetInput returns __ExecInput.Input, and is useful for accessing the field via an interface.
func (v *__ExecInput) GetInput() ExecInput { return v.Input }

// __ImageInput is used internally by genqlient
type __ImageInput struct {
	Ref string `json:"ref"`
}

// GetRef returns __ImageInput.Ref, and is useful for accessing the field via an interface.
func (v *__ImageInput) GetRef() string { return v.Ref }

// __SecretInput is used internally by genqlient
type __SecretInput struct {
	Id dagger.SecretID `json:"id"`
}

// GetId returns __SecretInput.Id, and is useful for accessing the field via an interface.
func (v *__SecretInput) GetId() dagger.SecretID { return v.Id }

// __WriteWorkdirInput is used internally by genqlient
type __WriteWorkdirInput struct {
	Contents dagger.FSID `json:"contents"`
}

// GetContents returns __WriteWorkdirInput.Contents, and is useful for accessing the field via an interface.
func (v *__WriteWorkdirInput) GetContents() dagger.FSID { return v.Contents }

func AddSecret(
	ctx context.Context,
	plaintext string,
) (*AddSecretResponse, error) {
	req := &graphql.Request{
		OpName: "AddSecret",
		Query: `
query AddSecret ($plaintext: String!) {
	core {
		addSecret(plaintext: $plaintext)
	}
}
`,
		Variables: &__AddSecretInput{
			Plaintext: plaintext,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data AddSecretResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Dockerfile(
	ctx context.Context,
	context dagger.FSID,
	dockerfileName string,
) (*DockerfileResponse, error) {
	req := &graphql.Request{
		OpName: "Dockerfile",
		Query: `
query Dockerfile ($context: FSID!, $dockerfileName: String!) {
	core {
		filesystem(id: $context) {
			dockerbuild(dockerfile: $dockerfileName) {
				id
			}
		}
	}
}
`,
		Variables: &__DockerfileInput{
			Context:        context,
			DockerfileName: dockerfileName,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data DockerfileResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Exec(
	ctx context.Context,
	fsid dagger.FSID,
	input ExecInput,
) (*ExecResponse, error) {
	req := &graphql.Request{
		OpName: "Exec",
		Query: `
query Exec ($fsid: FSID!, $input: ExecInput!) {
	core {
		filesystem(id: $fsid) {
			exec(input: $input) {
				fs {
					id
				}
			}
		}
	}
}
`,
		Variables: &__ExecInput{
			Fsid:  fsid,
			Input: input,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ExecResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ExecGetMount(
	ctx context.Context,
	fsid dagger.FSID,
	input ExecInput,
	getPath string,
) (*ExecGetMountResponse, error) {
	req := &graphql.Request{
		OpName: "ExecGetMount",
		Query: `
query ExecGetMount ($fsid: FSID!, $input: ExecInput!, $getPath: String!) {
	core {
		filesystem(id: $fsid) {
			exec(input: $input) {
				mount(path: $getPath) {
					id
				}
			}
		}
	}
}
`,
		Variables: &__ExecGetMountInput{
			Fsid:    fsid,
			Input:   input,
			GetPath: getPath,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ExecGetMountResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Image(
	ctx context.Context,
	ref string,
) (*ImageResponse, error) {
	req := &graphql.Request{
		OpName: "Image",
		Query: `
query Image ($ref: String!) {
	core {
		image(ref: $ref) {
			id
		}
	}
}
`,
		Variables: &__ImageInput{
			Ref: ref,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ImageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Secret(
	ctx context.Context,
	id dagger.SecretID,
) (*SecretResponse, error) {
	req := &graphql.Request{
		OpName: "Secret",
		Query: `
query Secret ($id: SecretID!) {
	core {
		secret(id: $id)
	}
}
`,
		Variables: &__SecretInput{
			Id: id,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data SecretResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Workdir(
	ctx context.Context,
) (*WorkdirResponse, error) {
	req := &graphql.Request{
		OpName: "Workdir",
		Query: `
query Workdir {
	host {
		workdir {
			read {
				id
			}
		}
	}
}
`,
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data WorkdirResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func WriteWorkdir(
	ctx context.Context,
	contents dagger.FSID,
) (*WriteWorkdirResponse, error) {
	req := &graphql.Request{
		OpName: "WriteWorkdir",
		Query: `
query WriteWorkdir ($contents: FSID!) {
	host {
		workdir {
			write(contents: $contents)
		}
	}
}
`,
		Variables: &__WriteWorkdirInput{
			Contents: contents,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data WriteWorkdirResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
