// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package core

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/dagger/cloak/sdk/go/dagger"
)

// DockerfileCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type DockerfileCore struct {
	// Look up a filesystem by its ID
	Filesystem dagger.Filesystem `json:"filesystem"`
}

// GetFilesystem returns DockerfileCore.Filesystem, and is useful for accessing the field via an interface.
func (v *DockerfileCore) GetFilesystem() dagger.Filesystem { return v.Filesystem }

// DockerfileResponse is returned by Dockerfile on success.
type DockerfileResponse struct {
	// Core API
	Core DockerfileCore `json:"core"`
}

// GetCore returns DockerfileResponse.Core, and is useful for accessing the field via an interface.
func (v *DockerfileResponse) GetCore() DockerfileCore { return v.Core }

// ExecCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type ExecCore struct {
	// Look up a filesystem by its ID
	Filesystem dagger.Filesystem `json:"filesystem"`
}

// GetFilesystem returns ExecCore.Filesystem, and is useful for accessing the field via an interface.
func (v *ExecCore) GetFilesystem() dagger.Filesystem { return v.Filesystem }

// ExecGetMountCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type ExecGetMountCore struct {
	// Look up a filesystem by its ID
	Filesystem dagger.Filesystem `json:"filesystem"`
}

// GetFilesystem returns ExecGetMountCore.Filesystem, and is useful for accessing the field via an interface.
func (v *ExecGetMountCore) GetFilesystem() dagger.Filesystem { return v.Filesystem }

// ExecGetMountResponse is returned by ExecGetMount on success.
type ExecGetMountResponse struct {
	// Core API
	Core ExecGetMountCore `json:"core"`
}

// GetCore returns ExecGetMountResponse.Core, and is useful for accessing the field via an interface.
func (v *ExecGetMountResponse) GetCore() ExecGetMountCore { return v.Core }

type ExecInput struct {
	// Command to execute
	// Example: ["echo", "hello, world!"]
	Args []string `json:"args"`
	// Transient filesystem mounts
	Mounts []MountInput `json:"mounts"`
	// Working directory
	Workdir string `json:"workdir"`
}

// GetArgs returns ExecInput.Args, and is useful for accessing the field via an interface.
func (v *ExecInput) GetArgs() []string { return v.Args }

// GetMounts returns ExecInput.Mounts, and is useful for accessing the field via an interface.
func (v *ExecInput) GetMounts() []MountInput { return v.Mounts }

// GetWorkdir returns ExecInput.Workdir, and is useful for accessing the field via an interface.
func (v *ExecInput) GetWorkdir() string { return v.Workdir }

// ExecResponse is returned by Exec on success.
type ExecResponse struct {
	// Core API
	Core ExecCore `json:"core"`
}

// GetCore returns ExecResponse.Core, and is useful for accessing the field via an interface.
func (v *ExecResponse) GetCore() ExecCore { return v.Core }

// ImageCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type ImageCore struct {
	// Fetch an OCI image
	Image dagger.Filesystem `json:"image"`
}

// GetImage returns ImageCore.Image, and is useful for accessing the field via an interface.
func (v *ImageCore) GetImage() dagger.Filesystem { return v.Image }

// ImageResponse is returned by Image on success.
type ImageResponse struct {
	// Core API
	Core ImageCore `json:"core"`
}

// GetCore returns ImageResponse.Core, and is useful for accessing the field via an interface.
func (v *ImageResponse) GetCore() ImageCore { return v.Core }

type MountInput struct {
	// filesystem to mount
	Fs dagger.FSID `json:"fs"`
	// path at which the filesystem will be mounted
	Path string `json:"path"`
}

// GetFs returns MountInput.Fs, and is useful for accessing the field via an interface.
func (v *MountInput) GetFs() dagger.FSID { return v.Fs }

// GetPath returns MountInput.Path, and is useful for accessing the field via an interface.
func (v *MountInput) GetPath() string { return v.Path }

// SecretCore includes the requested fields of the GraphQL type Core.
// The GraphQL type's documentation follows.
//
// Core API
type SecretCore struct {
	// Look up a secret by ID
	Secret string `json:"secret"`
}

// GetSecret returns SecretCore.Secret, and is useful for accessing the field via an interface.
func (v *SecretCore) GetSecret() string { return v.Secret }

// SecretResponse is returned by Secret on success.
type SecretResponse struct {
	// Core API
	Core SecretCore `json:"core"`
}

// GetCore returns SecretResponse.Core, and is useful for accessing the field via an interface.
func (v *SecretResponse) GetCore() SecretCore { return v.Core }

// __DockerfileInput is used internally by genqlient
type __DockerfileInput struct {
	Context        dagger.FSID `json:"context"`
	DockerfileName string      `json:"dockerfileName"`
}

// GetContext returns __DockerfileInput.Context, and is useful for accessing the field via an interface.
func (v *__DockerfileInput) GetContext() dagger.FSID { return v.Context }

// GetDockerfileName returns __DockerfileInput.DockerfileName, and is useful for accessing the field via an interface.
func (v *__DockerfileInput) GetDockerfileName() string { return v.DockerfileName }

// __ExecGetMountInput is used internally by genqlient
type __ExecGetMountInput struct {
	Fsid    dagger.FSID `json:"fsid"`
	Input   ExecInput   `json:"input"`
	GetPath string      `json:"getPath"`
}

// GetFsid returns __ExecGetMountInput.Fsid, and is useful for accessing the field via an interface.
func (v *__ExecGetMountInput) GetFsid() dagger.FSID { return v.Fsid }

// GetInput returns __ExecGetMountInput.Input, and is useful for accessing the field via an interface.
func (v *__ExecGetMountInput) GetInput() ExecInput { return v.Input }

// GetGetPath returns __ExecGetMountInput.GetPath, and is useful for accessing the field via an interface.
func (v *__ExecGetMountInput) GetGetPath() string { return v.GetPath }

// __ExecInput is used internally by genqlient
type __ExecInput struct {
	Fsid  dagger.FSID `json:"fsid"`
	Input ExecInput   `json:"input"`
}

// GetFsid returns __ExecInput.Fsid, and is useful for accessing the field via an interface.
func (v *__ExecInput) GetFsid() dagger.FSID { return v.Fsid }

// GetInput returns __ExecInput.Input, and is useful for accessing the field via an interface.
func (v *__ExecInput) GetInput() ExecInput { return v.Input }

// __ImageInput is used internally by genqlient
type __ImageInput struct {
	Ref string `json:"ref"`
}

// GetRef returns __ImageInput.Ref, and is useful for accessing the field via an interface.
func (v *__ImageInput) GetRef() string { return v.Ref }

// __SecretInput is used internally by genqlient
type __SecretInput struct {
	Id dagger.SecretID `json:"id"`
}

// GetId returns __SecretInput.Id, and is useful for accessing the field via an interface.
func (v *__SecretInput) GetId() dagger.SecretID { return v.Id }

func Dockerfile(
	ctx context.Context,
	context dagger.FSID,
	dockerfileName string,
) (*DockerfileResponse, error) {
	req := &graphql.Request{
		OpName: "Dockerfile",
		Query: `
query Dockerfile ($context: FSID!, $dockerfileName: String!) {
	core {
		filesystem(id: $context) {
			dockerbuild(dockerfile: $dockerfileName) {
				id
			}
		}
	}
}
`,
		Variables: &__DockerfileInput{
			Context:        context,
			DockerfileName: dockerfileName,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data DockerfileResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Exec(
	ctx context.Context,
	fsid dagger.FSID,
	input ExecInput,
) (*ExecResponse, error) {
	req := &graphql.Request{
		OpName: "Exec",
		Query: `
query Exec ($fsid: FSID!, $input: ExecInput!) {
	core {
		filesystem(id: $fsid) {
			exec(input: $input) {
				fs {
					id
				}
			}
		}
	}
}
`,
		Variables: &__ExecInput{
			Fsid:  fsid,
			Input: input,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ExecResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ExecGetMount(
	ctx context.Context,
	fsid dagger.FSID,
	input ExecInput,
	getPath string,
) (*ExecGetMountResponse, error) {
	req := &graphql.Request{
		OpName: "ExecGetMount",
		Query: `
query ExecGetMount ($fsid: FSID!, $input: ExecInput!, $getPath: String!) {
	core {
		filesystem(id: $fsid) {
			exec(input: $input) {
				mount(path: $getPath) {
					id
				}
			}
		}
	}
}
`,
		Variables: &__ExecGetMountInput{
			Fsid:    fsid,
			Input:   input,
			GetPath: getPath,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ExecGetMountResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Image(
	ctx context.Context,
	ref string,
) (*ImageResponse, error) {
	req := &graphql.Request{
		OpName: "Image",
		Query: `
query Image ($ref: String!) {
	core {
		image(ref: $ref) {
			id
		}
	}
}
`,
		Variables: &__ImageInput{
			Ref: ref,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ImageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Secret(
	ctx context.Context,
	id dagger.SecretID,
) (*SecretResponse, error) {
	req := &graphql.Request{
		OpName: "Secret",
		Query: `
query Secret ($id: SecretID!) {
	core {
		secret(id: $id)
	}
}
`,
		Variables: &__SecretInput{
			Id: id,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data SecretResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
