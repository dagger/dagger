
extend type Query {
	"Core API"
	core: Core!

	"Host API"
	host: Host!
}

"Core API"
type Core {
	"Fetch an OCI image"
	image(ref: String!): Filesystem!

	"Fetch a git repository"
	git(remote: String!, ref: String): Filesystem!
}

"Interactions with the user's host filesystem"
type Host {
	"Fetch the client's workdir"
	workdir: LocalDir!

	"Fetch a client directory"
	dir(id: String!): LocalDir!
}

"A directory on the user's host filesystem"
type LocalDir {
	"Read the contents of the directory"
	read: Filesystem!

	"Write the provided filesystem to the directory"
	write(contents: FSID!, path: String): Boolean!
}


scalar FSID

"""
A reference to a filesystem tree.

For example:
	- The root filesystem of a container
	- A source code repository
	- A directory containing binary artifacts

Rule of thumb: if it fits in a tar archive, it fits in a Filesystem.
"""
type Filesystem {
	id: FSID!

	"read a file at path"
	file(path: String!, lines: Int): String

	"copy from a filesystem"
	copy(
		from: FSID!,
		srcPath: String,
		destPath: String,
		include: [String!]
		exclude: [String!]
	): Filesystem

	"push a filesystem as an image to a registry"
	pushImage(ref: String!): Boolean!
}

extend type Core {
	"Look up a filesystem by its ID"
	filesystem(id: FSID!): Filesystem!
}


"A set of scripts and/or extensions"
type Project {
	"name of the project"
	name: String!

	"schema provided by the project"
	schema: String

	"operations provided by the project"
	operations: String

	"extensions in this project"
	extensions: [Extension!]!

	"scripts in this project"
	scripts: [Script!]!

	"other projects with schema this project depends on"
	dependencies: [Project!]

	"install the project's schema"
	install: Boolean!

	"Code files generated by the SDKs in the project"
	generatedCode: Filesystem!
}

"A schema extension provided by a project"
type Extension {
	"path to the extension's code within the project's filesystem"
	path: String!

	"schema contributed to the project by this extension"
	schema: String!

	"operations contributed to the project by this extension (if any)"
	operations: String

	"sdk used to generate code for and/or execute this extension"
	sdk: String!
}

"An executable script that uses the project's dependencies and/or extensions"
type Script {
	"path to the script's code within the project's filesystem"
	path: String!

	"sdk used to generate code for and/or execute this script"
	sdk: String!
}

extend type Filesystem {
	"load a project's metadata"
	loadProject(configPath: String!): Project!
}

extend type Core {
	"Look up a project by name"
	project(name: String!): Project!
}


"Command execution"
type Exec {
	"Modified filesystem"
	fs: Filesystem!

	"stdout of the command"
	stdout(lines: Int): String

	"stderr of the command"
	stderr(lines: Int): String

	"Exit code of the command"
	exitCode: Int

	"Modified mounted filesystem"
	mount(path: String!): Filesystem!
}

input MountInput {
	"filesystem to mount"
	fs: FSID!

	"path at which the filesystem will be mounted"
	path: String!
}

input CacheMountInput {
	"Cache mount name"
	name: String!

	"Cache mount sharing mode (TODO: switch to enum)"
	sharingMode: String!

	"path at which the cache will be mounted"
	path: String!
}

input ExecInput {
	"""
	Command to execute
	Example: ["echo", "hello, world!"]
	"""
	args: [String!]!

	"Filesystem mounts"
	mounts: [MountInput!]

	"Cached mounts"
	cacheMounts: [CacheMountInput!]

	"Working directory"
	workdir: String

	"Env vars"
	env: [ExecEnvInput!]

	"Secret env vars"
	secretEnv: [ExecSecretEnvInput!]

	"Include the host's ssh agent socket in the exec at the provided path"
	sshAuthSock: String
}

input ExecEnvInput {
	"Env var name"
	name: String!
	"Env var value"
	value: String!
}

input ExecSecretEnvInput {
	"Env var name"
	name: String!
	"Secret env var value"
	id: SecretID!
}

extend type Filesystem {
	"execute a command inside this filesystem"
 	exec(input: ExecInput!): Exec!
}
	

extend type Filesystem {
	"docker build using this filesystem as context"
	dockerbuild(dockerfile: String): Filesystem!
}
	

scalar SecretID

extend type Core {
	"Look up a secret by ID"
	secret(id: SecretID!): String!

	"Add a secret"
	addSecret(plaintext: String!): SecretID!
}
