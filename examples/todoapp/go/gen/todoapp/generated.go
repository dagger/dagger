// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package todoapp

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/dagger/cloak/sdk/go/dagger"
)

// BuildResponse is returned by Build on success.
type BuildResponse struct {
	Todoapp BuildTodoapp `json:"todoapp"`
}

// GetTodoapp returns BuildResponse.Todoapp, and is useful for accessing the field via an interface.
func (v *BuildResponse) GetTodoapp() BuildTodoapp { return v.Todoapp }

// BuildTodoapp includes the requested fields of the GraphQL type Todoapp.
type BuildTodoapp struct {
	Build dagger.Filesystem `json:"build"`
}

// GetBuild returns BuildTodoapp.Build, and is useful for accessing the field via an interface.
func (v *BuildTodoapp) GetBuild() dagger.Filesystem { return v.Build }

// DeployResponse is returned by Deploy on success.
type DeployResponse struct {
	Todoapp DeployTodoapp `json:"todoapp"`
}

// GetTodoapp returns DeployResponse.Todoapp, and is useful for accessing the field via an interface.
func (v *DeployResponse) GetTodoapp() DeployTodoapp { return v.Todoapp }

// DeployTodoapp includes the requested fields of the GraphQL type Todoapp.
type DeployTodoapp struct {
	Deploy DeployTodoappDeploy `json:"deploy"`
}

// GetDeploy returns DeployTodoapp.Deploy, and is useful for accessing the field via an interface.
func (v *DeployTodoapp) GetDeploy() DeployTodoappDeploy { return v.Deploy }

// DeployTodoappDeploy includes the requested fields of the GraphQL type Deploy.
type DeployTodoappDeploy struct {
	Url       string `json:"url"`
	DeployUrl string `json:"deployUrl"`
}

// GetUrl returns DeployTodoappDeploy.Url, and is useful for accessing the field via an interface.
func (v *DeployTodoappDeploy) GetUrl() string { return v.Url }

// GetDeployUrl returns DeployTodoappDeploy.DeployUrl, and is useful for accessing the field via an interface.
func (v *DeployTodoappDeploy) GetDeployUrl() string { return v.DeployUrl }

// TestResponse is returned by Test on success.
type TestResponse struct {
	Todoapp TestTodoapp `json:"todoapp"`
}

// GetTodoapp returns TestResponse.Todoapp, and is useful for accessing the field via an interface.
func (v *TestResponse) GetTodoapp() TestTodoapp { return v.Todoapp }

// TestTodoapp includes the requested fields of the GraphQL type Todoapp.
type TestTodoapp struct {
	Test dagger.Filesystem `json:"test"`
}

// GetTest returns TestTodoapp.Test, and is useful for accessing the field via an interface.
func (v *TestTodoapp) GetTest() dagger.Filesystem { return v.Test }

// __BuildInput is used internally by genqlient
type __BuildInput struct {
	Src dagger.FSID `json:"src"`
}

// GetSrc returns __BuildInput.Src, and is useful for accessing the field via an interface.
func (v *__BuildInput) GetSrc() dagger.FSID { return v.Src }

// __DeployInput is used internally by genqlient
type __DeployInput struct {
	Src   dagger.FSID     `json:"src"`
	Token dagger.SecretID `json:"token"`
}

// GetSrc returns __DeployInput.Src, and is useful for accessing the field via an interface.
func (v *__DeployInput) GetSrc() dagger.FSID { return v.Src }

// GetToken returns __DeployInput.Token, and is useful for accessing the field via an interface.
func (v *__DeployInput) GetToken() dagger.SecretID { return v.Token }

// __TestInput is used internally by genqlient
type __TestInput struct {
	Src dagger.FSID `json:"src"`
}

// GetSrc returns __TestInput.Src, and is useful for accessing the field via an interface.
func (v *__TestInput) GetSrc() dagger.FSID { return v.Src }

func Build(
	ctx context.Context,
	src dagger.FSID,
) (*BuildResponse, error) {
	req := &graphql.Request{
		OpName: "Build",
		Query: `
query Build ($src: FSID!) {
	todoapp {
		build(src: $src) {
			id
		}
	}
}
`,
		Variables: &__BuildInput{
			Src: src,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data BuildResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Deploy(
	ctx context.Context,
	src dagger.FSID,
	token dagger.SecretID,
) (*DeployResponse, error) {
	req := &graphql.Request{
		OpName: "Deploy",
		Query: `
query Deploy ($src: FSID!, $token: SecretID!) {
	todoapp {
		deploy(src: $src, token: $token) {
			url
			deployUrl
		}
	}
}
`,
		Variables: &__DeployInput{
			Src:   src,
			Token: token,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data DeployResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Test(
	ctx context.Context,
	src dagger.FSID,
) (*TestResponse, error) {
	req := &graphql.Request{
		OpName: "Test",
		Query: `
query Test ($src: FSID!) {
	todoapp {
		test(src: $src) {
			id
		}
	}
}
`,
		Variables: &__TestInput{
			Src: src,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data TestResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
