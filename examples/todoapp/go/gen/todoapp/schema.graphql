
	extend type Query {
		"Core API"
		core: Core!
	}

	"Core API"
	type Core {
		"Fetch an OCI image"
		image(ref: String!): Filesystem!

		"Fetch a git repository"
		git(remote: String!, ref: String): Filesystem!

		"Fetch a client directory"
		clientdir(id: String!): Filesystem!
	}
	

	scalar FSID

	"""
	A reference to a filesystem tree.
	For example:
	 - The root filesystem of a container
	 - A source code repository
	 - A directory containing binary artifacts
	Rule of thumb: if it fits in a tar archive, it fits in a Filesystem.
	"""
	type Filesystem {
		id: FSID!

		"read a file at path"
		file(path: String!, lines: Int): String

		# FIXME: this should be in execSchema. However, removing this results in an error:
		# failed to resolve all type definitions: [Core Query Filesystem Exec]
		"execute a command inside this filesystem"
		exec(input: ExecInput!): Exec!
	}

	extend type Core {
		"Look up a filesystem by its ID"
		filesystem(id: FSID!): Filesystem!
	}
	

	type Extension {
		"name of the extension"
		name: String!

		"schema of the extension"
		schema: String!

		"operations for this extension"
		operations: String!
	}

	extend type Filesystem {
		"load an extension into the API"
		loadExtension(name: String!): Extension!
	}

	extend type Core {
		"Look up an extension by name"
		extension(name: String!): Extension!
	}
	

	type Exec {
		"Modified filesystem"
		fs: Filesystem!

		"stdout of the command"
		stdout(lines: Int): String

		"stderr of the command"
		stderr(lines: Int): String

		"Exit code of the command"
		exitCode: Int

		"Modified mounted filesystem"
		mount(path: String!): Filesystem!
	}

	input MountInput {
		"filesystem to mount"
		fs: FSID!

		"path at which the filesystem will be mounted"
		path: String!
	}

	input ExecInput {
		"""
		Command to execute
		Example: ["echo", "hello, world!"]
		"""
		args: [String!]!

		"Transient filesystem mounts"
		mounts: [MountInput!]

		"Working directory"
		workdir: String
	}

	# FIXME: broken
	# extend type Filesystem {
	#	"execute a command inside this filesystem"
	# 	exec(input: ExecInput!): Exec!
	# }
	

	extend type Filesystem {
		"docker build using this filesystem as context"
		dockerbuild(dockerfile: String): Filesystem!
	}
	

	scalar SecretID

	extend type Core {
		"Look up a secret by ID"
		secret(id: SecretID!): String!

		"Add a secret"
		addSecret(plaintext: String!): SecretID!
	}
	

extend type Query {
  todoapp: Todoapp!
}

type Todoapp {
  build(src: FSID!): Filesystem!
  test(src: FSID!): Filesystem!
  deploy(src: FSID!, token: SecretID!): DeployURLs!
}

type DeployURLs {
  url: String!
  deployURL: String!
  logsURL: String
}
