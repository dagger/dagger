// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package yarn

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/dagger/cloak/sdk/go/dagger"
)

// ScriptResponse is returned by Script on success.
type ScriptResponse struct {
	Yarn ScriptYarn `json:"yarn"`
}

// GetYarn returns ScriptResponse.Yarn, and is useful for accessing the field via an interface.
func (v *ScriptResponse) GetYarn() ScriptYarn { return v.Yarn }

// ScriptYarn includes the requested fields of the GraphQL type Yarn.
type ScriptYarn struct {
	Script dagger.Filesystem `json:"script"`
}

// GetScript returns ScriptYarn.Script, and is useful for accessing the field via an interface.
func (v *ScriptYarn) GetScript() dagger.Filesystem { return v.Script }

// __ScriptInput is used internally by genqlient
type __ScriptInput struct {
	Source  dagger.FSID `json:"source"`
	RunArgs []string    `json:"runArgs"`
}

// GetSource returns __ScriptInput.Source, and is useful for accessing the field via an interface.
func (v *__ScriptInput) GetSource() dagger.FSID { return v.Source }

// GetRunArgs returns __ScriptInput.RunArgs, and is useful for accessing the field via an interface.
func (v *__ScriptInput) GetRunArgs() []string { return v.RunArgs }

func Script(
	ctx context.Context,
	source dagger.FSID,
	runArgs []string,
) (*ScriptResponse, error) {
	req := &graphql.Request{
		OpName: "Script",
		Query: `
query Script ($source: FSID!, $runArgs: [String!]) {
	yarn {
		script(source: $source, runArgs: $runArgs) {
			id
		}
	}
}
`,
		Variables: &__ScriptInput{
			Source:  source,
			RunArgs: runArgs,
		},
	}
	var err error
	var client graphql.Client

	client, err = dagger.Client(ctx)
	if err != nil {
		return nil, err
	}

	var data ScriptResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
