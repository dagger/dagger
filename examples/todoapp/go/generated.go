// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"

	"github.com/dagger/cloak/sdk/go/dagger"
)

func (r *deployURLs) url(ctx context.Context, obj *DeployURLs) (string, error) {

	return obj.URL, nil

}

func (r *deployURLs) deployURL(ctx context.Context, obj *DeployURLs) (string, error) {

	return obj.DeployURL, nil

}

func (r *deployURLs) logsURL(ctx context.Context, obj *DeployURLs) (*string, error) {

	return obj.LogsURL, nil

}

func (r *query) todoapp(ctx context.Context) (*Todoapp, error) {

	return new(Todoapp), nil

}

type deployURLs struct{}
type query struct{}
type todoapp struct{}

func main() {
	dagger.Serve(context.Background(), map[string]func(context.Context, dagger.ArgsInput) (interface{}, error){
		"DeployURLs.url": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			obj := new(DeployURLs)
			bytes, err = json.Marshal(fc.ParentResult)
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, obj); err != nil {
				return nil, err
			}

			return (&deployURLs{}).url(ctx,

				obj,
			)
		},
		"DeployURLs.deployURL": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			obj := new(DeployURLs)
			bytes, err = json.Marshal(fc.ParentResult)
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, obj); err != nil {
				return nil, err
			}

			return (&deployURLs{}).deployURL(ctx,

				obj,
			)
		},
		"DeployURLs.logsURL": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			obj := new(DeployURLs)
			bytes, err = json.Marshal(fc.ParentResult)
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, obj); err != nil {
				return nil, err
			}

			return (&deployURLs{}).logsURL(ctx,

				obj,
			)
		},
		"Query.todoapp": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			return (&query{}).todoapp(ctx)
		},
		"Todoapp.build": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var src dagger.FSID

			bytes, err = json.Marshal(fc.Args["src"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &src); err != nil {
				return nil, err
			}

			return (&todoapp{}).build(ctx,

				src,
			)
		},
		"Todoapp.test": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var src dagger.FSID

			bytes, err = json.Marshal(fc.Args["src"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &src); err != nil {
				return nil, err
			}

			return (&todoapp{}).test(ctx,

				src,
			)
		},
		"Todoapp.deploy": func(ctx context.Context, fc dagger.ArgsInput) (interface{}, error) {
			var bytes []byte
			_ = bytes
			var err error
			_ = err

			var src dagger.FSID

			bytes, err = json.Marshal(fc.Args["src"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &src); err != nil {
				return nil, err
			}

			var token dagger.SecretID

			bytes, err = json.Marshal(fc.Args["token"])
			if err != nil {
				return nil, err
			}
			if err := json.Unmarshal(bytes, &token); err != nil {
				return nil, err
			}

			return (&todoapp{}).deploy(ctx,

				src,

				token,
			)
		},
	})
}
