// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package main

import (
	"github.com/dagger/cloak/sdk/go/dagger"
)

type CacheMountInput struct {
	// Cache mount name
	Name string `json:"name"`
	// Cache mount sharing mode (TODO: switch to enum)
	SharingMode string `json:"sharingMode"`
	// path at which the cache will be mounted
	Path string `json:"path"`
}

// Core API
type Core struct {
	// Fetch an OCI image
	Image *dagger.Filesystem `json:"image"`
	// Fetch a git repository
	Git *dagger.Filesystem `json:"git"`
	// Fetch a client directory
	Clientdir *dagger.Filesystem `json:"clientdir"`
	// Look up a filesystem by its ID
	Filesystem *dagger.Filesystem `json:"filesystem"`
	// Look up an extension by name
	Extension *Extension `json:"extension"`
	// Look up a secret by ID
	Secret string `json:"secret"`
	// Add a secret
	AddSecret dagger.SecretID `json:"addSecret"`
}

type DeployURLs struct {
	URL       string  `json:"url"`
	DeployURL string  `json:"deployURL"`
	LogsURL   *string `json:"logsURL"`
}

type ExecEnvInput struct {
	// Env var name
	Name string `json:"name"`
	// Env var value
	Value string `json:"value"`
}

type ExecInput struct {
	// Command to execute
	// Example: ["echo", "hello, world!"]
	Args []string `json:"args"`
	// Filesystem mounts
	Mounts []*MountInput `json:"mounts"`
	// Cached mounts
	CacheMounts []*CacheMountInput `json:"cacheMounts"`
	// Working directory
	Workdir *string `json:"workdir"`
	// Env vars
	Env []*ExecEnvInput `json:"env"`
	// Secret env vars
	SecretEnv []*ExecSecretEnvInput `json:"secretEnv"`
}

type ExecSecretEnvInput struct {
	// Env var name
	Name string `json:"name"`
	// Secret env var value
	ID dagger.SecretID `json:"id"`
}

// Extension representation
type Extension struct {
	// name of the extension
	Name string `json:"name"`
	// schema of the extension
	Schema *string `json:"schema"`
	// operations for this extension
	Operations *string `json:"operations"`
	// dependencies for this extension
	Dependencies []*Extension `json:"dependencies"`
	// install the extension, stitching its schema into the API
	Install bool `json:"install"`
}

type MountInput struct {
	// filesystem to mount
	Fs dagger.FSID `json:"fs"`
	// path at which the filesystem will be mounted
	Path string `json:"path"`
}

type Todoapp struct {
	Build  *dagger.Filesystem `json:"build"`
	Test   *dagger.Filesystem `json:"test"`
	Deploy *DeployURLs        `json:"deploy"`
}
