# This file generated by `mix dagger.gen`. Please DO NOT EDIT.
defmodule Dagger.Directory do
  @moduledoc "A directory."
  use Dagger.QueryBuilder
  defstruct [:selection, :client]

  def diff(directory, opts) do
    selection = select(directory.selection, "diff")
    selection = arg(selection, to_string(:other), Keyword.fetch!(opts, :other))
    %Dagger.Directory{selection: selection, client: directory.client}
  end

  def directory(directory, opts) do
    selection = select(directory.selection, "directory")
    selection = arg(selection, to_string(:path), Keyword.fetch!(opts, :path))
    %Dagger.Directory{selection: selection, client: directory.client}
  end

  def docker_build(directory, opts) do
    selection = select(directory.selection, "dockerBuild")

    {_opts, selection} =
      [:dockerfile, :platform, :build_args, :target]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.Container{selection: selection, client: directory.client}
  end

  def entries(directory, opts) do
    selection = select(directory.selection, "entries")

    {_opts, selection} =
      [:path]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    execute(selection, directory.client)
  end

  def export(directory, opts) do
    selection = select(directory.selection, "export")
    selection = arg(selection, to_string(:path), Keyword.fetch!(opts, :path))
    execute(selection, directory.client)
  end

  def file(directory, opts) do
    selection = select(directory.selection, "file")
    selection = arg(selection, to_string(:path), Keyword.fetch!(opts, :path))
    %Dagger.File{selection: selection, client: directory.client}
  end

  def id(directory) do
    selection = select(directory.selection, "id")
    execute(selection, directory.client)
  end

  def load_project(directory, opts) do
    selection = select(directory.selection, "loadProject")
    selection = arg(selection, to_string(:config_path), Keyword.fetch!(opts, :config_path))
    %Dagger.Project{selection: selection, client: directory.client}
  end

  def pipeline(directory, opts) do
    selection = select(directory.selection, "pipeline")
    selection = arg(selection, to_string(:name), Keyword.fetch!(opts, :name))

    {_opts, selection} =
      [:description, :labels]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.Directory{selection: selection, client: directory.client}
  end

  def with_directory(directory, opts) do
    selection = select(directory.selection, "withDirectory")
    selection = arg(selection, to_string(:path), Keyword.fetch!(opts, :path))
    selection = arg(selection, to_string(:directory), Keyword.fetch!(opts, :directory))

    {_opts, selection} =
      [:exclude, :include]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.Directory{selection: selection, client: directory.client}
  end

  def with_file(directory, opts) do
    selection = select(directory.selection, "withFile")
    selection = arg(selection, to_string(:path), Keyword.fetch!(opts, :path))
    selection = arg(selection, to_string(:source), Keyword.fetch!(opts, :source))

    {_opts, selection} =
      [:permissions]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.Directory{selection: selection, client: directory.client}
  end

  def with_new_directory(directory, opts) do
    selection = select(directory.selection, "withNewDirectory")
    selection = arg(selection, to_string(:path), Keyword.fetch!(opts, :path))

    {_opts, selection} =
      [:permissions]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.Directory{selection: selection, client: directory.client}
  end

  def with_new_file(directory, opts) do
    selection = select(directory.selection, "withNewFile")
    selection = arg(selection, to_string(:path), Keyword.fetch!(opts, :path))
    selection = arg(selection, to_string(:contents), Keyword.fetch!(opts, :contents))

    {_opts, selection} =
      [:permissions]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.Directory{selection: selection, client: directory.client}
  end

  def with_timestamps(directory, opts) do
    selection = select(directory.selection, "withTimestamps")
    selection = arg(selection, to_string(:timestamp), Keyword.fetch!(opts, :timestamp))
    %Dagger.Directory{selection: selection, client: directory.client}
  end

  def without_directory(directory, opts) do
    selection = select(directory.selection, "withoutDirectory")
    selection = arg(selection, to_string(:path), Keyword.fetch!(opts, :path))
    %Dagger.Directory{selection: selection, client: directory.client}
  end

  def without_file(directory, opts) do
    selection = select(directory.selection, "withoutFile")
    selection = arg(selection, to_string(:path), Keyword.fetch!(opts, :path))
    %Dagger.Directory{selection: selection, client: directory.client}
  end
end
