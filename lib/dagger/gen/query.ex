# This file generated by `mix dagger.gen`. Please DO NOT EDIT.
defmodule Dagger.Query do
  @moduledoc ""
  use Dagger.QueryBuilder
  defstruct [:selection, :client]

  def cache_volume(%__MODULE__{} = query, opts) do
    selection = select(query.selection, "cacheVolume")
    selection = arg(selection, to_string(:key), Keyword.fetch!(opts, :key))
    %Dagger.CacheVolume{selection: selection, client: query.client}
  end

  def container(%__MODULE__{} = query, opts) do
    selection = select(query.selection, "container")

    {_opts, selection} =
      [:id, :platform]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.Container{selection: selection, client: query.client}
  end

  def default_platform(%__MODULE__{} = query) do
    selection = select(query.selection, "defaultPlatform")
    execute(selection, query.client)
  end

  def directory(%__MODULE__{} = query, opts) do
    selection = select(query.selection, "directory")

    {_opts, selection} =
      [:id]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.Directory{selection: selection, client: query.client}
  end

  def file(%__MODULE__{} = query, opts) do
    selection = select(query.selection, "file")
    selection = arg(selection, to_string(:id), Keyword.fetch!(opts, :id))
    execute(selection, query.client)
  end

  def git(%__MODULE__{} = query, opts) do
    selection = select(query.selection, "git")
    selection = arg(selection, to_string(:url), Keyword.fetch!(opts, :url))

    {_opts, selection} =
      [:keep_git_dir, :experimental_service_host]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.GitRepository{selection: selection, client: query.client}
  end

  def host(%__MODULE__{} = query) do
    selection = select(query.selection, "host")
    %Dagger.Host{selection: selection, client: query.client}
  end

  def http(%__MODULE__{} = query, opts) do
    selection = select(query.selection, "http")
    selection = arg(selection, to_string(:url), Keyword.fetch!(opts, :url))

    {_opts, selection} =
      [:experimental_service_host]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.File{selection: selection, client: query.client}
  end

  def pipeline(%__MODULE__{} = query, opts) do
    selection = select(query.selection, "pipeline")
    selection = arg(selection, to_string(:name), Keyword.fetch!(opts, :name))

    {_opts, selection} =
      [:description, :labels]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.Query{selection: selection, client: query.client}
  end

  def project(%__MODULE__{} = query, opts) do
    selection = select(query.selection, "project")
    selection = arg(selection, to_string(:name), Keyword.fetch!(opts, :name))
    %Dagger.Project{selection: selection, client: query.client}
  end

  def secret(%__MODULE__{} = query, opts) do
    selection = select(query.selection, "secret")
    selection = arg(selection, to_string(:id), Keyword.fetch!(opts, :id))
    %Dagger.Secret{selection: selection, client: query.client}
  end

  def set_secret(%__MODULE__{} = query, opts) do
    selection = select(query.selection, "setSecret")
    selection = arg(selection, to_string(:name), Keyword.fetch!(opts, :name))
    selection = arg(selection, to_string(:plaintext), Keyword.fetch!(opts, :plaintext))
    %Dagger.Secret{selection: selection, client: query.client}
  end

  def socket(%__MODULE__{} = query, opts) do
    selection = select(query.selection, "socket")

    {_opts, selection} =
      [:id]
      |> Enum.reduce({opts, selection}, fn arg, {opts, selection} ->
        if not is_nil(opts[arg]) do
          {opts, arg(selection, to_string(arg), opts[arg])}
        else
          {opts, selection}
        end
      end)

    %Dagger.Socket{selection: selection, client: query.client}
  end
end
