package network

import (
	"fmt"
	"html/template"
	"os"
	"os/exec"

	"github.com/adrg/xdg"
	"github.com/coreos/go-iptables/iptables"
)

func InstallDnsmasq(name string) error {
	dnsmasqPath, err := exec.LookPath("dnsmasq")
	if err != nil {
		return err
	}

	pidFile, err := xdg.RuntimeFile("dagger/net/" + name + "/dnsmasq.pid")
	if err != nil {
		return err
	}

	hostsFile, err := xdg.RuntimeFile("dagger/net/" + name + "/hosts")
	if err != nil {
		return err
	}

	upstreamResolvFile, err := xdg.RuntimeFile("dagger/net/" + name + "/resolv.conf.upstream")
	if err != nil {
		return err
	}

	config := dnsmasqConfig{
		Domain:             name + ".local",
		NetworkInterface:   name + "0",
		PidFile:            pidFile,
		AddnHostsFile:      hostsFile,
		UpstreamResolvFile: upstreamResolvFile,
	}

	if err := setupIPTables(config.NetworkInterface); err != nil {
		return fmt.Errorf("setup iptables: %w", err)
	}

	dnsmasqConfigFile, err := xdg.RuntimeFile("dagger/net/" + name + "/dnsmasq.conf")
	if err != nil {
		return err
	}

	if err := writeDnsmasqConfig(dnsmasqConfigFile, config); err != nil {
		return fmt.Errorf("write dnsmasq.conf: %w", err)
	}

	dnsmasq := exec.Command(dnsmasqPath, "-u", "root", "--conf-file="+dnsmasqConfigFile)

	if b, err := dnsmasq.CombinedOutput(); err != nil {
		return fmt.Errorf("start dnsmasq: %w; output:\n%s", err, string(b))
	}

	return nil
}

func writeDnsmasqConfig(dnsmasqConfigFile string, config dnsmasqConfig) error {
	conf, err := os.Create(dnsmasqConfigFile)
	if err != nil {
		return err
	}

	defer conf.Close()

	tmpl, err := template.New("dnsmasq.conf").Parse(dnsmasqTemplate)
	if err != nil {
		return err
	}

	if err := tmpl.Execute(conf, config); err != nil {
		return err
	}

	return conf.Close()
}

const dnsmasqTemplate = `## WARNING: THIS IS AN AUTOGENERATED FILE
## AND SHOULD NOT BE EDITED MANUALLY AS IT
## LIKELY TO AUTOMATICALLY BE REPLACED.
strict-order
local=/{{.Domain}}/
domain={{.Domain}}
expand-hosts
pid-file={{.PidFile}}
except-interface=lo
bind-dynamic
no-hosts
interface={{.NetworkInterface}}
addn-hosts={{.AddnHostsFile}}
resolv-file={{.UpstreamResolvFile}}
`

type dnsmasqConfig struct {
	Domain             string
	NetworkInterface   string
	PidFile            string
	AddnHostsFile      string
	UpstreamResolvFile string
}

func setupIPTables(iface string) error {
	ip, err := iptables.New()
	if err != nil {
		return err
	}
	args := []string{"-i", iface, "-p", "udp", "-m", "udp", "--dport", "53", "-j", "ACCEPT"}
	exists, err := ip.Exists("filter", "INPUT", args...)
	if err != nil {
		return err
	}
	if exists {
		return nil
	}

	return ip.Insert("filter", "INPUT", 1, args...)
}
