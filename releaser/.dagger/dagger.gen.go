// Code generated by dagger. DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"log/slog"
	"os"

	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/sdk/resource"
	semconv "go.opentelemetry.io/otel/semconv/v1.24.0"
	"go.opentelemetry.io/otel/trace"

	"dagger/releaser/internal/dagger"
	"dagger/releaser/internal/querybuilder"
	"dagger/releaser/internal/telemetry"
)

var dag = dagger.Connect()

func Tracer() trace.Tracer {
	return otel.Tracer("dagger.io/sdk.go")
}

// used for local MarshalJSON implementations
var marshalCtx = context.Background()

// called by main()
func setMarshalContext(ctx context.Context) {
	marshalCtx = ctx
	dagger.SetMarshalContext(ctx)
}

type DaggerObject = querybuilder.GraphQLMarshaller

type ExecError = dagger.ExecError

// ptr returns a pointer to the given value.
func ptr[T any](v T) *T {
	return &v
}

// convertSlice converts a slice of one type to a slice of another type using a
// converter function
func convertSlice[I any, O any](in []I, f func(I) O) []O {
	out := make([]O, len(in))
	for i, v := range in {
		out[i] = f(v)
	}
	return out
}

func (r Releaser) MarshalJSON() ([]byte, error) {
	var concrete struct {
		ChangeNotesDir *dagger.Directory
	}
	concrete.ChangeNotesDir = r.ChangeNotesDir
	return json.Marshal(&concrete)
}

func (r *Releaser) UnmarshalJSON(bs []byte) error {
	var concrete struct {
		ChangeNotesDir *dagger.Directory
	}
	err := json.Unmarshal(bs, &concrete)
	if err != nil {
		return err
	}
	r.ChangeNotesDir = concrete.ChangeNotesDir
	return nil
}

func main() {
	ctx := context.Background()

	// Direct slog to the new stderr. This is only for dev time debugging, and
	// runtime errors/warnings.
	slog.SetDefault(slog.New(slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{
		Level: slog.LevelWarn,
	})))

	if err := dispatch(ctx); err != nil {
		os.Exit(2)
	}
}

func dispatch(ctx context.Context) (rerr error) {
	ctx = telemetry.InitEmbedded(ctx, resource.NewWithAttributes(
		semconv.SchemaURL,
		semconv.ServiceNameKey.String("dagger-go-sdk"),
		// TODO version?
	))
	defer telemetry.Close()

	// A lot of the "work" actually happens when we're marshalling the return
	// value, which entails getting object IDs, which happens in MarshalJSON,
	// which has no ctx argument, so we use this lovely global variable.
	setMarshalContext(ctx)

	fnCall := dag.CurrentFunctionCall()
	defer func() {
		if rerr != nil {
			if err := fnCall.ReturnError(ctx, dag.Error(rerr.Error())); err != nil {
				fmt.Println("failed to return error:", err)
			}
		}
	}()

	parentName, err := fnCall.ParentName(ctx)
	if err != nil {
		return fmt.Errorf("get parent name: %w", err)
	}
	fnName, err := fnCall.Name(ctx)
	if err != nil {
		return fmt.Errorf("get fn name: %w", err)
	}
	parentJson, err := fnCall.Parent(ctx)
	if err != nil {
		return fmt.Errorf("get fn parent: %w", err)
	}
	fnArgs, err := fnCall.InputArgs(ctx)
	if err != nil {
		return fmt.Errorf("get fn args: %w", err)
	}

	inputArgs := map[string][]byte{}
	for _, fnArg := range fnArgs {
		argName, err := fnArg.Name(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg name: %w", err)
		}
		argValue, err := fnArg.Value(ctx)
		if err != nil {
			return fmt.Errorf("get fn arg value: %w", err)
		}
		inputArgs[argName] = []byte(argValue)
	}

	result, err := invoke(ctx, []byte(parentJson), parentName, fnName, inputArgs)
	if err != nil {
		var exec *dagger.ExecError
		if errors.As(err, &exec) {
			return exec.Unwrap()
		}
		return err
	}
	resultBytes, err := json.Marshal(result)
	if err != nil {
		return fmt.Errorf("marshal: %w", err)
	}

	if err := fnCall.ReturnValue(ctx, dagger.JSON(resultBytes)); err != nil {
		return fmt.Errorf("store return value: %w", err)
	}
	return nil
}
func invoke(ctx context.Context, parentJSON []byte, parentName string, fnName string, inputArgs map[string][]byte) (_ any, err error) {
	_ = inputArgs
	switch parentName {
	case "Releaser":
		switch fnName {
		case "ChangeNotes":
			var parent Releaser
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var component string
			if inputArgs["component"] != nil {
				err = json.Unmarshal([]byte(inputArgs["component"]), &component)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg component", err))
				}
			}
			var version string
			if inputArgs["version"] != nil {
				err = json.Unmarshal([]byte(inputArgs["version"]), &version)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg version", err))
				}
			}
			return (*Releaser).ChangeNotes(&parent, ctx, component, version)
		case "GithubRelease":
			var parent Releaser
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var repository string
			if inputArgs["repository"] != nil {
				err = json.Unmarshal([]byte(inputArgs["repository"]), &repository)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg repository", err))
				}
			}
			var tag string
			if inputArgs["tag"] != nil {
				err = json.Unmarshal([]byte(inputArgs["tag"]), &tag)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg tag", err))
				}
			}
			var target string
			if inputArgs["target"] != nil {
				err = json.Unmarshal([]byte(inputArgs["target"]), &target)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg target", err))
				}
			}
			var notes *dagger.File
			if inputArgs["notes"] != nil {
				err = json.Unmarshal([]byte(inputArgs["notes"]), &notes)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg notes", err))
				}
			}
			var token *dagger.Secret
			if inputArgs["token"] != nil {
				err = json.Unmarshal([]byte(inputArgs["token"]), &token)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg token", err))
				}
			}
			var dryRun bool
			if inputArgs["dryRun"] != nil {
				err = json.Unmarshal([]byte(inputArgs["dryRun"]), &dryRun)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg dryRun", err))
				}
			}
			return nil, (*Releaser).GithubRelease(&parent, ctx, repository, tag, target, notes, token, dryRun)
		case "":
			var parent Releaser
			err = json.Unmarshal(parentJSON, &parent)
			if err != nil {
				panic(fmt.Errorf("%s: %w", "failed to unmarshal parent object", err))
			}
			var changeNotesDir *dagger.Directory
			if inputArgs["changeNotesDir"] != nil {
				err = json.Unmarshal([]byte(inputArgs["changeNotesDir"]), &changeNotesDir)
				if err != nil {
					panic(fmt.Errorf("%s: %w", "failed to unmarshal input arg changeNotesDir", err))
				}
			}
			return New(changeNotesDir), nil
		default:
			return nil, fmt.Errorf("unknown function %s", fnName)
		}
	case "":
		return dag.Module().
			WithDescription("A module that encodes the official release process of the Dagger Engine\n").
			WithObject(
				dag.TypeDef().WithObject("Releaser", dagger.TypeDefWithObjectOpts{SourceMap: dag.SourceMap("main.go", 12, 6)}).
					WithFunction(
						dag.Function("ChangeNotes",
							dag.TypeDef().WithObject("File")).
							WithDescription("Lookup the change notes file for the given component and version").
							WithSourceMap(dag.SourceMap("main.go", 28, 1)).
							WithArg("component", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{Description: "The component to look up change notes for\nExample: \"sdk/php\"", SourceMap: dag.SourceMap("main.go", 32, 2)}).
							WithArg("version", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{Description: "The version to look up change notes for", SourceMap: dag.SourceMap("main.go", 34, 2)})).
					WithFunction(
						dag.Function("GithubRelease",
							dag.TypeDef().WithKind(dagger.TypeDefKindVoidKind).WithOptional(true)).
							WithDescription("Publish a Github release").
							WithSourceMap(dag.SourceMap("main.go", 47, 1)).
							WithArg("repository", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{Description: "GitHub repository URL", SourceMap: dag.SourceMap("main.go", 50, 2)}).
							WithArg("tag", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{Description: "Tag for the GitHub release\neg. sdk/typescript/v0.14.0", SourceMap: dag.SourceMap("main.go", 53, 2)}).
							WithArg("target", dag.TypeDef().WithKind(dagger.TypeDefKindStringKind), dagger.FunctionWithArgOpts{Description: "The target for the release\neg. ü§∑\u200d‚ôÇÔ∏è\nFIXME: what's the difference with 'tag'? Who knows, it wasn't documented - SH Nov 2024", SourceMap: dag.SourceMap("main.go", 57, 2)}).
							WithArg("notes", dag.TypeDef().WithObject("File").WithOptional(true), dagger.FunctionWithArgOpts{Description: "File containing release notes", SourceMap: dag.SourceMap("main.go", 60, 2)}).
							WithArg("token", dag.TypeDef().WithObject("Secret").WithOptional(true), dagger.FunctionWithArgOpts{Description: "GitHub token for authentication", SourceMap: dag.SourceMap("main.go", 63, 2)}).
							WithArg("dryRun", dag.TypeDef().WithKind(dagger.TypeDefKindBooleanKind).WithOptional(true), dagger.FunctionWithArgOpts{Description: "Whether to perform a dry run without creating the release", SourceMap: dag.SourceMap("main.go", 66, 2)})).
					WithConstructor(
						dag.Function("New",
							dag.TypeDef().WithObject("Releaser")).
							WithSourceMap(dag.SourceMap("main.go", 16, 1)).
							WithArg("changeNotesDir", dag.TypeDef().WithObject("Directory").WithOptional(true), dagger.FunctionWithArgOpts{SourceMap: dag.SourceMap("main.go", 20, 2), DefaultPath: "/", Ignore: []string{"*", "!.changes/*.md", "!**/.changes/*.md"}}))), nil
	default:
		return nil, fmt.Errorf("unknown object %s", parentName)
	}
}
