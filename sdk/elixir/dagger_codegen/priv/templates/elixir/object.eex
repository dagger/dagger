<% alias Dagger.Codegen.ElixirGenerator.Formatter %>
<% alias Dagger.Codegen.ElixirGenerator.Renderer %>
<% alias Dagger.Codegen.ElixirGenerator.ObjectRenderer %>
<% alias Dagger.Codegen.Introspection.Types.InputValue %>
<% alias Dagger.Codegen.Introspection.Types.TypeRef %>

# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule <%= Formatter.format_module(@type.name) %> do
  <%= Renderer.render_moduledoc(@type) %>

  use Dagger.Core.QueryBuilder

  <%= ObjectRenderer.render_derive_type(@type) %>
  defstruct [:selection, :client]

  @type t() :: %__MODULE__{}

  <% module_var = Formatter.format_var_name(@type.name) %>
  <%= for field <- @type.fields,
          {optional_args, required_args} = Enum.split_with(field.args, &InputValue.is_optional?/1) do %>
  <%= Renderer.render_deprecated(field) %>
  <%= Renderer.render_doc(field) %>
  <%= ObjectRenderer.render_spec(field, required_args, optional_args) %>
  def <%= Formatter.format_function_name(field.name) %>(<%= ObjectRenderer.render_function_args(module_var, required_args, optional_args) %>) do
    selection = 
      <%= ObjectRenderer.render_selection_chain(@schema, field, module_var, required_args, optional_args) %>

      <%= if TypeRef.is_list_of?(field.type, "OBJECT") do %>
        with {:ok, items} <- execute(selection, <%= module_var %>.client) do
	  {:ok,
	   for %{"id" => id} <- items do
	     %<%= Formatter.format_output_type(field.type.of_type) %>{
	       selection: 
	         query()
                 |> select("load<%= field.type.of_type.of_type.of_type.name %>FromID")
                 |> arg("id", id), 
	       client: <%= module_var %>.client
	     }
	   end}
	end
      <% else %>
        <%= if TypeRef.is_scalar?(field.type) or TypeRef.is_list_of?(field.type, "SCALAR") do %>
        execute(selection, <%= module_var %>.client)
        <% else %>
        %<%= Formatter.format_output_type(field.type) %>{
          selection: selection,
          client: <%= module_var %>.client
        }
        <% end %>
      <% end %>
  end
  <% end %>
end
