defmodule Dagger.Codegen.ElixirGenerator.ObjectRendererTest do
  use Dagger.Codegen.RendererCase, async: true

  alias Dagger.Codegen.ElixirGenerator.ObjectRenderer

  test "return object node" do
    auto_assert(
      """
      # This file generated by `dagger_codegen`. Please DO NOT EDIT.
      defmodule Dagger.Client do
        @moduledoc "The root of the DAG."

        alias Dagger.Core.Client
        alias Dagger.Core.QueryBuilder, as: QB

        defstruct [:query_builder, :client]

        @type t() :: %__MODULE__{}

        @doc "Create a new TypeDef."
        @spec type_def(t()) :: Dagger.TypeDef.t()
        def type_def(%__MODULE__{} = client) do
          query_builder =
            client.query_builder |> QB.select("typeDef")

          %Dagger.TypeDef{
            query_builder: query_builder,
            client: client.client
          }
        end
      end\
      """ <- render_type(ObjectRenderer, "test/fixtures/objects/chain-selection.json")
    )
  end

  test "return a list of leaf node" do
    auto_assert(
      """
      # This file generated by `dagger_codegen`. Please DO NOT EDIT.
      defmodule Dagger.Container do
        @moduledoc "The root of the DAG."

        alias Dagger.Core.Client
        alias Dagger.Core.QueryBuilder, as: QB

        defstruct [:query_builder, :client]

        @type t() :: %__MODULE__{}

        @doc "Retrieves the list of environment variables passed to commands."
        @spec env_variables(t()) :: {:ok, [Dagger.EnvVariable.t()]} | {:error, term()}
        def env_variables(%__MODULE__{} = container) do
          query_builder =
            container.query_builder |> QB.select("envVariables") |> QB.select("id")

          with {:ok, items} <- Client.execute(container.client, query_builder) do
            {:ok,
             for %{"id" => id} <- items do
               %Dagger.EnvVariable{
                 query_builder:
                   QB.query()
                   |> QB.select("loadEnvVariableFromID")
                   |> QB.put_arg("id", id),
                 client: container.client
               }
             end}
          end
        end
      end\
      """ <- render_type(ObjectRenderer, "test/fixtures/objects/list-leaf-nodes.json")
    )
  end

  test "execute leaf node" do
    auto_assert(
      """
      # This file generated by `dagger_codegen`. Please DO NOT EDIT.
      defmodule Dagger.EnvVariable do
        @moduledoc "An environment variable name and value."

        alias Dagger.Core.Client
        alias Dagger.Core.QueryBuilder, as: QB

        defstruct [:query_builder, :client]

        @type t() :: %__MODULE__{}

        @doc "The environment variable name."
        @spec name(t()) :: {:ok, String.t()} | {:error, term()}
        def name(%__MODULE__{} = env_variable) do
          query_builder =
            env_variable.query_builder |> QB.select("name")

          Client.execute(env_variable.client, query_builder)
        end
      end\
      """ <- render_type(ObjectRenderer, "test/fixtures/objects/execute-leaf-node.json")
    )
  end

  test "accept struct type of id argument" do
    auto_assert(
      """
      # This file generated by `dagger_codegen`. Please DO NOT EDIT.
      defmodule Dagger.Client do
        @moduledoc "The root of the DAG."

        alias Dagger.Core.Client
        alias Dagger.Core.QueryBuilder, as: QB

        defstruct [:query_builder, :client]

        @type t() :: %__MODULE__{}

        @doc "Load a Container from its ID."
        @spec load_container_from_id(t(), Dagger.ContainerID.t()) :: Dagger.Container.t()
        def load_container_from_id(%__MODULE__{} = client, id) do
          query_builder =
            client.query_builder |> QB.select("loadContainerFromID") |> QB.put_arg("id", id)

          %Dagger.Container{
            query_builder: query_builder,
            client: client.client
          }
        end
      end\
      """ <- render_type(ObjectRenderer, "test/fixtures/objects/id-arg.json")
    )
  end

  test "iss-7788 sync function return object instead of id type" do
    auto_assert(
      """
      # This file generated by `dagger_codegen`. Please DO NOT EDIT.
      defmodule Dagger.Container do
        @moduledoc "The root of the DAG."

        alias Dagger.Core.Client
        alias Dagger.Core.QueryBuilder, as: QB

        @derive Dagger.Sync
        defstruct [:query_builder, :client]

        @type t() :: %__MODULE__{}

        @doc \"""
        Forces evaluation of the pipeline in the engine.

        It doesn't run the default command if no exec has been set.
        \"""
        @spec sync(t()) :: {:ok, Dagger.Container.t()} | {:error, term()}
        def sync(%__MODULE__{} = container) do
          query_builder =
            container.query_builder |> QB.select("sync")

          with {:ok, id} <- Client.execute(container.client, query_builder) do
            {:ok,
             %Dagger.Container{
               query_builder:
                 QB.query()
                 |> QB.select("loadContainerFromID")
                 |> QB.put_arg("id", id),
               client: container.client
             }}
          end
        end
      end\
      """ <- render_type(ObjectRenderer, "test/fixtures/objects/iss-7788.json")
    )
  end

  test "return void" do
    auto_assert(
      """
      # This file generated by `dagger_codegen`. Please DO NOT EDIT.
      defmodule Dagger.FunctionCall do
        @moduledoc "An active function call."

        alias Dagger.Core.Client
        alias Dagger.Core.QueryBuilder, as: QB

        defstruct [:query_builder, :client]

        @type t() :: %__MODULE__{}

        @doc "Set the return value of the function call to the provided value."
        @spec return_value(t(), Dagger.JSON.t()) :: :ok | {:error, term()}
        def return_value(%__MODULE__{} = function_call, value) do
          query_builder =
            function_call.query_builder |> QB.select("returnValue") |> QB.put_arg("value", value)

          case Client.execute(function_call.client, query_builder) do
            {:ok, _} -> :ok
            error -> error
          end
        end
      end\
      """ <- render_type(ObjectRenderer, "test/fixtures/objects/return-void.json")
    )
  end

  test "return scalar" do
    auto_assert(
      """
      # This file generated by `dagger_codegen`. Please DO NOT EDIT.
      defmodule Dagger.TypeDef do
        @moduledoc "A definition of a parameter or return type in a Module."

        alias Dagger.Core.Client
        alias Dagger.Core.QueryBuilder, as: QB

        defstruct [:query_builder, :client]

        @type t() :: %__MODULE__{}

        @doc "The kind of type this is (e.g. primitive, list, object)."
        @spec kind(t()) :: {:ok, Dagger.TypeDefKind.t()} | {:error, term()}
        def kind(%__MODULE__{} = type_def) do
          query_builder =
            type_def.query_builder |> QB.select("kind")

          case Client.execute(type_def.client, query_builder) do
            {:ok, enum} -> {:ok, Dagger.TypeDefKind.from_string(enum)}
            error -> error
          end
        end
      end\
      """ <- render_type(ObjectRenderer, "test/fixtures/objects/return-scalar.json")
    )
  end

  test "return list of enums" do
    auto_assert(
      """
      # This file generated by `dagger_codegen`. Please DO NOT EDIT.
      defmodule Dagger.GhaSettings do
        @moduledoc "Dagger.GhaSettings"

        alias Dagger.Core.Client
        alias Dagger.Core.QueryBuilder, as: QB

        defstruct [:query_builder, :client]

        @type t() :: %__MODULE__{}

        @spec permissions(t()) :: {:ok, [Dagger.GhaPermission.t()]} | {:error, term()}
        def permissions(%__MODULE__{} = gha_settings) do
          query_builder =
            gha_settings.query_builder |> QB.select("permissions")

          case Client.execute(gha_settings.client, query_builder) do
            {:ok, enums} -> {:ok, Enum.map(enums, &Dagger.GhaPermission.from_string/1)}
            error -> error
          end
        end
      end\
      """ <- render_type(ObjectRenderer, "test/fixtures/objects/return-list-of-enums.json")
    )
  end

  test "iss 8610" do
    auto_assert(
      """
      # This file generated by `dagger_codegen`. Please DO NOT EDIT.
      defmodule Dagger.Directory do
        @moduledoc "The root of the DAG."

        alias Dagger.Core.Client
        alias Dagger.Core.QueryBuilder, as: QB

        defstruct [:query_builder, :client]

        @type t() :: %__MODULE__{}

        @doc "Retrieves this directory plus a directory written at the given path."
        @spec with_directory(t(), String.t(), Dagger.Directory.t(), [
                {:exclude, [String.t()]},
                {:include, [String.t()]}
              ]) :: Dagger.Directory.t()
        def with_directory(%__MODULE__{} = directory_, path, directory, optional_args \\\\ []) do
          query_builder =
            directory_.query_builder
            |> QB.select("withDirectory")
            |> QB.put_arg("path", path)
            |> QB.put_arg("directory", Dagger.ID.id!(directory))
            |> QB.maybe_put_arg("exclude", optional_args[:exclude])
            |> QB.maybe_put_arg("include", optional_args[:include])

          %Dagger.Directory{
            query_builder: query_builder,
            client: directory_.client
          }
        end
      end\
      """ <- render_type(ObjectRenderer, "test/fixtures/objects/iss-8610.json")
    )
  end
end
