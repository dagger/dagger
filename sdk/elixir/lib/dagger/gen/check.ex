# This file generated by `mix dagger.gen`. Please DO NOT EDIT.
defmodule Dagger.Check do
  @moduledoc "An entrypoint for tests, lints or anything that can pass/fail."
  use Dagger.QueryBuilder
  @type t() :: %__MODULE__{}
  defstruct [:selection, :client]

  (
    @doc "Documentation for this check."
    @spec description(t()) :: {:ok, Dagger.String.t() | nil} | {:error, term()}
    def description(%__MODULE__{} = check) do
      selection = select(check.selection, "description")
      execute(selection, check.client)
    end
  )

  (
    @doc "A unique identifier for this check."
    @spec id(t()) :: {:ok, Dagger.CheckID.t()} | {:error, term()}
    def id(%__MODULE__{} = check) do
      selection = select(check.selection, "id")
      execute(selection, check.client)
    end
  )

  (
    @doc "The name of the check."
    @spec name(t()) :: {:ok, Dagger.String.t()} | {:error, term()}
    def name(%__MODULE__{} = check) do
      selection = select(check.selection, "name")
      execute(selection, check.client)
    end
  )

  (
    @doc "The result of evaluating this check."
    @spec result(t()) :: Dagger.CheckResult.t()
    def result(%__MODULE__{} = check) do
      selection = select(check.selection, "result")
      %Dagger.CheckResult{selection: selection, client: check.client}
    end
  )

  (
    @doc "The subchecks of this check."
    @spec subchecks(t()) :: {:ok, [Dagger.Check.t()] | nil} | {:error, term()}
    def subchecks(%__MODULE__{} = check) do
      selection = select(check.selection, "subchecks")
      execute(selection, check.client)
    end
  )

  (
    @doc "This check with the given container used to determine the check's result.\nIf set, the container will be executed and the check success will be true\nif the container exits with a zero exit code, false otherwise.\n\n## Required Arguments\n\n* `id` -"
    @spec with_container(t(), Dagger.Container.t()) :: Dagger.Check.t()
    def with_container(%__MODULE__{} = check, container) do
      selection = select(check.selection, "withContainer")

      (
        {:ok, id} = Dagger.Container.id(container)
        selection = arg(selection, "id", id)
      )

      %Dagger.Check{selection: selection, client: check.client}
    end
  )

  (
    @doc "This check with the given description\n\n## Required Arguments\n\n* `description` -"
    @spec with_description(t(), Dagger.String.t()) :: Dagger.Check.t()
    def with_description(%__MODULE__{} = check, description) do
      selection = select(check.selection, "withDescription")
      selection = arg(selection, "description", description)
      %Dagger.Check{selection: selection, client: check.client}
    end
  )

  (
    @doc "This check with the given name\n\n## Required Arguments\n\n* `name` -"
    @spec with_name(t(), Dagger.String.t()) :: Dagger.Check.t()
    def with_name(%__MODULE__{} = check, name) do
      selection = select(check.selection, "withName")
      selection = arg(selection, "name", name)
      %Dagger.Check{selection: selection, client: check.client}
    end
  )

  (
    @doc "This check with the given subcheck\n\n## Required Arguments\n\n* `id` -"
    @spec with_subcheck(t(), Dagger.Check.t()) :: Dagger.Check.t()
    def with_subcheck(%__MODULE__{} = check, id) do
      selection = select(check.selection, "withSubcheck")
      selection = arg(selection, "id", id)
      %Dagger.Check{selection: selection, client: check.client}
    end
  )
end
