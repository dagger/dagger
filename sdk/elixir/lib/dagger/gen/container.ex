# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.Container do
  @moduledoc "An OCI-compatible container, also known as a Docker container."

  use Dagger.Core.QueryBuilder

  @derive Dagger.ID
  @derive Dagger.Sync
  defstruct [:selection, :client]

  @type t() :: %__MODULE__{}

  @doc """
  Turn the container into a Service.

  Be sure to set any exposed ports before this conversion.
  """
  @spec as_service(t()) :: Dagger.Service.t()
  def as_service(%__MODULE__{} = container) do
    selection =
      container.selection |> select("asService")

    %Dagger.Service{
      selection: selection,
      client: container.client
    }
  end

  @doc "Returns a File representing the container serialized to a tarball."
  @spec as_tarball(t(), [
          {:platform_variants, [Dagger.ContainerID.t()]},
          {:forced_compression, Dagger.ImageLayerCompression.t() | nil},
          {:media_types, Dagger.ImageMediaTypes.t() | nil}
        ]) :: Dagger.File.t()
  def as_tarball(%__MODULE__{} = container, optional_args \\ []) do
    selection =
      container.selection
      |> select("asTarball")
      |> maybe_put_arg(
        "platformVariants",
        if(optional_args[:platform_variants],
          do: Enum.map(optional_args[:platform_variants], &Dagger.ID.id!/1),
          else: nil
        )
      )
      |> maybe_put_arg("forcedCompression", optional_args[:forced_compression])
      |> maybe_put_arg("mediaTypes", optional_args[:media_types])

    %Dagger.File{
      selection: selection,
      client: container.client
    }
  end

  @doc "Initializes this container from a Dockerfile build."
  @spec build(t(), Dagger.Directory.t(), [
          {:dockerfile, String.t() | nil},
          {:target, String.t() | nil},
          {:build_args, [Dagger.BuildArg.t()]},
          {:secrets, [Dagger.SecretID.t()]}
        ]) :: Dagger.Container.t()
  def build(%__MODULE__{} = container, context, optional_args \\ []) do
    selection =
      container.selection
      |> select("build")
      |> put_arg("context", Dagger.ID.id!(context))
      |> maybe_put_arg("dockerfile", optional_args[:dockerfile])
      |> maybe_put_arg("target", optional_args[:target])
      |> maybe_put_arg("buildArgs", optional_args[:build_args])
      |> maybe_put_arg(
        "secrets",
        if(optional_args[:secrets],
          do: Enum.map(optional_args[:secrets], &Dagger.ID.id!/1),
          else: nil
        )
      )

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves default arguments for future commands."
  @spec default_args(t()) :: {:ok, [String.t()]} | {:error, term()}
  def default_args(%__MODULE__{} = container) do
    selection =
      container.selection |> select("defaultArgs")

    execute(selection, container.client)
  end

  @doc """
  Retrieves a directory at the given path.

  Mounts are included.
  """
  @spec directory(t(), String.t()) :: Dagger.Directory.t()
  def directory(%__MODULE__{} = container, path) do
    selection =
      container.selection |> select("directory") |> put_arg("path", path)

    %Dagger.Directory{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves entrypoint to be prepended to the arguments of all commands."
  @spec entrypoint(t()) :: {:ok, [String.t()]} | {:error, term()}
  def entrypoint(%__MODULE__{} = container) do
    selection =
      container.selection |> select("entrypoint")

    execute(selection, container.client)
  end

  @doc "Retrieves the value of the specified environment variable."
  @spec env_variable(t(), String.t()) :: {:ok, String.t() | nil} | {:error, term()}
  def env_variable(%__MODULE__{} = container, name) do
    selection =
      container.selection |> select("envVariable") |> put_arg("name", name)

    execute(selection, container.client)
  end

  @doc "Retrieves the list of environment variables passed to commands."
  @spec env_variables(t()) :: {:ok, [Dagger.EnvVariable.t()]} | {:error, term()}
  def env_variables(%__MODULE__{} = container) do
    selection =
      container.selection |> select("envVariables") |> select("id")

    with {:ok, items} <- execute(selection, container.client) do
      {:ok,
       for %{"id" => id} <- items do
         %Dagger.EnvVariable{
           selection:
             query()
             |> select("loadEnvVariableFromID")
             |> arg("id", id),
           client: container.client
         }
       end}
    end
  end

  @doc """
  EXPERIMENTAL API! Subject to change/removal at any time.

  Configures all available GPUs on the host to be accessible to this container.

  This currently works for Nvidia devices only.
  """
  @spec experimental_with_all_gpus(t()) :: Dagger.Container.t()
  def experimental_with_all_gpus(%__MODULE__{} = container) do
    selection =
      container.selection |> select("experimentalWithAllGPUs")

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc """
  EXPERIMENTAL API! Subject to change/removal at any time.

  Configures the provided list of devices to be accessible to this container.

  This currently works for Nvidia devices only.
  """
  @spec experimental_with_gpu(t(), [String.t()]) :: Dagger.Container.t()
  def experimental_with_gpu(%__MODULE__{} = container, devices) do
    selection =
      container.selection |> select("experimentalWithGPU") |> put_arg("devices", devices)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc """
  Writes the container as an OCI tarball to the destination file path on the host.

  Return true on success.

  It can also export platform variants.
  """
  @spec export(t(), String.t(), [
          {:platform_variants, [Dagger.ContainerID.t()]},
          {:forced_compression, Dagger.ImageLayerCompression.t() | nil},
          {:media_types, Dagger.ImageMediaTypes.t() | nil}
        ]) :: {:ok, boolean()} | {:error, term()}
  def export(%__MODULE__{} = container, path, optional_args \\ []) do
    selection =
      container.selection
      |> select("export")
      |> put_arg("path", path)
      |> maybe_put_arg(
        "platformVariants",
        if(optional_args[:platform_variants],
          do: Enum.map(optional_args[:platform_variants], &Dagger.ID.id!/1),
          else: nil
        )
      )
      |> maybe_put_arg("forcedCompression", optional_args[:forced_compression])
      |> maybe_put_arg("mediaTypes", optional_args[:media_types])

    execute(selection, container.client)
  end

  @doc """
  Retrieves the list of exposed ports.

  This includes ports already exposed by the image, even if not explicitly added with dagger.
  """
  @spec exposed_ports(t()) :: {:ok, [Dagger.Port.t()]} | {:error, term()}
  def exposed_ports(%__MODULE__{} = container) do
    selection =
      container.selection |> select("exposedPorts") |> select("id")

    with {:ok, items} <- execute(selection, container.client) do
      {:ok,
       for %{"id" => id} <- items do
         %Dagger.Port{
           selection:
             query()
             |> select("loadPortFromID")
             |> arg("id", id),
           client: container.client
         }
       end}
    end
  end

  @doc """
  Retrieves a file at the given path.

  Mounts are included.
  """
  @spec file(t(), String.t()) :: Dagger.File.t()
  def file(%__MODULE__{} = container, path) do
    selection =
      container.selection |> select("file") |> put_arg("path", path)

    %Dagger.File{
      selection: selection,
      client: container.client
    }
  end

  @doc "Initializes this container from a pulled base image."
  @spec from(t(), String.t()) :: Dagger.Container.t()
  def from(%__MODULE__{} = container, address) do
    selection =
      container.selection |> select("from") |> put_arg("address", address)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "A unique identifier for this Container."
  @spec id(t()) :: {:ok, Dagger.ContainerID.t()} | {:error, term()}
  def id(%__MODULE__{} = container) do
    selection =
      container.selection |> select("id")

    execute(selection, container.client)
  end

  @doc "The unique image reference which can only be retrieved immediately after the 'Container.From' call."
  @spec image_ref(t()) :: {:ok, String.t()} | {:error, term()}
  def image_ref(%__MODULE__{} = container) do
    selection =
      container.selection |> select("imageRef")

    execute(selection, container.client)
  end

  @doc "Reads the container from an OCI tarball."
  @spec import(t(), Dagger.File.t(), [{:tag, String.t() | nil}]) :: Dagger.Container.t()
  def import(%__MODULE__{} = container, source, optional_args \\ []) do
    selection =
      container.selection
      |> select("import")
      |> put_arg("source", Dagger.ID.id!(source))
      |> maybe_put_arg("tag", optional_args[:tag])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves the value of the specified label."
  @spec label(t(), String.t()) :: {:ok, String.t() | nil} | {:error, term()}
  def label(%__MODULE__{} = container, name) do
    selection =
      container.selection |> select("label") |> put_arg("name", name)

    execute(selection, container.client)
  end

  @doc "Retrieves the list of labels passed to container."
  @spec labels(t()) :: {:ok, [Dagger.Label.t()]} | {:error, term()}
  def labels(%__MODULE__{} = container) do
    selection =
      container.selection |> select("labels") |> select("id")

    with {:ok, items} <- execute(selection, container.client) do
      {:ok,
       for %{"id" => id} <- items do
         %Dagger.Label{
           selection:
             query()
             |> select("loadLabelFromID")
             |> arg("id", id),
           client: container.client
         }
       end}
    end
  end

  @doc "Retrieves the list of paths where a directory is mounted."
  @spec mounts(t()) :: {:ok, [String.t()]} | {:error, term()}
  def mounts(%__MODULE__{} = container) do
    selection =
      container.selection |> select("mounts")

    execute(selection, container.client)
  end

  @doc "Creates a named sub-pipeline."
  @spec pipeline(t(), String.t(), [
          {:description, String.t() | nil},
          {:labels, [Dagger.PipelineLabel.t()]}
        ]) :: Dagger.Container.t()
  def pipeline(%__MODULE__{} = container, name, optional_args \\ []) do
    selection =
      container.selection
      |> select("pipeline")
      |> put_arg("name", name)
      |> maybe_put_arg("description", optional_args[:description])
      |> maybe_put_arg("labels", optional_args[:labels])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "The platform this container executes and publishes as."
  @spec platform(t()) :: {:ok, Dagger.Platform.t()} | {:error, term()}
  def platform(%__MODULE__{} = container) do
    selection =
      container.selection |> select("platform")

    execute(selection, container.client)
  end

  @doc """
  Publishes this container as a new image to the specified address.

  Publish returns a fully qualified ref.

  It can also publish platform variants.
  """
  @spec publish(t(), String.t(), [
          {:platform_variants, [Dagger.ContainerID.t()]},
          {:forced_compression, Dagger.ImageLayerCompression.t() | nil},
          {:media_types, Dagger.ImageMediaTypes.t() | nil}
        ]) :: {:ok, String.t()} | {:error, term()}
  def publish(%__MODULE__{} = container, address, optional_args \\ []) do
    selection =
      container.selection
      |> select("publish")
      |> put_arg("address", address)
      |> maybe_put_arg(
        "platformVariants",
        if(optional_args[:platform_variants],
          do: Enum.map(optional_args[:platform_variants], &Dagger.ID.id!/1),
          else: nil
        )
      )
      |> maybe_put_arg("forcedCompression", optional_args[:forced_compression])
      |> maybe_put_arg("mediaTypes", optional_args[:media_types])

    execute(selection, container.client)
  end

  @doc "Retrieves this container's root filesystem. Mounts are not included."
  @spec rootfs(t()) :: Dagger.Directory.t()
  def rootfs(%__MODULE__{} = container) do
    selection =
      container.selection |> select("rootfs")

    %Dagger.Directory{
      selection: selection,
      client: container.client
    }
  end

  @doc """
  The error stream of the last executed command.

  Will execute default command if none is set, or error if there's no default.
  """
  @spec stderr(t()) :: {:ok, String.t()} | {:error, term()}
  def stderr(%__MODULE__{} = container) do
    selection =
      container.selection |> select("stderr")

    execute(selection, container.client)
  end

  @doc """
  The output stream of the last executed command.

  Will execute default command if none is set, or error if there's no default.
  """
  @spec stdout(t()) :: {:ok, String.t()} | {:error, term()}
  def stdout(%__MODULE__{} = container) do
    selection =
      container.selection |> select("stdout")

    execute(selection, container.client)
  end

  @doc """
  Forces evaluation of the pipeline in the engine.

  It doesn't run the default command if no exec has been set.
  """
  @spec sync(t()) :: {:ok, Dagger.ContainerID.t()} | {:error, term()}
  def sync(%__MODULE__{} = container) do
    selection =
      container.selection |> select("sync")

    execute(selection, container.client)
  end

  @doc "Return an interactive terminal for this container using its configured default terminal command if not overridden by args (or sh as a fallback default)."
  @spec terminal(t(), [
          {:cmd, [String.t()]},
          {:experimental_privileged_nesting, boolean() | nil},
          {:insecure_root_capabilities, boolean() | nil}
        ]) :: Dagger.Terminal.t()
  def terminal(%__MODULE__{} = container, optional_args \\ []) do
    selection =
      container.selection
      |> select("terminal")
      |> maybe_put_arg("cmd", optional_args[:cmd])
      |> maybe_put_arg(
        "experimentalPrivilegedNesting",
        optional_args[:experimental_privileged_nesting]
      )
      |> maybe_put_arg("insecureRootCapabilities", optional_args[:insecure_root_capabilities])

    %Dagger.Terminal{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves the user to be set for all commands."
  @spec user(t()) :: {:ok, String.t()} | {:error, term()}
  def user(%__MODULE__{} = container) do
    selection =
      container.selection |> select("user")

    execute(selection, container.client)
  end

  @doc "Configures default arguments for future commands."
  @spec with_default_args(t(), [String.t()]) :: Dagger.Container.t()
  def with_default_args(%__MODULE__{} = container, args) do
    selection =
      container.selection |> select("withDefaultArgs") |> put_arg("args", args)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Set the default command to invoke for the container's terminal API."
  @spec with_default_terminal_cmd(t(), [String.t()], [
          {:experimental_privileged_nesting, boolean() | nil},
          {:insecure_root_capabilities, boolean() | nil}
        ]) :: Dagger.Container.t()
  def with_default_terminal_cmd(%__MODULE__{} = container, args, optional_args \\ []) do
    selection =
      container.selection
      |> select("withDefaultTerminalCmd")
      |> put_arg("args", args)
      |> maybe_put_arg(
        "experimentalPrivilegedNesting",
        optional_args[:experimental_privileged_nesting]
      )
      |> maybe_put_arg("insecureRootCapabilities", optional_args[:insecure_root_capabilities])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus a directory written at the given path."
  @spec with_directory(t(), String.t(), Dagger.Directory.t(), [
          {:exclude, [String.t()]},
          {:include, [String.t()]},
          {:owner, String.t() | nil}
        ]) :: Dagger.Container.t()
  def with_directory(%__MODULE__{} = container, path, directory, optional_args \\ []) do
    selection =
      container.selection
      |> select("withDirectory")
      |> put_arg("path", path)
      |> put_arg("directory", Dagger.ID.id!(directory))
      |> maybe_put_arg("exclude", optional_args[:exclude])
      |> maybe_put_arg("include", optional_args[:include])
      |> maybe_put_arg("owner", optional_args[:owner])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container but with a different command entrypoint."
  @spec with_entrypoint(t(), [String.t()], [{:keep_default_args, boolean() | nil}]) ::
          Dagger.Container.t()
  def with_entrypoint(%__MODULE__{} = container, args, optional_args \\ []) do
    selection =
      container.selection
      |> select("withEntrypoint")
      |> put_arg("args", args)
      |> maybe_put_arg("keepDefaultArgs", optional_args[:keep_default_args])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus the given environment variable."
  @spec with_env_variable(t(), String.t(), String.t(), [{:expand, boolean() | nil}]) ::
          Dagger.Container.t()
  def with_env_variable(%__MODULE__{} = container, name, value, optional_args \\ []) do
    selection =
      container.selection
      |> select("withEnvVariable")
      |> put_arg("name", name)
      |> put_arg("value", value)
      |> maybe_put_arg("expand", optional_args[:expand])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container after executing the specified command inside it."
  @spec with_exec(t(), [String.t()], [
          {:skip_entrypoint, boolean() | nil},
          {:stdin, String.t() | nil},
          {:redirect_stdout, String.t() | nil},
          {:redirect_stderr, String.t() | nil},
          {:experimental_privileged_nesting, boolean() | nil},
          {:insecure_root_capabilities, boolean() | nil}
        ]) :: Dagger.Container.t()
  def with_exec(%__MODULE__{} = container, args, optional_args \\ []) do
    selection =
      container.selection
      |> select("withExec")
      |> put_arg("args", args)
      |> maybe_put_arg("skipEntrypoint", optional_args[:skip_entrypoint])
      |> maybe_put_arg("stdin", optional_args[:stdin])
      |> maybe_put_arg("redirectStdout", optional_args[:redirect_stdout])
      |> maybe_put_arg("redirectStderr", optional_args[:redirect_stderr])
      |> maybe_put_arg(
        "experimentalPrivilegedNesting",
        optional_args[:experimental_privileged_nesting]
      )
      |> maybe_put_arg("insecureRootCapabilities", optional_args[:insecure_root_capabilities])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc """
  Expose a network port.

  Exposed ports serve two purposes:

  - For health checks and introspection, when running services

  - For setting the EXPOSE OCI field when publishing the container
  """
  @spec with_exposed_port(t(), integer(), [
          {:protocol, Dagger.NetworkProtocol.t() | nil},
          {:description, String.t() | nil},
          {:experimental_skip_healthcheck, boolean() | nil}
        ]) :: Dagger.Container.t()
  def with_exposed_port(%__MODULE__{} = container, port, optional_args \\ []) do
    selection =
      container.selection
      |> select("withExposedPort")
      |> put_arg("port", port)
      |> maybe_put_arg("protocol", optional_args[:protocol])
      |> maybe_put_arg("description", optional_args[:description])
      |> maybe_put_arg(
        "experimentalSkipHealthcheck",
        optional_args[:experimental_skip_healthcheck]
      )

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus the contents of the given file copied to the given path."
  @spec with_file(t(), String.t(), Dagger.File.t(), [
          {:permissions, integer() | nil},
          {:owner, String.t() | nil}
        ]) :: Dagger.Container.t()
  def with_file(%__MODULE__{} = container, path, source, optional_args \\ []) do
    selection =
      container.selection
      |> select("withFile")
      |> put_arg("path", path)
      |> put_arg("source", Dagger.ID.id!(source))
      |> maybe_put_arg("permissions", optional_args[:permissions])
      |> maybe_put_arg("owner", optional_args[:owner])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus the contents of the given files copied to the given path."
  @spec with_files(t(), String.t(), [Dagger.FileID.t()], [
          {:permissions, integer() | nil},
          {:owner, String.t() | nil}
        ]) :: Dagger.Container.t()
  def with_files(%__MODULE__{} = container, path, sources, optional_args \\ []) do
    selection =
      container.selection
      |> select("withFiles")
      |> put_arg("path", path)
      |> put_arg("sources", sources)
      |> maybe_put_arg("permissions", optional_args[:permissions])
      |> maybe_put_arg("owner", optional_args[:owner])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Indicate that subsequent operations should be featured more prominently in the UI."
  @spec with_focus(t()) :: Dagger.Container.t()
  def with_focus(%__MODULE__{} = container) do
    selection =
      container.selection |> select("withFocus")

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus the given label."
  @spec with_label(t(), String.t(), String.t()) :: Dagger.Container.t()
  def with_label(%__MODULE__{} = container, name, value) do
    selection =
      container.selection
      |> select("withLabel")
      |> put_arg("name", name)
      |> put_arg("value", value)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus a cache volume mounted at the given path."
  @spec with_mounted_cache(t(), String.t(), Dagger.CacheVolume.t(), [
          {:source, Dagger.DirectoryID.t() | nil},
          {:sharing, Dagger.CacheSharingMode.t() | nil},
          {:owner, String.t() | nil}
        ]) :: Dagger.Container.t()
  def with_mounted_cache(%__MODULE__{} = container, path, cache, optional_args \\ []) do
    selection =
      container.selection
      |> select("withMountedCache")
      |> put_arg("path", path)
      |> put_arg("cache", Dagger.ID.id!(cache))
      |> maybe_put_arg("source", optional_args[:source])
      |> maybe_put_arg("sharing", optional_args[:sharing])
      |> maybe_put_arg("owner", optional_args[:owner])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus a directory mounted at the given path."
  @spec with_mounted_directory(t(), String.t(), Dagger.Directory.t(), [{:owner, String.t() | nil}]) ::
          Dagger.Container.t()
  def with_mounted_directory(%__MODULE__{} = container, path, source, optional_args \\ []) do
    selection =
      container.selection
      |> select("withMountedDirectory")
      |> put_arg("path", path)
      |> put_arg("source", Dagger.ID.id!(source))
      |> maybe_put_arg("owner", optional_args[:owner])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus a file mounted at the given path."
  @spec with_mounted_file(t(), String.t(), Dagger.File.t(), [{:owner, String.t() | nil}]) ::
          Dagger.Container.t()
  def with_mounted_file(%__MODULE__{} = container, path, source, optional_args \\ []) do
    selection =
      container.selection
      |> select("withMountedFile")
      |> put_arg("path", path)
      |> put_arg("source", Dagger.ID.id!(source))
      |> maybe_put_arg("owner", optional_args[:owner])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus a secret mounted into a file at the given path."
  @spec with_mounted_secret(t(), String.t(), Dagger.Secret.t(), [
          {:owner, String.t() | nil},
          {:mode, integer() | nil}
        ]) :: Dagger.Container.t()
  def with_mounted_secret(%__MODULE__{} = container, path, source, optional_args \\ []) do
    selection =
      container.selection
      |> select("withMountedSecret")
      |> put_arg("path", path)
      |> put_arg("source", Dagger.ID.id!(source))
      |> maybe_put_arg("owner", optional_args[:owner])
      |> maybe_put_arg("mode", optional_args[:mode])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus a temporary directory mounted at the given path."
  @spec with_mounted_temp(t(), String.t()) :: Dagger.Container.t()
  def with_mounted_temp(%__MODULE__{} = container, path) do
    selection =
      container.selection |> select("withMountedTemp") |> put_arg("path", path)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus a new file written at the given path."
  @spec with_new_file(t(), String.t(), [
          {:contents, String.t() | nil},
          {:permissions, integer() | nil},
          {:owner, String.t() | nil}
        ]) :: Dagger.Container.t()
  def with_new_file(%__MODULE__{} = container, path, optional_args \\ []) do
    selection =
      container.selection
      |> select("withNewFile")
      |> put_arg("path", path)
      |> maybe_put_arg("contents", optional_args[:contents])
      |> maybe_put_arg("permissions", optional_args[:permissions])
      |> maybe_put_arg("owner", optional_args[:owner])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container with a registry authentication for a given address."
  @spec with_registry_auth(t(), String.t(), String.t(), Dagger.Secret.t()) :: Dagger.Container.t()
  def with_registry_auth(%__MODULE__{} = container, address, username, secret) do
    selection =
      container.selection
      |> select("withRegistryAuth")
      |> put_arg("address", address)
      |> put_arg("username", username)
      |> put_arg("secret", Dagger.ID.id!(secret))

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves the container with the given directory mounted to /."
  @spec with_rootfs(t(), Dagger.Directory.t()) :: Dagger.Container.t()
  def with_rootfs(%__MODULE__{} = container, directory) do
    selection =
      container.selection
      |> select("withRootfs")
      |> put_arg("directory", Dagger.ID.id!(directory))

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus an env variable containing the given secret."
  @spec with_secret_variable(t(), String.t(), Dagger.Secret.t()) :: Dagger.Container.t()
  def with_secret_variable(%__MODULE__{} = container, name, secret) do
    selection =
      container.selection
      |> select("withSecretVariable")
      |> put_arg("name", name)
      |> put_arg("secret", Dagger.ID.id!(secret))

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc """
  Establish a runtime dependency on a service.

  The service will be started automatically when needed and detached when it is no longer needed, executing the default command if none is set.

  The service will be reachable from the container via the provided hostname alias.

  The service dependency will also convey to any files or directories produced by the container.
  """
  @spec with_service_binding(t(), String.t(), Dagger.Service.t()) :: Dagger.Container.t()
  def with_service_binding(%__MODULE__{} = container, alias, service) do
    selection =
      container.selection
      |> select("withServiceBinding")
      |> put_arg("alias", alias)
      |> put_arg("service", Dagger.ID.id!(service))

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container plus a socket forwarded to the given Unix socket path."
  @spec with_unix_socket(t(), String.t(), Dagger.Socket.t(), [{:owner, String.t() | nil}]) ::
          Dagger.Container.t()
  def with_unix_socket(%__MODULE__{} = container, path, source, optional_args \\ []) do
    selection =
      container.selection
      |> select("withUnixSocket")
      |> put_arg("path", path)
      |> put_arg("source", Dagger.ID.id!(source))
      |> maybe_put_arg("owner", optional_args[:owner])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container with a different command user."
  @spec with_user(t(), String.t()) :: Dagger.Container.t()
  def with_user(%__MODULE__{} = container, name) do
    selection =
      container.selection |> select("withUser") |> put_arg("name", name)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container with a different working directory."
  @spec with_workdir(t(), String.t()) :: Dagger.Container.t()
  def with_workdir(%__MODULE__{} = container, path) do
    selection =
      container.selection |> select("withWorkdir") |> put_arg("path", path)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container with unset default arguments for future commands."
  @spec without_default_args(t()) :: Dagger.Container.t()
  def without_default_args(%__MODULE__{} = container) do
    selection =
      container.selection |> select("withoutDefaultArgs")

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container with an unset command entrypoint."
  @spec without_entrypoint(t(), [{:keep_default_args, boolean() | nil}]) :: Dagger.Container.t()
  def without_entrypoint(%__MODULE__{} = container, optional_args \\ []) do
    selection =
      container.selection
      |> select("withoutEntrypoint")
      |> maybe_put_arg("keepDefaultArgs", optional_args[:keep_default_args])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container minus the given environment variable."
  @spec without_env_variable(t(), String.t()) :: Dagger.Container.t()
  def without_env_variable(%__MODULE__{} = container, name) do
    selection =
      container.selection |> select("withoutEnvVariable") |> put_arg("name", name)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Unexpose a previously exposed port."
  @spec without_exposed_port(t(), integer(), [{:protocol, Dagger.NetworkProtocol.t() | nil}]) ::
          Dagger.Container.t()
  def without_exposed_port(%__MODULE__{} = container, port, optional_args \\ []) do
    selection =
      container.selection
      |> select("withoutExposedPort")
      |> put_arg("port", port)
      |> maybe_put_arg("protocol", optional_args[:protocol])

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc """
  Indicate that subsequent operations should not be featured more prominently in the UI.

  This is the initial state of all containers.
  """
  @spec without_focus(t()) :: Dagger.Container.t()
  def without_focus(%__MODULE__{} = container) do
    selection =
      container.selection |> select("withoutFocus")

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container minus the given environment label."
  @spec without_label(t(), String.t()) :: Dagger.Container.t()
  def without_label(%__MODULE__{} = container, name) do
    selection =
      container.selection |> select("withoutLabel") |> put_arg("name", name)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container after unmounting everything at the given path."
  @spec without_mount(t(), String.t()) :: Dagger.Container.t()
  def without_mount(%__MODULE__{} = container, path) do
    selection =
      container.selection |> select("withoutMount") |> put_arg("path", path)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container without the registry authentication of a given address."
  @spec without_registry_auth(t(), String.t()) :: Dagger.Container.t()
  def without_registry_auth(%__MODULE__{} = container, address) do
    selection =
      container.selection |> select("withoutRegistryAuth") |> put_arg("address", address)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves this container with a previously added Unix socket removed."
  @spec without_unix_socket(t(), String.t()) :: Dagger.Container.t()
  def without_unix_socket(%__MODULE__{} = container, path) do
    selection =
      container.selection |> select("withoutUnixSocket") |> put_arg("path", path)

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc """
  Retrieves this container with an unset command user.

  Should default to root.
  """
  @spec without_user(t()) :: Dagger.Container.t()
  def without_user(%__MODULE__{} = container) do
    selection =
      container.selection |> select("withoutUser")

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc """
  Retrieves this container with an unset working directory.

  Should default to "/".
  """
  @spec without_workdir(t()) :: Dagger.Container.t()
  def without_workdir(%__MODULE__{} = container) do
    selection =
      container.selection |> select("withoutWorkdir")

    %Dagger.Container{
      selection: selection,
      client: container.client
    }
  end

  @doc "Retrieves the working directory for all commands."
  @spec workdir(t()) :: {:ok, String.t()} | {:error, term()}
  def workdir(%__MODULE__{} = container) do
    selection =
      container.selection |> select("workdir")

    execute(selection, container.client)
  end
end
