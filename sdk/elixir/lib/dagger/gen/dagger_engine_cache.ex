# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.DaggerEngineCache do
  @moduledoc "A cache storage for the Dagger engine"

  use Dagger.Core.QueryBuilder

  @derive Dagger.ID

  defstruct [:selection, :client]

  @type t() :: %__MODULE__{}

  @doc "The current set of entries in the cache"
  @spec entry_set(t()) :: Dagger.DaggerEngineCacheEntrySet.t()
  def entry_set(%__MODULE__{} = dagger_engine_cache) do
    selection =
      dagger_engine_cache.selection |> select("entrySet")

    %Dagger.DaggerEngineCacheEntrySet{
      selection: selection,
      client: dagger_engine_cache.client
    }
  end

  @doc "A unique identifier for this DaggerEngineCache."
  @spec id(t()) :: {:ok, Dagger.DaggerEngineCacheID.t()} | {:error, term()}
  def id(%__MODULE__{} = dagger_engine_cache) do
    selection =
      dagger_engine_cache.selection |> select("id")

    execute(selection, dagger_engine_cache.client)
  end

  @doc "The maximum bytes to keep in the cache without pruning, after which automatic pruning may kick in."
  @spec keep_bytes(t()) :: {:ok, integer()} | {:error, term()}
  def keep_bytes(%__MODULE__{} = dagger_engine_cache) do
    selection =
      dagger_engine_cache.selection |> select("keepBytes")

    execute(selection, dagger_engine_cache.client)
  end

  @doc "Prune the cache of releaseable entries"
  @spec prune(t()) :: {:ok, Dagger.Void.t() | nil} | {:error, term()}
  def prune(%__MODULE__{} = dagger_engine_cache) do
    selection =
      dagger_engine_cache.selection |> select("prune")

    execute(selection, dagger_engine_cache.client)
  end
end
