# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.Directory do
  @moduledoc "A directory."

  use Dagger.Core.QueryBuilder

  @derive Dagger.ID
  @derive Dagger.Sync
  defstruct [:selection, :client]

  @type t() :: %__MODULE__{}

  @doc "Load the directory as a Dagger module"
  @spec as_module(t(), [{:source_root_path, String.t() | nil}]) :: Dagger.Module.t()
  def as_module(%__MODULE__{} = directory, optional_args \\ []) do
    selection =
      directory.selection
      |> select("asModule")
      |> maybe_put_arg("sourceRootPath", optional_args[:source_root_path])

    %Dagger.Module{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Gets the difference between this directory and an another directory."
  @spec diff(t(), Dagger.Directory.t()) :: Dagger.Directory.t()
  def diff(%__MODULE__{} = directory, other) do
    selection =
      directory.selection |> select("diff") |> put_arg("other", Dagger.ID.id!(other))

    %Dagger.Directory{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Retrieves a directory at the given path."
  @spec directory(t(), String.t()) :: Dagger.Directory.t()
  def directory(%__MODULE__{} = directory, path) do
    selection =
      directory.selection |> select("directory") |> put_arg("path", path)

    %Dagger.Directory{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Builds a new Docker container from this directory."
  @spec docker_build(t(), [
          {:platform, Dagger.Platform.t() | nil},
          {:dockerfile, String.t() | nil},
          {:target, String.t() | nil},
          {:build_args, [Dagger.BuildArg.t()]},
          {:secrets, [Dagger.SecretID.t()]}
        ]) :: Dagger.Container.t()
  def docker_build(%__MODULE__{} = directory, optional_args \\ []) do
    selection =
      directory.selection
      |> select("dockerBuild")
      |> maybe_put_arg("platform", optional_args[:platform])
      |> maybe_put_arg("dockerfile", optional_args[:dockerfile])
      |> maybe_put_arg("target", optional_args[:target])
      |> maybe_put_arg("buildArgs", optional_args[:build_args])
      |> maybe_put_arg(
        "secrets",
        if(optional_args[:secrets],
          do: Enum.map(optional_args[:secrets], &Dagger.ID.id!/1),
          else: nil
        )
      )

    %Dagger.Container{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Returns a list of files and directories at the given path."
  @spec entries(t(), [{:path, String.t() | nil}]) :: {:ok, [String.t()]} | {:error, term()}
  def entries(%__MODULE__{} = directory, optional_args \\ []) do
    selection =
      directory.selection |> select("entries") |> maybe_put_arg("path", optional_args[:path])

    execute(selection, directory.client)
  end

  @doc "Writes the contents of the directory to a path on the host."
  @spec export(t(), String.t(), [{:wipe, boolean() | nil}]) :: {:ok, boolean()} | {:error, term()}
  def export(%__MODULE__{} = directory, path, optional_args \\ []) do
    selection =
      directory.selection
      |> select("export")
      |> put_arg("path", path)
      |> maybe_put_arg("wipe", optional_args[:wipe])

    execute(selection, directory.client)
  end

  @doc "Retrieves a file at the given path."
  @spec file(t(), String.t()) :: Dagger.File.t()
  def file(%__MODULE__{} = directory, path) do
    selection =
      directory.selection |> select("file") |> put_arg("path", path)

    %Dagger.File{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Returns a list of files and directories that matche the given pattern."
  @spec glob(t(), String.t()) :: {:ok, [String.t()]} | {:error, term()}
  def glob(%__MODULE__{} = directory, pattern) do
    selection =
      directory.selection |> select("glob") |> put_arg("pattern", pattern)

    execute(selection, directory.client)
  end

  @doc "A unique identifier for this Directory."
  @spec id(t()) :: {:ok, Dagger.DirectoryID.t()} | {:error, term()}
  def id(%__MODULE__{} = directory) do
    selection =
      directory.selection |> select("id")

    execute(selection, directory.client)
  end

  @doc "Creates a named sub-pipeline."
  @spec pipeline(t(), String.t(), [
          {:description, String.t() | nil},
          {:labels, [Dagger.PipelineLabel.t()]}
        ]) :: Dagger.Directory.t()
  def pipeline(%__MODULE__{} = directory, name, optional_args \\ []) do
    selection =
      directory.selection
      |> select("pipeline")
      |> put_arg("name", name)
      |> maybe_put_arg("description", optional_args[:description])
      |> maybe_put_arg("labels", optional_args[:labels])

    %Dagger.Directory{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Force evaluation in the engine."
  @spec sync(t()) :: {:ok, Dagger.DirectoryID.t()} | {:error, term()}
  def sync(%__MODULE__{} = directory) do
    selection =
      directory.selection |> select("sync")

    execute(selection, directory.client)
  end

  @doc "Retrieves this directory plus a directory written at the given path."
  @spec with_directory(t(), String.t(), Dagger.Directory.t(), [
          {:exclude, [String.t()]},
          {:include, [String.t()]}
        ]) :: Dagger.Directory.t()
  def with_directory(%__MODULE__{} = directory, path, directory, optional_args \\ []) do
    selection =
      directory.selection
      |> select("withDirectory")
      |> put_arg("path", path)
      |> put_arg("directory", Dagger.ID.id!(directory))
      |> maybe_put_arg("exclude", optional_args[:exclude])
      |> maybe_put_arg("include", optional_args[:include])

    %Dagger.Directory{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Retrieves this directory plus the contents of the given file copied to the given path."
  @spec with_file(t(), String.t(), Dagger.File.t(), [{:permissions, integer() | nil}]) ::
          Dagger.Directory.t()
  def with_file(%__MODULE__{} = directory, path, source, optional_args \\ []) do
    selection =
      directory.selection
      |> select("withFile")
      |> put_arg("path", path)
      |> put_arg("source", Dagger.ID.id!(source))
      |> maybe_put_arg("permissions", optional_args[:permissions])

    %Dagger.Directory{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Retrieves this directory plus the contents of the given files copied to the given path."
  @spec with_files(t(), String.t(), [Dagger.FileID.t()], [{:permissions, integer() | nil}]) ::
          Dagger.Directory.t()
  def with_files(%__MODULE__{} = directory, path, sources, optional_args \\ []) do
    selection =
      directory.selection
      |> select("withFiles")
      |> put_arg("path", path)
      |> put_arg("sources", sources)
      |> maybe_put_arg("permissions", optional_args[:permissions])

    %Dagger.Directory{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Retrieves this directory plus a new directory created at the given path."
  @spec with_new_directory(t(), String.t(), [{:permissions, integer() | nil}]) ::
          Dagger.Directory.t()
  def with_new_directory(%__MODULE__{} = directory, path, optional_args \\ []) do
    selection =
      directory.selection
      |> select("withNewDirectory")
      |> put_arg("path", path)
      |> maybe_put_arg("permissions", optional_args[:permissions])

    %Dagger.Directory{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Retrieves this directory plus a new file written at the given path."
  @spec with_new_file(t(), String.t(), String.t(), [{:permissions, integer() | nil}]) ::
          Dagger.Directory.t()
  def with_new_file(%__MODULE__{} = directory, path, contents, optional_args \\ []) do
    selection =
      directory.selection
      |> select("withNewFile")
      |> put_arg("path", path)
      |> put_arg("contents", contents)
      |> maybe_put_arg("permissions", optional_args[:permissions])

    %Dagger.Directory{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Retrieves this directory with all file/dir timestamps set to the given time."
  @spec with_timestamps(t(), integer()) :: Dagger.Directory.t()
  def with_timestamps(%__MODULE__{} = directory, timestamp) do
    selection =
      directory.selection |> select("withTimestamps") |> put_arg("timestamp", timestamp)

    %Dagger.Directory{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Retrieves this directory with the directory at the given path removed."
  @spec without_directory(t(), String.t()) :: Dagger.Directory.t()
  def without_directory(%__MODULE__{} = directory, path) do
    selection =
      directory.selection |> select("withoutDirectory") |> put_arg("path", path)

    %Dagger.Directory{
      selection: selection,
      client: directory.client
    }
  end

  @doc "Retrieves this directory with the file at the given path removed."
  @spec without_file(t(), String.t()) :: Dagger.Directory.t()
  def without_file(%__MODULE__{} = directory, path) do
    selection =
      directory.selection |> select("withoutFile") |> put_arg("path", path)

    %Dagger.Directory{
      selection: selection,
      client: directory.client
    }
  end
end
