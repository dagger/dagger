# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.Environment do
  @moduledoc "Dagger.Environment"

  alias Dagger.Core.Client
  alias Dagger.Core.QueryBuilder, as: QB

  @derive Dagger.ID

  defstruct [:query_builder, :client]

  @type t() :: %__MODULE__{}

  @doc "retrieve a binding by name"
  @spec binding(t(), String.t()) :: Dagger.Binding.t()
  def binding(%__MODULE__{} = environment, name) do
    query_builder =
      environment.query_builder |> QB.select("binding") |> QB.put_arg("name", name)

    %Dagger.Binding{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "return all bindings in the environment"
  @spec bindings(t()) :: {:ok, [Dagger.Binding.t()]} | {:error, term()}
  def bindings(%__MODULE__{} = environment) do
    query_builder =
      environment.query_builder |> QB.select("bindings") |> QB.select("id")

    with {:ok, items} <- Client.execute(environment.client, query_builder) do
      {:ok,
       for %{"id" => id} <- items do
         %Dagger.Binding{
           query_builder:
             QB.query()
             |> QB.select("loadBindingFromID")
             |> QB.put_arg("id", id),
           client: environment.client
         }
       end}
    end
  end

  @doc "A unique identifier for this Environment."
  @spec id(t()) :: {:ok, Dagger.EnvironmentID.t()} | {:error, term()}
  def id(%__MODULE__{} = environment) do
    query_builder =
      environment.query_builder |> QB.select("id")

    Client.execute(environment.client, query_builder)
  end

  @doc "Create or update a binding of type CacheVolume in the environment"
  @spec with_cache_volume_binding(t(), String.t(), Dagger.CacheVolume.t()) ::
          Dagger.Environment.t()
  def with_cache_volume_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withCacheVolumeBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type Container in the environment"
  @spec with_container_binding(t(), String.t(), Dagger.Container.t()) :: Dagger.Environment.t()
  def with_container_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withContainerBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type CurrentModule in the environment"
  @spec with_current_module_binding(t(), String.t(), Dagger.CurrentModule.t()) ::
          Dagger.Environment.t()
  def with_current_module_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withCurrentModuleBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type Directory in the environment"
  @spec with_directory_binding(t(), String.t(), Dagger.Directory.t()) :: Dagger.Environment.t()
  def with_directory_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withDirectoryBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type EnumTypeDef in the environment"
  @spec with_enum_type_def_binding(t(), String.t(), Dagger.EnumTypeDef.t()) ::
          Dagger.Environment.t()
  def with_enum_type_def_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withEnumTypeDefBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type EnumValueTypeDef in the environment"
  @spec with_enum_value_type_def_binding(t(), String.t(), Dagger.EnumValueTypeDef.t()) ::
          Dagger.Environment.t()
  def with_enum_value_type_def_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withEnumValueTypeDefBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type Environment in the environment"
  @spec with_environment_binding(t(), String.t(), Dagger.Environment.t()) ::
          Dagger.Environment.t()
  def with_environment_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withEnvironmentBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type Error in the environment"
  @spec with_error_binding(t(), String.t(), Dagger.Error.t()) :: Dagger.Environment.t()
  def with_error_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withErrorBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type ErrorValue in the environment"
  @spec with_error_value_binding(t(), String.t(), Dagger.ErrorValue.t()) :: Dagger.Environment.t()
  def with_error_value_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withErrorValueBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type FieldTypeDef in the environment"
  @spec with_field_type_def_binding(t(), String.t(), Dagger.FieldTypeDef.t()) ::
          Dagger.Environment.t()
  def with_field_type_def_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withFieldTypeDefBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type File in the environment"
  @spec with_file_binding(t(), String.t(), Dagger.File.t()) :: Dagger.Environment.t()
  def with_file_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withFileBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type FunctionArg in the environment"
  @spec with_function_arg_binding(t(), String.t(), Dagger.FunctionArg.t()) ::
          Dagger.Environment.t()
  def with_function_arg_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withFunctionArgBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type Function in the environment"
  @spec with_function_binding(t(), String.t(), Dagger.Function.t()) :: Dagger.Environment.t()
  def with_function_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withFunctionBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type FunctionCallArgValue in the environment"
  @spec with_function_call_arg_value_binding(t(), String.t(), Dagger.FunctionCallArgValue.t()) ::
          Dagger.Environment.t()
  def with_function_call_arg_value_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withFunctionCallArgValueBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type FunctionCall in the environment"
  @spec with_function_call_binding(t(), String.t(), Dagger.FunctionCall.t()) ::
          Dagger.Environment.t()
  def with_function_call_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withFunctionCallBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type GeneratedCode in the environment"
  @spec with_generated_code_binding(t(), String.t(), Dagger.GeneratedCode.t()) ::
          Dagger.Environment.t()
  def with_generated_code_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withGeneratedCodeBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type GitRef in the environment"
  @spec with_git_ref_binding(t(), String.t(), Dagger.GitRef.t()) :: Dagger.Environment.t()
  def with_git_ref_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withGitRefBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type GitRepository in the environment"
  @spec with_git_repository_binding(t(), String.t(), Dagger.GitRepository.t()) ::
          Dagger.Environment.t()
  def with_git_repository_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withGitRepositoryBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type InputTypeDef in the environment"
  @spec with_input_type_def_binding(t(), String.t(), Dagger.InputTypeDef.t()) ::
          Dagger.Environment.t()
  def with_input_type_def_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withInputTypeDefBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type InterfaceTypeDef in the environment"
  @spec with_interface_type_def_binding(t(), String.t(), Dagger.InterfaceTypeDef.t()) ::
          Dagger.Environment.t()
  def with_interface_type_def_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withInterfaceTypeDefBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type LLM in the environment"
  @spec with_llm_binding(t(), String.t(), Dagger.LLM.t()) :: Dagger.Environment.t()
  def with_llm_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withLLMBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type LLMTokenUsage in the environment"
  @spec with_llm_token_usage_binding(t(), String.t(), Dagger.LLMTokenUsage.t()) ::
          Dagger.Environment.t()
  def with_llm_token_usage_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withLLMTokenUsageBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type LLMVariable in the environment"
  @spec with_llm_variable_binding(t(), String.t(), Dagger.LLMVariable.t()) ::
          Dagger.Environment.t()
  def with_llm_variable_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withLLMVariableBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type ListTypeDef in the environment"
  @spec with_list_type_def_binding(t(), String.t(), Dagger.ListTypeDef.t()) ::
          Dagger.Environment.t()
  def with_list_type_def_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withListTypeDefBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type Module in the environment"
  @spec with_module_binding(t(), String.t(), Dagger.Module.t()) :: Dagger.Environment.t()
  def with_module_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withModuleBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type ModuleConfigClient in the environment"
  @spec with_module_config_client_binding(t(), String.t(), Dagger.ModuleConfigClient.t()) ::
          Dagger.Environment.t()
  def with_module_config_client_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withModuleConfigClientBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type ModuleSource in the environment"
  @spec with_module_source_binding(t(), String.t(), Dagger.ModuleSource.t()) ::
          Dagger.Environment.t()
  def with_module_source_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withModuleSourceBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type ObjectTypeDef in the environment"
  @spec with_object_type_def_binding(t(), String.t(), Dagger.ObjectTypeDef.t()) ::
          Dagger.Environment.t()
  def with_object_type_def_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withObjectTypeDefBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type SDKConfig in the environment"
  @spec with_sdk_config_binding(t(), String.t(), Dagger.SDKConfig.t()) :: Dagger.Environment.t()
  def with_sdk_config_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withSDKConfigBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type ScalarTypeDef in the environment"
  @spec with_scalar_type_def_binding(t(), String.t(), Dagger.ScalarTypeDef.t()) ::
          Dagger.Environment.t()
  def with_scalar_type_def_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withScalarTypeDefBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type Secret in the environment"
  @spec with_secret_binding(t(), String.t(), Dagger.Secret.t()) :: Dagger.Environment.t()
  def with_secret_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withSecretBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type Service in the environment"
  @spec with_service_binding(t(), String.t(), Dagger.Service.t()) :: Dagger.Environment.t()
  def with_service_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withServiceBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type Socket in the environment"
  @spec with_socket_binding(t(), String.t(), Dagger.Socket.t()) :: Dagger.Environment.t()
  def with_socket_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withSocketBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type SourceMap in the environment"
  @spec with_source_map_binding(t(), String.t(), Dagger.SourceMap.t()) :: Dagger.Environment.t()
  def with_source_map_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withSourceMapBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type Terminal in the environment"
  @spec with_terminal_binding(t(), String.t(), Dagger.Terminal.t()) :: Dagger.Environment.t()
  def with_terminal_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withTerminalBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end

  @doc "Create or update a binding of type TypeDef in the environment"
  @spec with_type_def_binding(t(), String.t(), Dagger.TypeDef.t()) :: Dagger.Environment.t()
  def with_type_def_binding(%__MODULE__{} = environment, name, value) do
    query_builder =
      environment.query_builder
      |> QB.select("withTypeDefBinding")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.Environment{
      query_builder: query_builder,
      client: environment.client
    }
  end
end

defimpl Jason.Encoder, for: Dagger.Environment do
  def encode(environment, opts) do
    {:ok, id} = Dagger.Environment.id(environment)
    Jason.Encode.string(id, opts)
  end
end

defimpl Nestru.Decoder, for: Dagger.Environment do
  def decode_fields_hint(_struct, _context, id) do
    {:ok, Dagger.Client.load_environment_from_id(Dagger.Global.dag(), id)}
  end
end
