# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.FunctionCall do
  @moduledoc "An active function call."

  use Dagger.Core.QueryBuilder

  @derive Dagger.ID

  defstruct [:selection, :client]

  @type t() :: %__MODULE__{}

  @doc "A unique identifier for this FunctionCall."
  @spec id(t()) :: {:ok, Dagger.FunctionCallID.t()} | {:error, term()}
  def id(%__MODULE__{} = function_call) do
    selection =
      function_call.selection |> select("id")

    execute(selection, function_call.client)
  end

  @doc "The argument values the function is being invoked with."
  @spec input_args(t()) :: {:ok, [Dagger.FunctionCallArgValue.t()]} | {:error, term()}
  def input_args(%__MODULE__{} = function_call) do
    selection =
      function_call.selection |> select("inputArgs") |> select("id")

    with {:ok, items} <- execute(selection, function_call.client) do
      {:ok,
       for %{"id" => id} <- items do
         %Dagger.FunctionCallArgValue{
           selection:
             query()
             |> select("loadFunctionCallArgValueFromID")
             |> arg("id", id),
           client: function_call.client
         }
       end}
    end
  end

  @doc "The name of the function being called."
  @spec name(t()) :: {:ok, String.t()} | {:error, term()}
  def name(%__MODULE__{} = function_call) do
    selection =
      function_call.selection |> select("name")

    execute(selection, function_call.client)
  end

  @doc "The value of the parent object of the function being called. If the function is top-level to the module, this is always an empty object."
  @spec parent(t()) :: {:ok, Dagger.JSON.t()} | {:error, term()}
  def parent(%__MODULE__{} = function_call) do
    selection =
      function_call.selection |> select("parent")

    execute(selection, function_call.client)
  end

  @doc "The name of the parent object of the function being called. If the function is top-level to the module, this is the name of the module."
  @spec parent_name(t()) :: {:ok, String.t()} | {:error, term()}
  def parent_name(%__MODULE__{} = function_call) do
    selection =
      function_call.selection |> select("parentName")

    execute(selection, function_call.client)
  end

  @doc "Set the return value of the function call to the provided value."
  @spec return_value(t(), Dagger.JSON.t()) :: {:ok, Dagger.Void.t() | nil} | {:error, term()}
  def return_value(%__MODULE__{} = function_call, value) do
    selection =
      function_call.selection |> select("returnValue") |> put_arg("value", value)

    execute(selection, function_call.client)
  end
end
