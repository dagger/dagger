# This file generated by `mix dagger.gen`. Please DO NOT EDIT.
defmodule Dagger.FunctionCall do
  @moduledoc "FunctionCall"
  use Dagger.QueryBuilder
  @type t() :: %__MODULE__{}
  defstruct [:selection, :client]

  (
    @doc "The argument values the function is being invoked with."
    @spec input_args(t()) :: {:ok, [Dagger.FunctionCallArgValue.t()] | nil} | {:error, term()}
    def input_args(%__MODULE__{} = function_call) do
      selection = select(function_call.selection, "inputArgs")
      execute(selection, function_call.client)
    end
  )

  (
    @doc "The name of the function being called."
    @spec name(t()) :: {:ok, Dagger.String.t()} | {:error, term()}
    def name(%__MODULE__{} = function_call) do
      selection = select(function_call.selection, "name")
      execute(selection, function_call.client)
    end
  )

  (
    @doc "The value of the parent object of the function being called.\nIf the function is \"top-level\" to the module, this is always an empty object."
    @spec parent(t()) :: {:ok, Dagger.JSON.t()} | {:error, term()}
    def parent(%__MODULE__{} = function_call) do
      selection = select(function_call.selection, "parent")
      execute(selection, function_call.client)
    end
  )

  (
    @doc "The name of the parent object of the function being called.\nIf the function is \"top-level\" to the module, this is the name of the module."
    @spec parent_name(t()) :: {:ok, Dagger.String.t()} | {:error, term()}
    def parent_name(%__MODULE__{} = function_call) do
      selection = select(function_call.selection, "parentName")
      execute(selection, function_call.client)
    end
  )

  (
    @doc "Set the return value of the function call to the provided value.\nThe value should be a string of the JSON serialization of the return value.\n\n## Required Arguments\n\n* `value` -"
    @spec return_value(t(), Dagger.JSON.t()) :: {:ok, Dagger.Void.t() | nil} | {:error, term()}
    def return_value(%__MODULE__{} = function_call, value) do
      selection = select(function_call.selection, "returnValue")
      selection = arg(selection, "value", value)
      execute(selection, function_call.client)
    end
  )
end
