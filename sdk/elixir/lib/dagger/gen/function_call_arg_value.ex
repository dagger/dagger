# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.FunctionCallArgValue do
  @moduledoc "A value passed as a named argument to a function call."

  use Dagger.Core.QueryBuilder

  @derive Dagger.ID

  defstruct [:selection, :client]

  @type t() :: %__MODULE__{}

  @doc "A unique identifier for this FunctionCallArgValue."
  @spec id(t()) :: {:ok, Dagger.FunctionCallArgValueID.t()} | {:error, term()}
  def id(%__MODULE__{} = function_call_arg_value) do
    selection =
      function_call_arg_value.selection |> select("id")

    execute(selection, function_call_arg_value.client)
  end

  @doc "The name of the argument."
  @spec name(t()) :: {:ok, String.t()} | {:error, term()}
  def name(%__MODULE__{} = function_call_arg_value) do
    selection =
      function_call_arg_value.selection |> select("name")

    execute(selection, function_call_arg_value.client)
  end

  @doc "The value of the argument represented as a JSON serialized string."
  @spec value(t()) :: {:ok, Dagger.JSON.t()} | {:error, term()}
  def value(%__MODULE__{} = function_call_arg_value) do
    selection =
      function_call_arg_value.selection |> select("value")

    execute(selection, function_call_arg_value.client)
  end
end
