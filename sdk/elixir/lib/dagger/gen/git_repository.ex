# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.GitRepository do
  @moduledoc "A git repository."

  use Dagger.Core.QueryBuilder

  @derive Dagger.ID

  defstruct [:selection, :client]

  @type t() :: %__MODULE__{}

  @doc "Returns details of a branch."
  @spec branch(t(), String.t()) :: Dagger.GitRef.t()
  def branch(%__MODULE__{} = git_repository, name) do
    selection =
      git_repository.selection |> select("branch") |> put_arg("name", name)

    %Dagger.GitRef{
      selection: selection,
      client: git_repository.client
    }
  end

  @doc "Returns details of a commit."
  @spec commit(t(), String.t()) :: Dagger.GitRef.t()
  def commit(%__MODULE__{} = git_repository, id) do
    selection =
      git_repository.selection |> select("commit") |> put_arg("id", id)

    %Dagger.GitRef{
      selection: selection,
      client: git_repository.client
    }
  end

  @doc "Returns details for HEAD."
  @spec head(t()) :: Dagger.GitRef.t()
  def head(%__MODULE__{} = git_repository) do
    selection =
      git_repository.selection |> select("head")

    %Dagger.GitRef{
      selection: selection,
      client: git_repository.client
    }
  end

  @doc "A unique identifier for this GitRepository."
  @spec id(t()) :: {:ok, Dagger.GitRepositoryID.t()} | {:error, term()}
  def id(%__MODULE__{} = git_repository) do
    selection =
      git_repository.selection |> select("id")

    execute(selection, git_repository.client)
  end

  @doc "Returns details of a ref."
  @spec ref(t(), String.t()) :: Dagger.GitRef.t()
  def ref(%__MODULE__{} = git_repository, name) do
    selection =
      git_repository.selection |> select("ref") |> put_arg("name", name)

    %Dagger.GitRef{
      selection: selection,
      client: git_repository.client
    }
  end

  @doc "Returns details of a tag."
  @spec tag(t(), String.t()) :: Dagger.GitRef.t()
  def tag(%__MODULE__{} = git_repository, name) do
    selection =
      git_repository.selection |> select("tag") |> put_arg("name", name)

    %Dagger.GitRef{
      selection: selection,
      client: git_repository.client
    }
  end
end
