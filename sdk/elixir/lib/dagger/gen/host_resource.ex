# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.HostResource do
  @moduledoc """
  A resource to be loaded from the host using a standardized address.
  May be converted to a directory, container, secret, file...
  """

  use Dagger.Core.Base, kind: :object, name: "HostResource"

  alias Dagger.Core.Client
  alias Dagger.Core.QueryBuilder, as: QB

  @derive Dagger.ID

  defstruct [:query_builder, :client]

  @type t() :: %__MODULE__{}

  @doc """
  Load the host resource as a container.
  """
  @spec as_container(t()) :: Dagger.Container.t()
  def as_container(%__MODULE__{} = host_resource) do
    query_builder =
      host_resource.query_builder |> QB.select("asContainer")

    %Dagger.Container{
      query_builder: query_builder,
      client: host_resource.client
    }
  end

  @doc """
  Load the host resource as a directory.
  """
  @spec as_directory(t(), [
          {:exclude, [String.t()]},
          {:include, [String.t()]},
          {:no_cache, boolean() | nil}
        ]) :: Dagger.Directory.t()
  def as_directory(%__MODULE__{} = host_resource, optional_args \\ []) do
    query_builder =
      host_resource.query_builder
      |> QB.select("asDirectory")
      |> QB.maybe_put_arg("exclude", optional_args[:exclude])
      |> QB.maybe_put_arg("include", optional_args[:include])
      |> QB.maybe_put_arg("noCache", optional_args[:no_cache])

    %Dagger.Directory{
      query_builder: query_builder,
      client: host_resource.client
    }
  end

  @doc """
  Load the host resource as a file.
  """
  @spec as_file(t(), [
          {:exclude, [String.t()]},
          {:include, [String.t()]},
          {:no_cache, boolean() | nil}
        ]) :: Dagger.File.t()
  def as_file(%__MODULE__{} = host_resource, optional_args \\ []) do
    query_builder =
      host_resource.query_builder
      |> QB.select("asFile")
      |> QB.maybe_put_arg("exclude", optional_args[:exclude])
      |> QB.maybe_put_arg("include", optional_args[:include])
      |> QB.maybe_put_arg("noCache", optional_args[:no_cache])

    %Dagger.File{
      query_builder: query_builder,
      client: host_resource.client
    }
  end

  @doc """
  Load the host resource as a git ref (branch, tag or commit)
  """
  @spec as_git_ref(t()) :: Dagger.GitRef.t()
  def as_git_ref(%__MODULE__{} = host_resource) do
    query_builder =
      host_resource.query_builder |> QB.select("asGitRef")

    %Dagger.GitRef{
      query_builder: query_builder,
      client: host_resource.client
    }
  end

  @doc """
  Load the host resource as a git repository.
  """
  @spec as_git_repository(t()) :: Dagger.GitRepository.t()
  def as_git_repository(%__MODULE__{} = host_resource) do
    query_builder =
      host_resource.query_builder |> QB.select("asGitRepository")

    %Dagger.GitRepository{
      query_builder: query_builder,
      client: host_resource.client
    }
  end

  @doc """
  Load the host resource as a secret.
  """
  @spec as_secret(t()) :: Dagger.Secret.t()
  def as_secret(%__MODULE__{} = host_resource) do
    query_builder =
      host_resource.query_builder |> QB.select("asSecret")

    %Dagger.Secret{
      query_builder: query_builder,
      client: host_resource.client
    }
  end

  @doc """
  Load the host resource as a service.
  """
  @spec as_service(t()) :: Dagger.Service.t()
  def as_service(%__MODULE__{} = host_resource) do
    query_builder =
      host_resource.query_builder |> QB.select("asService")

    %Dagger.Service{
      query_builder: query_builder,
      client: host_resource.client
    }
  end

  @doc """
  A unique identifier for this HostResource.
  """
  @spec id(t()) :: {:ok, Dagger.HostResourceID.t()} | {:error, term()}
  def id(%__MODULE__{} = host_resource) do
    query_builder =
      host_resource.query_builder |> QB.select("id")

    Client.execute(host_resource.client, query_builder)
  end
end

defimpl Jason.Encoder, for: Dagger.HostResource do
  def encode(host_resource, opts) do
    {:ok, id} = Dagger.HostResource.id(host_resource)
    Jason.Encode.string(id, opts)
  end
end

defimpl Nestru.Decoder, for: Dagger.HostResource do
  def decode_fields_hint(_struct, _context, id) do
    {:ok, Dagger.Client.load_host_resource_from_id(Dagger.Global.dag(), id)}
  end
end
