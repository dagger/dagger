# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.InputTypeDef do
  @moduledoc """
  A graphql input type, which is essentially just a group of named args.
  This is currently only used to represent pre-existing usage of graphql input types
  in the core API. It is not used by user modules and shouldn't ever be as user
  module accept input objects via their id rather than graphql input types.
  """

  use Dagger.Core.QueryBuilder

  @derive Dagger.ID

  defstruct [:selection, :client]

  @type t() :: %__MODULE__{}

  @doc "Static fields defined on this input object, if any."
  @spec fields(t()) :: {:ok, [Dagger.FieldTypeDef.t()]} | {:error, term()}
  def fields(%__MODULE__{} = input_type_def) do
    selection =
      input_type_def.selection |> select("fields") |> select("id")

    with {:ok, items} <- execute(selection, input_type_def.client) do
      {:ok,
       for %{"id" => id} <- items do
         %Dagger.FieldTypeDef{
           selection:
             query()
             |> select("loadFieldTypeDefFromID")
             |> arg("id", id),
           client: input_type_def.client
         }
       end}
    end
  end

  @doc "A unique identifier for this InputTypeDef."
  @spec id(t()) :: {:ok, Dagger.InputTypeDefID.t()} | {:error, term()}
  def id(%__MODULE__{} = input_type_def) do
    selection =
      input_type_def.selection |> select("id")

    execute(selection, input_type_def.client)
  end

  @doc "The name of the input object."
  @spec name(t()) :: {:ok, String.t()} | {:error, term()}
  def name(%__MODULE__{} = input_type_def) do
    selection =
      input_type_def.selection |> select("name")

    execute(selection, input_type_def.client)
  end
end
