# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.ListTypeDef do
  @moduledoc "A definition of a list type in a Module."

  use Dagger.Core.QueryBuilder

  @derive Dagger.ID

  defstruct [:selection, :client]

  @type t() :: %__MODULE__{}

  @doc "The type of the elements in the list."
  @spec element_type_def(t()) :: Dagger.TypeDef.t()
  def element_type_def(%__MODULE__{} = list_type_def) do
    selection =
      list_type_def.selection |> select("elementTypeDef")

    %Dagger.TypeDef{
      selection: selection,
      client: list_type_def.client
    }
  end

  @doc "A unique identifier for this ListTypeDef."
  @spec id(t()) :: {:ok, Dagger.ListTypeDefID.t()} | {:error, term()}
  def id(%__MODULE__{} = list_type_def) do
    selection =
      list_type_def.selection |> select("id")

    execute(selection, list_type_def.client)
  end
end
