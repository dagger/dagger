# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.LLM do
  @moduledoc "Dagger.LLM"

  alias Dagger.Core.Client
  alias Dagger.Core.QueryBuilder, as: QB

  @derive Dagger.ID
  @derive Dagger.Sync
  defstruct [:query_builder, :client]

  @type t() :: %__MODULE__{}
  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type CacheVolume"
  @spec cache_volume(t()) :: Dagger.CacheVolume.t()
  def cache_volume(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("cacheVolume")

    %Dagger.CacheVolume{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type Container"
  @spec container(t()) :: Dagger.Container.t()
  def container(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("container")

    %Dagger.Container{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type CurrentModule"
  @spec current_module(t()) :: Dagger.CurrentModule.t()
  def current_module(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("currentModule")

    %Dagger.CurrentModule{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type Directory"
  @spec directory(t()) :: Dagger.Directory.t()
  def directory(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("directory")

    %Dagger.Directory{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type EnumTypeDef"
  @spec enum_type_def(t()) :: Dagger.EnumTypeDef.t()
  def enum_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("enumTypeDef")

    %Dagger.EnumTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type EnumValueTypeDef"
  @spec enum_value_type_def(t()) :: Dagger.EnumValueTypeDef.t()
  def enum_value_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("enumValueTypeDef")

    %Dagger.EnumValueTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type Error"
  @spec error(t()) :: Dagger.Error.t()
  def error(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("error")

    %Dagger.Error{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type ErrorValue"
  @spec error_value(t()) :: Dagger.ErrorValue.t()
  def error_value(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("errorValue")

    %Dagger.ErrorValue{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type FieldTypeDef"
  @spec field_type_def(t()) :: Dagger.FieldTypeDef.t()
  def field_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("fieldTypeDef")

    %Dagger.FieldTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type File"
  @spec file(t()) :: Dagger.File.t()
  def file(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("file")

    %Dagger.File{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type Function"
  @spec function(t()) :: Dagger.Function.t()
  def function(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("function")

    %Dagger.Function{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type FunctionArg"
  @spec function_arg(t()) :: Dagger.FunctionArg.t()
  def function_arg(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("functionArg")

    %Dagger.FunctionArg{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type FunctionCall"
  @spec function_call(t()) :: Dagger.FunctionCall.t()
  def function_call(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("functionCall")

    %Dagger.FunctionCall{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type FunctionCallArgValue"
  @spec function_call_arg_value(t()) :: Dagger.FunctionCallArgValue.t()
  def function_call_arg_value(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("functionCallArgValue")

    %Dagger.FunctionCallArgValue{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type GeneratedCode"
  @spec generated_code(t()) :: Dagger.GeneratedCode.t()
  def generated_code(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("generatedCode")

    %Dagger.GeneratedCode{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type CacheVolume"
  @spec get_cache_volume(t(), String.t()) :: Dagger.CacheVolume.t()
  def get_cache_volume(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getCacheVolume") |> QB.put_arg("name", name)

    %Dagger.CacheVolume{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type Container"
  @spec get_container(t(), String.t()) :: Dagger.Container.t()
  def get_container(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getContainer") |> QB.put_arg("name", name)

    %Dagger.Container{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type CurrentModule"
  @spec get_current_module(t(), String.t()) :: Dagger.CurrentModule.t()
  def get_current_module(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getCurrentModule") |> QB.put_arg("name", name)

    %Dagger.CurrentModule{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type Directory"
  @spec get_directory(t(), String.t()) :: Dagger.Directory.t()
  def get_directory(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getDirectory") |> QB.put_arg("name", name)

    %Dagger.Directory{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type EnumTypeDef"
  @spec get_enum_type_def(t(), String.t()) :: Dagger.EnumTypeDef.t()
  def get_enum_type_def(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getEnumTypeDef") |> QB.put_arg("name", name)

    %Dagger.EnumTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type EnumValueTypeDef"
  @spec get_enum_value_type_def(t(), String.t()) :: Dagger.EnumValueTypeDef.t()
  def get_enum_value_type_def(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getEnumValueTypeDef") |> QB.put_arg("name", name)

    %Dagger.EnumValueTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type Error"
  @spec get_error(t(), String.t()) :: Dagger.Error.t()
  def get_error(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getError") |> QB.put_arg("name", name)

    %Dagger.Error{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type ErrorValue"
  @spec get_error_value(t(), String.t()) :: Dagger.ErrorValue.t()
  def get_error_value(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getErrorValue") |> QB.put_arg("name", name)

    %Dagger.ErrorValue{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type FieldTypeDef"
  @spec get_field_type_def(t(), String.t()) :: Dagger.FieldTypeDef.t()
  def get_field_type_def(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getFieldTypeDef") |> QB.put_arg("name", name)

    %Dagger.FieldTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type File"
  @spec get_file(t(), String.t()) :: Dagger.File.t()
  def get_file(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getFile") |> QB.put_arg("name", name)

    %Dagger.File{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type Function"
  @spec get_function(t(), String.t()) :: Dagger.Function.t()
  def get_function(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getFunction") |> QB.put_arg("name", name)

    %Dagger.Function{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type FunctionArg"
  @spec get_function_arg(t(), String.t()) :: Dagger.FunctionArg.t()
  def get_function_arg(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getFunctionArg") |> QB.put_arg("name", name)

    %Dagger.FunctionArg{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type FunctionCall"
  @spec get_function_call(t(), String.t()) :: Dagger.FunctionCall.t()
  def get_function_call(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getFunctionCall") |> QB.put_arg("name", name)

    %Dagger.FunctionCall{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type FunctionCallArgValue"
  @spec get_function_call_arg_value(t(), String.t()) :: Dagger.FunctionCallArgValue.t()
  def get_function_call_arg_value(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getFunctionCallArgValue") |> QB.put_arg("name", name)

    %Dagger.FunctionCallArgValue{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type GeneratedCode"
  @spec get_generated_code(t(), String.t()) :: Dagger.GeneratedCode.t()
  def get_generated_code(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getGeneratedCode") |> QB.put_arg("name", name)

    %Dagger.GeneratedCode{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type GitRef"
  @spec get_git_ref(t(), String.t()) :: Dagger.GitRef.t()
  def get_git_ref(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getGitRef") |> QB.put_arg("name", name)

    %Dagger.GitRef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type GitRepository"
  @spec get_git_repository(t(), String.t()) :: Dagger.GitRepository.t()
  def get_git_repository(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getGitRepository") |> QB.put_arg("name", name)

    %Dagger.GitRepository{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type InputTypeDef"
  @spec get_input_type_def(t(), String.t()) :: Dagger.InputTypeDef.t()
  def get_input_type_def(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getInputTypeDef") |> QB.put_arg("name", name)

    %Dagger.InputTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type InterfaceTypeDef"
  @spec get_interface_type_def(t(), String.t()) :: Dagger.InterfaceTypeDef.t()
  def get_interface_type_def(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getInterfaceTypeDef") |> QB.put_arg("name", name)

    %Dagger.InterfaceTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type LLM"
  @spec get_llm(t(), String.t()) :: Dagger.LLM.t()
  def get_llm(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getLLM") |> QB.put_arg("name", name)

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type ListTypeDef"
  @spec get_list_type_def(t(), String.t()) :: Dagger.ListTypeDef.t()
  def get_list_type_def(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getListTypeDef") |> QB.put_arg("name", name)

    %Dagger.ListTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type Module"
  @spec get_module(t(), String.t()) :: Dagger.Module.t()
  def get_module(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getModule") |> QB.put_arg("name", name)

    %Dagger.Module{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type ModuleConfigClient"
  @spec get_module_config_client(t(), String.t()) :: Dagger.ModuleConfigClient.t()
  def get_module_config_client(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getModuleConfigClient") |> QB.put_arg("name", name)

    %Dagger.ModuleConfigClient{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type ModuleSource"
  @spec get_module_source(t(), String.t()) :: Dagger.ModuleSource.t()
  def get_module_source(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getModuleSource") |> QB.put_arg("name", name)

    %Dagger.ModuleSource{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type ObjectTypeDef"
  @spec get_object_type_def(t(), String.t()) :: Dagger.ObjectTypeDef.t()
  def get_object_type_def(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getObjectTypeDef") |> QB.put_arg("name", name)

    %Dagger.ObjectTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type SDKConfig"
  @spec get_sdk_config(t(), String.t()) :: Dagger.SDKConfig.t() | nil
  def get_sdk_config(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getSDKConfig") |> QB.put_arg("name", name)

    %Dagger.SDKConfig{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type ScalarTypeDef"
  @spec get_scalar_type_def(t(), String.t()) :: Dagger.ScalarTypeDef.t()
  def get_scalar_type_def(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getScalarTypeDef") |> QB.put_arg("name", name)

    %Dagger.ScalarTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type Secret"
  @spec get_secret(t(), String.t()) :: Dagger.Secret.t()
  def get_secret(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getSecret") |> QB.put_arg("name", name)

    %Dagger.Secret{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type Service"
  @spec get_service(t(), String.t()) :: Dagger.Service.t()
  def get_service(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getService") |> QB.put_arg("name", name)

    %Dagger.Service{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type Socket"
  @spec get_socket(t(), String.t()) :: Dagger.Socket.t()
  def get_socket(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getSocket") |> QB.put_arg("name", name)

    %Dagger.Socket{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type SourceMap"
  @spec get_source_map(t(), String.t()) :: Dagger.SourceMap.t()
  def get_source_map(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getSourceMap") |> QB.put_arg("name", name)

    %Dagger.SourceMap{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Get a string variable from the LLM's environment"
  @spec get_string(t(), String.t()) :: {:ok, String.t()} | {:error, term()}
  def get_string(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getString") |> QB.put_arg("name", name)

    Client.execute(llm.client, query_builder)
  end

  @doc "Retrieve a variable in the llm environment, of type Terminal"
  @spec get_terminal(t(), String.t()) :: Dagger.Terminal.t()
  def get_terminal(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getTerminal") |> QB.put_arg("name", name)

    %Dagger.Terminal{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Retrieve a variable in the llm environment, of type TypeDef"
  @spec get_type_def(t(), String.t()) :: Dagger.TypeDef.t()
  def get_type_def(%__MODULE__{} = llm, name) do
    query_builder =
      llm.query_builder |> QB.select("getTypeDef") |> QB.put_arg("name", name)

    %Dagger.TypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type GitRef"
  @spec git_ref(t()) :: Dagger.GitRef.t()
  def git_ref(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("gitRef")

    %Dagger.GitRef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type GitRepository"
  @spec git_repository(t()) :: Dagger.GitRepository.t()
  def git_repository(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("gitRepository")

    %Dagger.GitRepository{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "return the llm message history"
  @spec history(t()) :: {:ok, [String.t()]} | {:error, term()}
  def history(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("history")

    Client.execute(llm.client, query_builder)
  end

  @doc "return the raw llm message history as json"
  @spec history_json(t()) :: {:ok, String.t()} | {:error, term()}
  def history_json(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("historyJSON")

    Client.execute(llm.client, query_builder)
  end

  @doc "A unique identifier for this LLM."
  @spec id(t()) :: {:ok, Dagger.LLMID.t()} | {:error, term()}
  def id(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("id")

    Client.execute(llm.client, query_builder)
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type InputTypeDef"
  @spec input_type_def(t()) :: Dagger.InputTypeDef.t()
  def input_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("inputTypeDef")

    %Dagger.InputTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type InterfaceTypeDef"
  @spec interface_type_def(t()) :: Dagger.InterfaceTypeDef.t()
  def interface_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("interfaceTypeDef")

    %Dagger.InterfaceTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type LLM"
  @spec l_lm(t()) :: Dagger.LLM.t()
  def l_lm(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("lLM")

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "return the last llm reply from the history"
  @spec last_reply(t()) :: {:ok, String.t()} | {:error, term()}
  def last_reply(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("lastReply")

    Client.execute(llm.client, query_builder)
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type ListTypeDef"
  @spec list_type_def(t()) :: Dagger.ListTypeDef.t()
  def list_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("listTypeDef")

    %Dagger.ListTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use sync"
  @doc "synchronize LLM state"
  @spec loop(t()) :: Dagger.LLM.t()
  def loop(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("loop")

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "return the model used by the llm"
  @spec model(t()) :: {:ok, String.t()} | {:error, term()}
  def model(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("model")

    Client.execute(llm.client, query_builder)
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type Module"
  @spec module(t()) :: Dagger.Module.t()
  def module(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("module")

    %Dagger.Module{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type ModuleConfigClient"
  @spec module_config_client(t()) :: Dagger.ModuleConfigClient.t()
  def module_config_client(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("moduleConfigClient")

    %Dagger.ModuleConfigClient{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type ModuleSource"
  @spec module_source(t()) :: Dagger.ModuleSource.t()
  def module_source(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("moduleSource")

    %Dagger.ModuleSource{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type ObjectTypeDef"
  @spec object_type_def(t()) :: Dagger.ObjectTypeDef.t()
  def object_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("objectTypeDef")

    %Dagger.ObjectTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "return the provider used by the llm"
  @spec provider(t()) :: {:ok, String.t()} | {:error, term()}
  def provider(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("provider")

    Client.execute(llm.client, query_builder)
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type ScalarTypeDef"
  @spec scalar_type_def(t()) :: Dagger.ScalarTypeDef.t()
  def scalar_type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("scalarTypeDef")

    %Dagger.ScalarTypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type SDKConfig"
  @spec sdkconfig(t()) :: Dagger.SDKConfig.t() | nil
  def sdkconfig(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("sdkconfig")

    %Dagger.SDKConfig{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type Secret"
  @spec secret(t()) :: Dagger.Secret.t()
  def secret(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("secret")

    %Dagger.Secret{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type Service"
  @spec service(t()) :: Dagger.Service.t()
  def service(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("service")

    %Dagger.Service{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type CacheVolume in the llm environment"
  @spec set_cache_volume(t(), String.t(), Dagger.CacheVolume.t()) :: Dagger.LLM.t()
  def set_cache_volume(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setCacheVolume")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type Container in the llm environment"
  @spec set_container(t(), String.t(), Dagger.Container.t()) :: Dagger.LLM.t()
  def set_container(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setContainer")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type CurrentModule in the llm environment"
  @spec set_current_module(t(), String.t(), Dagger.CurrentModule.t()) :: Dagger.LLM.t()
  def set_current_module(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setCurrentModule")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type Directory in the llm environment"
  @spec set_directory(t(), String.t(), Dagger.Directory.t()) :: Dagger.LLM.t()
  def set_directory(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setDirectory")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type EnumTypeDef in the llm environment"
  @spec set_enum_type_def(t(), String.t(), Dagger.EnumTypeDef.t()) :: Dagger.LLM.t()
  def set_enum_type_def(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setEnumTypeDef")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type EnumValueTypeDef in the llm environment"
  @spec set_enum_value_type_def(t(), String.t(), Dagger.EnumValueTypeDef.t()) :: Dagger.LLM.t()
  def set_enum_value_type_def(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setEnumValueTypeDef")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type Error in the llm environment"
  @spec set_error(t(), String.t(), Dagger.Error.t()) :: Dagger.LLM.t()
  def set_error(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setError")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type ErrorValue in the llm environment"
  @spec set_error_value(t(), String.t(), Dagger.ErrorValue.t()) :: Dagger.LLM.t()
  def set_error_value(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setErrorValue")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type FieldTypeDef in the llm environment"
  @spec set_field_type_def(t(), String.t(), Dagger.FieldTypeDef.t()) :: Dagger.LLM.t()
  def set_field_type_def(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setFieldTypeDef")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type File in the llm environment"
  @spec set_file(t(), String.t(), Dagger.File.t()) :: Dagger.LLM.t()
  def set_file(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setFile")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type Function in the llm environment"
  @spec set_function(t(), String.t(), Dagger.Function.t()) :: Dagger.LLM.t()
  def set_function(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setFunction")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type FunctionArg in the llm environment"
  @spec set_function_arg(t(), String.t(), Dagger.FunctionArg.t()) :: Dagger.LLM.t()
  def set_function_arg(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setFunctionArg")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type FunctionCall in the llm environment"
  @spec set_function_call(t(), String.t(), Dagger.FunctionCall.t()) :: Dagger.LLM.t()
  def set_function_call(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setFunctionCall")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type FunctionCallArgValue in the llm environment"
  @spec set_function_call_arg_value(t(), String.t(), Dagger.FunctionCallArgValue.t()) ::
          Dagger.LLM.t()
  def set_function_call_arg_value(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setFunctionCallArgValue")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type GeneratedCode in the llm environment"
  @spec set_generated_code(t(), String.t(), Dagger.GeneratedCode.t()) :: Dagger.LLM.t()
  def set_generated_code(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setGeneratedCode")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type GitRef in the llm environment"
  @spec set_git_ref(t(), String.t(), Dagger.GitRef.t()) :: Dagger.LLM.t()
  def set_git_ref(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setGitRef")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type GitRepository in the llm environment"
  @spec set_git_repository(t(), String.t(), Dagger.GitRepository.t()) :: Dagger.LLM.t()
  def set_git_repository(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setGitRepository")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type InputTypeDef in the llm environment"
  @spec set_input_type_def(t(), String.t(), Dagger.InputTypeDef.t()) :: Dagger.LLM.t()
  def set_input_type_def(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setInputTypeDef")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type InterfaceTypeDef in the llm environment"
  @spec set_interface_type_def(t(), String.t(), Dagger.InterfaceTypeDef.t()) :: Dagger.LLM.t()
  def set_interface_type_def(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setInterfaceTypeDef")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type LLM in the llm environment"
  @spec set_llm(t(), String.t(), Dagger.LLM.t()) :: Dagger.LLM.t()
  def set_llm(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setLLM")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type ListTypeDef in the llm environment"
  @spec set_list_type_def(t(), String.t(), Dagger.ListTypeDef.t()) :: Dagger.LLM.t()
  def set_list_type_def(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setListTypeDef")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type Module in the llm environment"
  @spec set_module(t(), String.t(), Dagger.Module.t()) :: Dagger.LLM.t()
  def set_module(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setModule")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type ModuleConfigClient in the llm environment"
  @spec set_module_config_client(t(), String.t(), Dagger.ModuleConfigClient.t()) :: Dagger.LLM.t()
  def set_module_config_client(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setModuleConfigClient")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type ModuleSource in the llm environment"
  @spec set_module_source(t(), String.t(), Dagger.ModuleSource.t()) :: Dagger.LLM.t()
  def set_module_source(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setModuleSource")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type ObjectTypeDef in the llm environment"
  @spec set_object_type_def(t(), String.t(), Dagger.ObjectTypeDef.t()) :: Dagger.LLM.t()
  def set_object_type_def(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setObjectTypeDef")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type SDKConfig in the llm environment"
  @spec set_sdk_config(t(), String.t(), Dagger.SDKConfig.t()) :: Dagger.LLM.t()
  def set_sdk_config(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setSDKConfig")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type ScalarTypeDef in the llm environment"
  @spec set_scalar_type_def(t(), String.t(), Dagger.ScalarTypeDef.t()) :: Dagger.LLM.t()
  def set_scalar_type_def(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setScalarTypeDef")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type Secret in the llm environment"
  @spec set_secret(t(), String.t(), Dagger.Secret.t()) :: Dagger.LLM.t()
  def set_secret(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setSecret")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type Service in the llm environment"
  @spec set_service(t(), String.t(), Dagger.Service.t()) :: Dagger.LLM.t()
  def set_service(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setService")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type Socket in the llm environment"
  @spec set_socket(t(), String.t(), Dagger.Socket.t()) :: Dagger.LLM.t()
  def set_socket(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setSocket")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type SourceMap in the llm environment"
  @spec set_source_map(t(), String.t(), Dagger.SourceMap.t()) :: Dagger.LLM.t()
  def set_source_map(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setSourceMap")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Add a string variable to the LLM's environment"
  @spec set_string(t(), String.t(), String.t()) :: Dagger.LLM.t()
  def set_string(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setString")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", value)

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type Terminal in the llm environment"
  @spec set_terminal(t(), String.t(), Dagger.Terminal.t()) :: Dagger.LLM.t()
  def set_terminal(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setTerminal")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Set a variable of type TypeDef in the llm environment"
  @spec set_type_def(t(), String.t(), Dagger.TypeDef.t()) :: Dagger.LLM.t()
  def set_type_def(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("setTypeDef")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type Socket"
  @spec socket(t()) :: Dagger.Socket.t()
  def socket(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("socket")

    %Dagger.Socket{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type SourceMap"
  @spec source_map(t()) :: Dagger.SourceMap.t()
  def source_map(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("sourceMap")

    %Dagger.SourceMap{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "synchronize LLM state"
  @spec sync(t()) :: {:ok, Dagger.LLM.t()} | {:error, term()}
  def sync(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("sync")

    with {:ok, id} <- Client.execute(llm.client, query_builder) do
      {:ok,
       %Dagger.LLM{
         query_builder:
           QB.query()
           |> QB.select("loadLLMFromID")
           |> QB.put_arg("id", id),
         client: llm.client
       }}
    end
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type Terminal"
  @spec terminal(t()) :: Dagger.Terminal.t()
  def terminal(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("terminal")

    %Dagger.Terminal{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "print documentation for available tools"
  @spec tools(t()) :: {:ok, String.t()} | {:error, term()}
  def tools(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("tools")

    Client.execute(llm.client, query_builder)
  end

  @deprecated "use get<TargetType> instead"
  @doc "Retrieve a the current value in the LLM environment, of type TypeDef"
  @spec type_def(t()) :: Dagger.TypeDef.t()
  def type_def(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("typeDef")

    %Dagger.TypeDef{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "list variables in the LLM environment"
  @spec variables(t()) :: {:ok, [Dagger.LLMVariable.t()]} | {:error, term()}
  def variables(%__MODULE__{} = llm) do
    query_builder =
      llm.query_builder |> QB.select("variables") |> QB.select("id")

    with {:ok, items} <- Client.execute(llm.client, query_builder) do
      {:ok,
       for %{"id" => id} <- items do
         %Dagger.LLMVariable{
           query_builder:
             QB.query()
             |> QB.select("loadLLMVariableFromID")
             |> QB.put_arg("id", id),
           client: llm.client
         }
       end}
    end
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type CacheVolume in the llm environment"
  @spec with_cache_volume(t(), Dagger.CacheVolume.t()) :: Dagger.LLM.t()
  def with_cache_volume(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withCacheVolume")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type Container in the llm environment"
  @spec with_container(t(), Dagger.Container.t()) :: Dagger.LLM.t()
  def with_container(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withContainer") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type CurrentModule in the llm environment"
  @spec with_current_module(t(), Dagger.CurrentModule.t()) :: Dagger.LLM.t()
  def with_current_module(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withCurrentModule")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type Directory in the llm environment"
  @spec with_directory(t(), Dagger.Directory.t()) :: Dagger.LLM.t()
  def with_directory(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withDirectory") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type EnumTypeDef in the llm environment"
  @spec with_enum_type_def(t(), Dagger.EnumTypeDef.t()) :: Dagger.LLM.t()
  def with_enum_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withEnumTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type EnumValueTypeDef in the llm environment"
  @spec with_enum_value_type_def(t(), Dagger.EnumValueTypeDef.t()) :: Dagger.LLM.t()
  def with_enum_value_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withEnumValueTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type Error in the llm environment"
  @spec with_error(t(), Dagger.Error.t()) :: Dagger.LLM.t()
  def with_error(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withError") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type ErrorValue in the llm environment"
  @spec with_error_value(t(), Dagger.ErrorValue.t()) :: Dagger.LLM.t()
  def with_error_value(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withErrorValue")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type FieldTypeDef in the llm environment"
  @spec with_field_type_def(t(), Dagger.FieldTypeDef.t()) :: Dagger.LLM.t()
  def with_field_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withFieldTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type File in the llm environment"
  @spec with_file(t(), Dagger.File.t()) :: Dagger.LLM.t()
  def with_file(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withFile") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type Function in the llm environment"
  @spec with_function(t(), Dagger.Function.t()) :: Dagger.LLM.t()
  def with_function(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withFunction") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type FunctionArg in the llm environment"
  @spec with_function_arg(t(), Dagger.FunctionArg.t()) :: Dagger.LLM.t()
  def with_function_arg(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withFunctionArg")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type FunctionCall in the llm environment"
  @spec with_function_call(t(), Dagger.FunctionCall.t()) :: Dagger.LLM.t()
  def with_function_call(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withFunctionCall")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type FunctionCallArgValue in the llm environment"
  @spec with_function_call_arg_value(t(), Dagger.FunctionCallArgValue.t()) :: Dagger.LLM.t()
  def with_function_call_arg_value(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withFunctionCallArgValue")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type GeneratedCode in the llm environment"
  @spec with_generated_code(t(), Dagger.GeneratedCode.t()) :: Dagger.LLM.t()
  def with_generated_code(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withGeneratedCode")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type GitRef in the llm environment"
  @spec with_git_ref(t(), Dagger.GitRef.t()) :: Dagger.LLM.t()
  def with_git_ref(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withGitRef") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type GitRepository in the llm environment"
  @spec with_git_repository(t(), Dagger.GitRepository.t()) :: Dagger.LLM.t()
  def with_git_repository(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withGitRepository")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type InputTypeDef in the llm environment"
  @spec with_input_type_def(t(), Dagger.InputTypeDef.t()) :: Dagger.LLM.t()
  def with_input_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withInputTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type InterfaceTypeDef in the llm environment"
  @spec with_interface_type_def(t(), Dagger.InterfaceTypeDef.t()) :: Dagger.LLM.t()
  def with_interface_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withInterfaceTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type LLM in the llm environment"
  @spec with_llm(t(), Dagger.LLM.t()) :: Dagger.LLM.t()
  def with_llm(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withLLM") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type ListTypeDef in the llm environment"
  @spec with_list_type_def(t(), Dagger.ListTypeDef.t()) :: Dagger.LLM.t()
  def with_list_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withListTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "swap out the llm model"
  @spec with_model(t(), String.t()) :: Dagger.LLM.t()
  def with_model(%__MODULE__{} = llm, model) do
    query_builder =
      llm.query_builder |> QB.select("withModel") |> QB.put_arg("model", model)

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type Module in the llm environment"
  @spec with_module(t(), Dagger.Module.t()) :: Dagger.LLM.t()
  def with_module(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withModule") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type ModuleConfigClient in the llm environment"
  @spec with_module_config_client(t(), Dagger.ModuleConfigClient.t()) :: Dagger.LLM.t()
  def with_module_config_client(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withModuleConfigClient")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type ModuleSource in the llm environment"
  @spec with_module_source(t(), Dagger.ModuleSource.t()) :: Dagger.LLM.t()
  def with_module_source(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withModuleSource")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type ObjectTypeDef in the llm environment"
  @spec with_object_type_def(t(), Dagger.ObjectTypeDef.t()) :: Dagger.LLM.t()
  def with_object_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withObjectTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "append a prompt to the llm context"
  @spec with_prompt(t(), String.t()) :: Dagger.LLM.t()
  def with_prompt(%__MODULE__{} = llm, prompt) do
    query_builder =
      llm.query_builder |> QB.select("withPrompt") |> QB.put_arg("prompt", prompt)

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "append the contents of a file to the llm context"
  @spec with_prompt_file(t(), Dagger.File.t()) :: Dagger.LLM.t()
  def with_prompt_file(%__MODULE__{} = llm, file) do
    query_builder =
      llm.query_builder |> QB.select("withPromptFile") |> QB.put_arg("file", Dagger.ID.id!(file))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @doc "Add a string variable to the LLM's environment"
  @spec with_prompt_var(t(), String.t(), String.t()) :: Dagger.LLM.t()
  def with_prompt_var(%__MODULE__{} = llm, name, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withPromptVar")
      |> QB.put_arg("name", name)
      |> QB.put_arg("value", value)

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type SDKConfig in the llm environment"
  @spec with_sdk_config(t(), Dagger.SDKConfig.t()) :: Dagger.LLM.t()
  def with_sdk_config(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withSDKConfig") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type ScalarTypeDef in the llm environment"
  @spec with_scalar_type_def(t(), Dagger.ScalarTypeDef.t()) :: Dagger.LLM.t()
  def with_scalar_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder
      |> QB.select("withScalarTypeDef")
      |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type Secret in the llm environment"
  @spec with_secret(t(), Dagger.Secret.t()) :: Dagger.LLM.t()
  def with_secret(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withSecret") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type Service in the llm environment"
  @spec with_service(t(), Dagger.Service.t()) :: Dagger.LLM.t()
  def with_service(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withService") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type Socket in the llm environment"
  @spec with_socket(t(), Dagger.Socket.t()) :: Dagger.LLM.t()
  def with_socket(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withSocket") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type SourceMap in the llm environment"
  @spec with_source_map(t(), Dagger.SourceMap.t()) :: Dagger.LLM.t()
  def with_source_map(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withSourceMap") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type Terminal in the llm environment"
  @spec with_terminal(t(), Dagger.Terminal.t()) :: Dagger.LLM.t()
  def with_terminal(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withTerminal") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end

  @deprecated "use set<TargetType> instead"
  @doc "Set a variable of type TypeDef in the llm environment"
  @spec with_type_def(t(), Dagger.TypeDef.t()) :: Dagger.LLM.t()
  def with_type_def(%__MODULE__{} = llm, value) do
    query_builder =
      llm.query_builder |> QB.select("withTypeDef") |> QB.put_arg("value", Dagger.ID.id!(value))

    %Dagger.LLM{
      query_builder: query_builder,
      client: llm.client
    }
  end
end

defimpl Jason.Encoder, for: Dagger.LLM do
  def encode(llm, opts) do
    {:ok, id} = Dagger.LLM.id(llm)
    Jason.Encode.string(id, opts)
  end
end

defimpl Nestru.Decoder, for: Dagger.LLM do
  def decode_fields_hint(_struct, _context, id) do
    {:ok, Dagger.Client.load_llm_from_id(Dagger.Global.dag(), id)}
  end
end
