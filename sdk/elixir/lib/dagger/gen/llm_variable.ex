# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.LLMVariable do
  @moduledoc "Dagger.LLMVariable"

  alias Dagger.Core.Client
  alias Dagger.Core.QueryBuilder, as: QB

  @derive Dagger.ID

  defstruct [:query_builder, :client]

  @type t() :: %__MODULE__{}

  @spec hash(t()) :: {:ok, String.t()} | {:error, term()}
  def hash(%__MODULE__{} = llm_variable) do
    query_builder =
      llm_variable.query_builder |> QB.select("hash")

    Client.execute(llm_variable.client, query_builder)
  end

  @doc "A unique identifier for this LLMVariable."
  @spec id(t()) :: {:ok, Dagger.LLMVariableID.t()} | {:error, term()}
  def id(%__MODULE__{} = llm_variable) do
    query_builder =
      llm_variable.query_builder |> QB.select("id")

    Client.execute(llm_variable.client, query_builder)
  end

  @spec name(t()) :: {:ok, String.t()} | {:error, term()}
  def name(%__MODULE__{} = llm_variable) do
    query_builder =
      llm_variable.query_builder |> QB.select("name")

    Client.execute(llm_variable.client, query_builder)
  end

  @spec type_name(t()) :: {:ok, String.t()} | {:error, term()}
  def type_name(%__MODULE__{} = llm_variable) do
    query_builder =
      llm_variable.query_builder |> QB.select("typeName")

    Client.execute(llm_variable.client, query_builder)
  end
end

defimpl Jason.Encoder, for: Dagger.LLMVariable do
  def encode(llm_variable, opts) do
    {:ok, id} = Dagger.LLMVariable.id(llm_variable)
    Jason.Encode.string(id, opts)
  end
end

defimpl Nestru.Decoder, for: Dagger.LLMVariable do
  def decode_fields_hint(_struct, _context, id) do
    {:ok, Dagger.Client.load_llm_variable_from_id(Dagger.Global.dag(), id)}
  end
end
