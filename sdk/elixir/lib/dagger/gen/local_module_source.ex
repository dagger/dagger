# This file generated by `mix dagger.gen`. Please DO NOT EDIT.
defmodule Dagger.LocalModuleSource do
  @moduledoc "Module source that that originates from a path locally relative to an arbitrary directory."
  use Dagger.Core.QueryBuilder
  @type t() :: %__MODULE__{}
  defstruct [:selection, :client]

  (
    @doc "The directory containing everything needed to load load and use the module."
    @spec context_directory(t()) :: Dagger.Directory.t()
    def context_directory(%__MODULE__{} = local_module_source) do
      selection = select(local_module_source.selection, "contextDirectory")
      %Dagger.Directory{selection: selection, client: local_module_source.client}
    end
  )

  (
    @doc "A unique identifier for this LocalModuleSource."
    @spec id(t()) :: {:ok, Dagger.LocalModuleSourceID.t()} | {:error, term()}
    def id(%__MODULE__{} = local_module_source) do
      selection = select(local_module_source.selection, "id")
      execute(selection, local_module_source.client)
    end
  )

  (
    @doc "The path to the root of the module source under the context directory. This directory contains its configuration file. It also contains its source code (possibly as a subdirectory)."
    @spec root_subpath(t()) :: {:ok, Dagger.String.t()} | {:error, term()}
    def root_subpath(%__MODULE__{} = local_module_source) do
      selection = select(local_module_source.selection, "rootSubpath")
      execute(selection, local_module_source.client)
    end
  )
end
