# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.ModuleDependency do
  @moduledoc "The configuration of dependency of a module."

  use Dagger.Core.QueryBuilder

  @derive Dagger.ID

  defstruct [:selection, :client]

  @type t() :: %__MODULE__{}

  @doc "A unique identifier for this ModuleDependency."
  @spec id(t()) :: {:ok, Dagger.ModuleDependencyID.t()} | {:error, term()}
  def id(%__MODULE__{} = module_dependency) do
    selection =
      module_dependency.selection |> select("id")

    execute(selection, module_dependency.client)
  end

  @doc "The name of the dependency module."
  @spec name(t()) :: {:ok, String.t()} | {:error, term()}
  def name(%__MODULE__{} = module_dependency) do
    selection =
      module_dependency.selection |> select("name")

    execute(selection, module_dependency.client)
  end

  @doc "The source for the dependency module."
  @spec source(t()) :: Dagger.ModuleSource.t()
  def source(%__MODULE__{} = module_dependency) do
    selection =
      module_dependency.selection |> select("source")

    %Dagger.ModuleSource{
      selection: selection,
      client: module_dependency.client
    }
  end
end
