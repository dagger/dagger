# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.SDKConfig do
  @moduledoc "The SDK config of the module."

  alias Dagger.Core.Client
  alias Dagger.Core.QueryBuilder, as: QB

  @derive Dagger.ID

  defstruct [:query_builder, :client]

  @type t() :: %__MODULE__{}

  @doc "A unique identifier for this SDKConfig."
  @spec id(t()) :: {:ok, Dagger.SDKConfigID.t()} | {:error, term()}
  def id(%__MODULE__{} = sdk_config) do
    query_builder =
      sdk_config.query_builder |> QB.select("id")

    Client.execute(sdk_config.client, query_builder)
  end

  @doc "Source of the SDK. Either a name of a builtin SDK or a module source ref string pointing to the SDK's implementation."
  @spec source(t()) :: {:ok, String.t()} | {:error, term()}
  def source(%__MODULE__{} = sdk_config) do
    query_builder =
      sdk_config.query_builder |> QB.select("source")

    Client.execute(sdk_config.client, query_builder)
  end
end

defimpl Jason.Encoder, for: Dagger.SDKConfig do
  def encode(sdk_config, opts) do
    {:ok, id} = Dagger.SDKConfig.id(sdk_config)
    Jason.Encode.string(id, opts)
  end
end

defimpl Nestru.Decoder, for: Dagger.SDKConfig do
  def decode_fields_hint(_struct, _context, id) do
    {:ok, Dagger.Client.load_sdk_config_from_id(Dagger.Global.dag(), id)}
  end
end
