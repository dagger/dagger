# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.SignalTypes do
  @moduledoc "Signaltypes to be sent to processes."

  @type t() ::
          :SIGABRT
          | :SIGALRM
          | :SIGBUS
          | :SIGCHLD
          | :SIGCLD
          | :SIGCONT
          | :SIGFPE
          | :SIGHUP
          | :SIGILL
          | :SIGINT
          | :SIGIO
          | :SIGIOT
          | :SIGKILL
          | :SIGPIPE
          | :SIGPOLL
          | :SIGPROF
          | :SIGPWR
          | :SIGQUIT
          | :SIGSEGV
          | :SIGSTKFLT
          | :SIGSTOP
          | :SIGSYS
          | :SIGTERM
          | :SIGTRAP
          | :SIGTSTP
          | :SIGTTIN
          | :SIGTTOU
          | :SIGUNUSED
          | :SIGURG
          | :SIGUSR1
          | :SIGUSR2
          | :SIGVTALRM
          | :SIGWINCH
          | :SIGXCPU
          | :SIGXFSZ

  @spec sigabrt() :: :SIGABRT
  def sigabrt(), do: :SIGABRT

  @spec sigalrm() :: :SIGALRM
  def sigalrm(), do: :SIGALRM

  @spec sigbus() :: :SIGBUS
  def sigbus(), do: :SIGBUS

  @spec sigchld() :: :SIGCHLD
  def sigchld(), do: :SIGCHLD

  @spec sigcld() :: :SIGCLD
  def sigcld(), do: :SIGCLD

  @spec sigcont() :: :SIGCONT
  def sigcont(), do: :SIGCONT

  @spec sigfpe() :: :SIGFPE
  def sigfpe(), do: :SIGFPE

  @spec sighup() :: :SIGHUP
  def sighup(), do: :SIGHUP

  @spec sigill() :: :SIGILL
  def sigill(), do: :SIGILL

  @spec sigint() :: :SIGINT
  def sigint(), do: :SIGINT

  @spec sigio() :: :SIGIO
  def sigio(), do: :SIGIO

  @spec sigiot() :: :SIGIOT
  def sigiot(), do: :SIGIOT

  @spec sigkill() :: :SIGKILL
  def sigkill(), do: :SIGKILL

  @spec sigpipe() :: :SIGPIPE
  def sigpipe(), do: :SIGPIPE

  @spec sigpoll() :: :SIGPOLL
  def sigpoll(), do: :SIGPOLL

  @spec sigprof() :: :SIGPROF
  def sigprof(), do: :SIGPROF

  @spec sigpwr() :: :SIGPWR
  def sigpwr(), do: :SIGPWR

  @spec sigquit() :: :SIGQUIT
  def sigquit(), do: :SIGQUIT

  @spec sigsegv() :: :SIGSEGV
  def sigsegv(), do: :SIGSEGV

  @spec sigstkflt() :: :SIGSTKFLT
  def sigstkflt(), do: :SIGSTKFLT

  @spec sigstop() :: :SIGSTOP
  def sigstop(), do: :SIGSTOP

  @spec sigsys() :: :SIGSYS
  def sigsys(), do: :SIGSYS

  @spec sigterm() :: :SIGTERM
  def sigterm(), do: :SIGTERM

  @spec sigtrap() :: :SIGTRAP
  def sigtrap(), do: :SIGTRAP

  @spec sigtstp() :: :SIGTSTP
  def sigtstp(), do: :SIGTSTP

  @spec sigttin() :: :SIGTTIN
  def sigttin(), do: :SIGTTIN

  @spec sigttou() :: :SIGTTOU
  def sigttou(), do: :SIGTTOU

  @spec sigunused() :: :SIGUNUSED
  def sigunused(), do: :SIGUNUSED

  @spec sigurg() :: :SIGURG
  def sigurg(), do: :SIGURG

  @spec sigusr1() :: :SIGUSR1
  def sigusr1(), do: :SIGUSR1

  @spec sigusr2() :: :SIGUSR2
  def sigusr2(), do: :SIGUSR2

  @spec sigvtalrm() :: :SIGVTALRM
  def sigvtalrm(), do: :SIGVTALRM

  @spec sigwinch() :: :SIGWINCH
  def sigwinch(), do: :SIGWINCH

  @spec sigxcpu() :: :SIGXCPU
  def sigxcpu(), do: :SIGXCPU

  @spec sigxfsz() :: :SIGXFSZ
  def sigxfsz(), do: :SIGXFSZ
end
