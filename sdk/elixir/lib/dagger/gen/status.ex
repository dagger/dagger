# This file generated by `dagger_codegen`. Please DO NOT EDIT.
defmodule Dagger.Status do
  @moduledoc """
  A status indicator to show to the user.
  """

  use Dagger.Core.Base, kind: :object, name: "Status"

  alias Dagger.Core.Client
  alias Dagger.Core.QueryBuilder, as: QB

  @derive Dagger.ID

  defstruct [:query_builder, :client]

  @type t() :: %__MODULE__{}

  @doc """
  Start and immediately finish the status, so that it just gets displayed to the user.
  """
  @spec display(t()) :: {:ok, Dagger.Status.t()} | {:error, term()}
  def display(%__MODULE__{} = status) do
    query_builder =
      status.query_builder |> QB.select("display")

    with {:ok, id} <- Client.execute(status.client, query_builder) do
      {:ok,
       %Dagger.Status{
         query_builder:
           QB.query()
           |> QB.select("loadStatusFromID")
           |> QB.put_arg("id", id),
         client: status.client
       }}
    end
  end

  @doc """
  Mark the status as complete, with an optional error.
  """
  @spec end_(t(), [{:error, Dagger.ErrorID.t() | nil}]) :: :ok | {:error, term()}
  def end_(%__MODULE__{} = status, optional_args \\ []) do
    query_builder =
      status.query_builder |> QB.select("end") |> QB.maybe_put_arg("error", optional_args[:error])

    case Client.execute(status.client, query_builder) do
      {:ok, _} -> :ok
      error -> error
    end
  end

  @doc """
  A unique identifier for this Status.
  """
  @spec id(t()) :: {:ok, Dagger.StatusID.t()} | {:error, term()}
  def id(%__MODULE__{} = status) do
    query_builder =
      status.query_builder |> QB.select("id")

    Client.execute(status.client, query_builder)
  end

  @doc """
  Returns the internal OpenTelemetry span ID of the status.

  (You probably don't need to use this, unless you're implementing OpenTelemetry integration for a Dagger SDK.)
  """
  @spec internal_id(t()) :: {:ok, String.t()} | {:error, term()}
  def internal_id(%__MODULE__{} = status) do
    query_builder =
      status.query_builder |> QB.select("internalId")

    Client.execute(status.client, query_builder)
  end

  @doc """
  The display name of the status.
  """
  @spec name(t()) :: {:ok, String.t()} | {:error, term()}
  def name(%__MODULE__{} = status) do
    query_builder =
      status.query_builder |> QB.select("name")

    Client.execute(status.client, query_builder)
  end

  @doc """
  Start a new instance of the status.
  """
  @spec start(t()) :: {:ok, Dagger.Status.t()} | {:error, term()}
  def start(%__MODULE__{} = status) do
    query_builder =
      status.query_builder |> QB.select("start")

    with {:ok, id} <- Client.execute(status.client, query_builder) do
      {:ok,
       %Dagger.Status{
         query_builder:
           QB.query()
           |> QB.select("loadStatusFromID")
           |> QB.put_arg("id", id),
         client: status.client
       }}
    end
  end
end

defimpl Jason.Encoder, for: Dagger.Status do
  def encode(status, opts) do
    {:ok, id} = Dagger.Status.id(status)
    Jason.Encode.string(id, opts)
  end
end

defimpl Nestru.Decoder, for: Dagger.Status do
  def decode_fields_hint(_struct, _context, id) do
    {:ok, Dagger.Client.load_status_from_id(Dagger.Global.dag(), id)}
  end
end
