// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: filesend.proto

package filesend

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StreamMessage struct {
	// Types that are valid to be assigned to Message:
	//
	//	*StreamMessage_Init
	//	*StreamMessage_Bytes
	Message isStreamMessage_Message `protobuf_oneof:"message"`
}

func (m *StreamMessage) Reset()      { *m = StreamMessage{} }
func (*StreamMessage) ProtoMessage() {}
func (*StreamMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05f549f7063defd, []int{0}
}
func (m *StreamMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMessage.Merge(m, src)
}
func (m *StreamMessage) XXX_Size() int {
	return m.Size()
}
func (m *StreamMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMessage proto.InternalMessageInfo

type isStreamMessage_Message interface {
	isStreamMessage_Message()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type StreamMessage_Init struct {
	Init *InitMessage `protobuf:"bytes,1,opt,name=init,proto3,oneof" json:"init,omitempty"`
}
type StreamMessage_Bytes struct {
	Bytes *BytesMessage `protobuf:"bytes,2,opt,name=bytes,proto3,oneof" json:"bytes,omitempty"`
}

func (*StreamMessage_Init) isStreamMessage_Message()  {}
func (*StreamMessage_Bytes) isStreamMessage_Message() {}

func (m *StreamMessage) GetMessage() isStreamMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *StreamMessage) GetInit() *InitMessage {
	if x, ok := m.GetMessage().(*StreamMessage_Init); ok {
		return x.Init
	}
	return nil
}

func (m *StreamMessage) GetBytes() *BytesMessage {
	if x, ok := m.GetMessage().(*StreamMessage_Bytes); ok {
		return x.Bytes
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StreamMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StreamMessage_Init)(nil),
		(*StreamMessage_Bytes)(nil),
	}
}

type StreamResponse struct {
}

func (m *StreamResponse) Reset()      { *m = StreamResponse{} }
func (*StreamResponse) ProtoMessage() {}
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05f549f7063defd, []int{1}
}
func (m *StreamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResponse.Merge(m, src)
}
func (m *StreamResponse) XXX_Size() int {
	return m.Size()
}
func (m *StreamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResponse proto.InternalMessageInfo

type InitMessage struct {
	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Dest   string `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest,omitempty"`
	Unpack bool   `protobuf:"varint,3,opt,name=unpack,proto3" json:"unpack,omitempty"`
}

func (m *InitMessage) Reset()      { *m = InitMessage{} }
func (*InitMessage) ProtoMessage() {}
func (*InitMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05f549f7063defd, []int{2}
}
func (m *InitMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitMessage.Merge(m, src)
}
func (m *InitMessage) XXX_Size() int {
	return m.Size()
}
func (m *InitMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_InitMessage.DiscardUnknown(m)
}

var xxx_messageInfo_InitMessage proto.InternalMessageInfo

func (m *InitMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *InitMessage) GetDest() string {
	if m != nil {
		return m.Dest
	}
	return ""
}

func (m *InitMessage) GetUnpack() bool {
	if m != nil {
		return m.Unpack
	}
	return false
}

type BytesMessage struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BytesMessage) Reset()      { *m = BytesMessage{} }
func (*BytesMessage) ProtoMessage() {}
func (*BytesMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a05f549f7063defd, []int{3}
}
func (m *BytesMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BytesMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BytesMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BytesMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BytesMessage.Merge(m, src)
}
func (m *BytesMessage) XXX_Size() int {
	return m.Size()
}
func (m *BytesMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BytesMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BytesMessage proto.InternalMessageInfo

func (m *BytesMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamMessage)(nil), "dagger.filesend.v1.StreamMessage")
	proto.RegisterType((*StreamResponse)(nil), "dagger.filesend.v1.StreamResponse")
	proto.RegisterType((*InitMessage)(nil), "dagger.filesend.v1.InitMessage")
	proto.RegisterType((*BytesMessage)(nil), "dagger.filesend.v1.BytesMessage")
}

func init() { proto.RegisterFile("filesend.proto", fileDescriptor_a05f549f7063defd) }

var fileDescriptor_a05f549f7063defd = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0x4e, 0x3a, 0x41,
	0x10, 0xc6, 0x77, 0xf9, 0xf3, 0x47, 0x6e, 0x40, 0x62, 0xb6, 0x30, 0xc4, 0x62, 0xc4, 0xab, 0xa8,
	0x2e, 0x11, 0x63, 0x62, 0x65, 0x41, 0x61, 0xa4, 0xb0, 0x39, 0xa8, 0xac, 0x5c, 0xbc, 0x91, 0x6c,
	0x84, 0x85, 0xdc, 0xae, 0x26, 0x76, 0xf6, 0x36, 0x3e, 0x86, 0x8f, 0x62, 0x49, 0x49, 0x29, 0x7b,
	0x8d, 0x25, 0x8f, 0x60, 0xdc, 0x03, 0xc5, 0x88, 0xdd, 0xec, 0xe4, 0xfb, 0xcd, 0x7c, 0xdf, 0x0e,
	0xd4, 0x6e, 0xd4, 0x90, 0x0c, 0xe9, 0x24, 0x9a, 0xa4, 0x63, 0x3b, 0x16, 0x22, 0x91, 0x83, 0x01,
	0xa5, 0xd1, 0x57, 0xfb, 0xfe, 0x30, 0x7c, 0xe2, 0xb0, 0xdd, 0xb5, 0x29, 0xc9, 0xd1, 0x05, 0x19,
	0x23, 0x07, 0x24, 0x8e, 0xa1, 0xa8, 0xb4, 0xb2, 0x75, 0xde, 0xe0, 0xcd, 0x4a, 0x6b, 0x3f, 0xfa,
	0x0d, 0x45, 0x1d, 0xad, 0xec, 0x52, 0x7e, 0xce, 0x62, 0x2f, 0x17, 0x27, 0xf0, 0xbf, 0xff, 0x60,
	0xc9, 0xd4, 0x0b, 0x9e, 0x6b, 0x6c, 0xe2, 0xda, 0x9f, 0x82, 0x6f, 0x30, 0x07, 0xda, 0x01, 0x6c,
	0x8d, 0xf2, 0x5e, 0xb8, 0x03, 0xb5, 0xdc, 0x4c, 0x4c, 0x66, 0x32, 0xd6, 0x86, 0xc2, 0x0e, 0x54,
	0xd6, 0xb6, 0x89, 0x1a, 0x14, 0x54, 0xe2, 0xad, 0x05, 0x71, 0x41, 0x25, 0x42, 0x40, 0x31, 0x21,
	0x63, 0xfd, 0xd2, 0x20, 0xf6, 0xb5, 0xd8, 0x85, 0xd2, 0x9d, 0x9e, 0xc8, 0xeb, 0xdb, 0xfa, 0xbf,
	0x06, 0x6f, 0x96, 0xe3, 0xe5, 0x2b, 0x0c, 0xa1, 0xba, 0x6e, 0xc0, 0xb3, 0xd2, 0x4a, 0x3f, 0xad,
	0x1a, 0xfb, 0xba, 0x75, 0x05, 0xe5, 0x33, 0x35, 0xa4, 0x2e, 0xe9, 0x44, 0xf4, 0x20, 0xe8, 0xc9,
	0x34, 0xf7, 0x23, 0x0e, 0x36, 0xe5, 0xf9, 0xf1, 0x71, 0x7b, 0xe1, 0xdf, 0x92, 0x55, 0x9c, 0x26,
	0x6f, 0x9f, 0x4e, 0xe7, 0xc8, 0x66, 0x73, 0x64, 0x8b, 0x39, 0xf2, 0x47, 0x87, 0xfc, 0xc5, 0x21,
	0x7f, 0x75, 0xc8, 0xa7, 0x0e, 0xf9, 0x9b, 0x43, 0xfe, 0xee, 0x90, 0x2d, 0x1c, 0xf2, 0xe7, 0x0c,
	0xd9, 0x34, 0x43, 0x36, 0xcb, 0x90, 0x5d, 0x96, 0x57, 0x33, 0xfb, 0x25, 0x7f, 0xcb, 0xa3, 0x8f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x1c, 0x4f, 0xa3, 0xdd, 0x01, 0x00, 0x00,
}

func (this *StreamMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamMessage)
	if !ok {
		that2, ok := that.(StreamMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Message == nil {
		if this.Message != nil {
			return false
		}
	} else if this.Message == nil {
		return false
	} else if !this.Message.Equal(that1.Message) {
		return false
	}
	return true
}
func (this *StreamMessage_Init) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamMessage_Init)
	if !ok {
		that2, ok := that.(StreamMessage_Init)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Init.Equal(that1.Init) {
		return false
	}
	return true
}
func (this *StreamMessage_Bytes) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamMessage_Bytes)
	if !ok {
		that2, ok := that.(StreamMessage_Bytes)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bytes.Equal(that1.Bytes) {
		return false
	}
	return true
}
func (this *StreamResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamResponse)
	if !ok {
		that2, ok := that.(StreamResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *InitMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*InitMessage)
	if !ok {
		that2, ok := that.(InitMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Dest != that1.Dest {
		return false
	}
	if this.Unpack != that1.Unpack {
		return false
	}
	return true
}
func (this *BytesMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BytesMessage)
	if !ok {
		that2, ok := that.(BytesMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *StreamMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&filesend.StreamMessage{")
	if this.Message != nil {
		s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StreamMessage_Init) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&filesend.StreamMessage_Init{` +
		`Init:` + fmt.Sprintf("%#v", this.Init) + `}`}, ", ")
	return s
}
func (this *StreamMessage_Bytes) GoString() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&filesend.StreamMessage_Bytes{` +
		`Bytes:` + fmt.Sprintf("%#v", this.Bytes) + `}`}, ", ")
	return s
}
func (this *StreamResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&filesend.StreamResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *InitMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&filesend.InitMessage{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Dest: "+fmt.Sprintf("%#v", this.Dest)+",\n")
	s = append(s, "Unpack: "+fmt.Sprintf("%#v", this.Unpack)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BytesMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&filesend.BytesMessage{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFilesend(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FileSendClient is the client API for FileSend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileSendClient interface {
	TarStream(ctx context.Context, opts ...grpc.CallOption) (FileSend_TarStreamClient, error)
}

type fileSendClient struct {
	cc *grpc.ClientConn
}

func NewFileSendClient(cc *grpc.ClientConn) FileSendClient {
	return &fileSendClient{cc}
}

func (c *fileSendClient) TarStream(ctx context.Context, opts ...grpc.CallOption) (FileSend_TarStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FileSend_serviceDesc.Streams[0], "/dagger.filesend.v1.FileSend/TarStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSendTarStreamClient{stream}
	return x, nil
}

type FileSend_TarStreamClient interface {
	Send(*StreamMessage) error
	CloseAndRecv() (*StreamResponse, error)
	grpc.ClientStream
}

type fileSendTarStreamClient struct {
	grpc.ClientStream
}

func (x *fileSendTarStreamClient) Send(m *StreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSendTarStreamClient) CloseAndRecv() (*StreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSendServer is the server API for FileSend service.
type FileSendServer interface {
	TarStream(FileSend_TarStreamServer) error
}

// UnimplementedFileSendServer can be embedded to have forward compatible implementations.
type UnimplementedFileSendServer struct {
}

func (*UnimplementedFileSendServer) TarStream(srv FileSend_TarStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TarStream not implemented")
}

func RegisterFileSendServer(s *grpc.Server, srv FileSendServer) {
	s.RegisterService(&_FileSend_serviceDesc, srv)
}

func _FileSend_TarStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSendServer).TarStream(&fileSendTarStreamServer{stream})
}

type FileSend_TarStreamServer interface {
	SendAndClose(*StreamResponse) error
	Recv() (*StreamMessage, error)
	grpc.ServerStream
}

type fileSendTarStreamServer struct {
	grpc.ServerStream
}

func (x *fileSendTarStreamServer) SendAndClose(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSendTarStreamServer) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FileSend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dagger.filesend.v1.FileSend",
	HandlerType: (*FileSendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TarStream",
			Handler:       _FileSend_TarStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "filesend.proto",
}

func (m *StreamMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		{
			size := m.Message.Size()
			i -= size
			if _, err := m.Message.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamMessage_Init) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMessage_Init) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Init != nil {
		{
			size, err := m.Init.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilesend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *StreamMessage_Bytes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamMessage_Bytes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Bytes != nil {
		{
			size, err := m.Bytes.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFilesend(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *StreamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *InitMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unpack {
		i--
		if m.Unpack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Dest) > 0 {
		i -= len(m.Dest)
		copy(dAtA[i:], m.Dest)
		i = encodeVarintFilesend(dAtA, i, uint64(len(m.Dest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintFilesend(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BytesMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BytesMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BytesMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintFilesend(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFilesend(dAtA []byte, offset int, v uint64) int {
	offset -= sovFilesend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *StreamMessage_Init) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Init != nil {
		l = m.Init.Size()
		n += 1 + l + sovFilesend(uint64(l))
	}
	return n
}
func (m *StreamMessage_Bytes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bytes != nil {
		l = m.Bytes.Size()
		n += 1 + l + sovFilesend(uint64(l))
	}
	return n
}
func (m *StreamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *InitMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFilesend(uint64(l))
	}
	l = len(m.Dest)
	if l > 0 {
		n += 1 + l + sovFilesend(uint64(l))
	}
	if m.Unpack {
		n += 2
	}
	return n
}

func (m *BytesMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFilesend(uint64(l))
	}
	return n
}

func sovFilesend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFilesend(x uint64) (n int) {
	return sovFilesend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StreamMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamMessage{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamMessage_Init) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamMessage_Init{`,
		`Init:` + strings.Replace(fmt.Sprintf("%v", this.Init), "InitMessage", "InitMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamMessage_Bytes) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamMessage_Bytes{`,
		`Bytes:` + strings.Replace(fmt.Sprintf("%v", this.Bytes), "BytesMessage", "BytesMessage", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StreamResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StreamResponse{`,
		`}`,
	}, "")
	return s
}
func (this *InitMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&InitMessage{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Dest:` + fmt.Sprintf("%v", this.Dest) + `,`,
		`Unpack:` + fmt.Sprintf("%v", this.Unpack) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BytesMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BytesMessage{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFilesend(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StreamMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Init", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilesend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilesend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &InitMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &StreamMessage_Init{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFilesend
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFilesend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BytesMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &StreamMessage_Bytes{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilesend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFilesend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InitMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilesend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilesend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFilesend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFilesend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unpack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unpack = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFilesend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BytesMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFilesend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BytesMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BytesMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFilesend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFilesend
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFilesend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFilesend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFilesend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFilesend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFilesend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilesend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFilesend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFilesend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFilesend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFilesend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFilesend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFilesend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFilesend = fmt.Errorf("proto: unexpected end of group")
)
