// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: filesend.proto

package filesend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileSendClient is the client API for FileSend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileSendClient interface {
	TarStream(ctx context.Context, opts ...grpc.CallOption) (FileSend_TarStreamClient, error)
}

type fileSendClient struct {
	cc grpc.ClientConnInterface
}

func NewFileSendClient(cc grpc.ClientConnInterface) FileSendClient {
	return &fileSendClient{cc}
}

func (c *fileSendClient) TarStream(ctx context.Context, opts ...grpc.CallOption) (FileSend_TarStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileSend_ServiceDesc.Streams[0], "/dagger.filesend.v1.FileSend/TarStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileSendTarStreamClient{stream}
	return x, nil
}

type FileSend_TarStreamClient interface {
	Send(*StreamMessage) error
	CloseAndRecv() (*StreamResponse, error)
	grpc.ClientStream
}

type fileSendTarStreamClient struct {
	grpc.ClientStream
}

func (x *fileSendTarStreamClient) Send(m *StreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileSendTarStreamClient) CloseAndRecv() (*StreamResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSendServer is the server API for FileSend service.
// All implementations must embed UnimplementedFileSendServer
// for forward compatibility
type FileSendServer interface {
	TarStream(FileSend_TarStreamServer) error
	mustEmbedUnimplementedFileSendServer()
}

// UnimplementedFileSendServer must be embedded to have forward compatible implementations.
type UnimplementedFileSendServer struct {
}

func (UnimplementedFileSendServer) TarStream(FileSend_TarStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TarStream not implemented")
}
func (UnimplementedFileSendServer) mustEmbedUnimplementedFileSendServer() {}

// UnsafeFileSendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileSendServer will
// result in compilation errors.
type UnsafeFileSendServer interface {
	mustEmbedUnimplementedFileSendServer()
}

func RegisterFileSendServer(s grpc.ServiceRegistrar, srv FileSendServer) {
	s.RegisterService(&FileSend_ServiceDesc, srv)
}

func _FileSend_TarStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileSendServer).TarStream(&fileSendTarStreamServer{stream})
}

type FileSend_TarStreamServer interface {
	SendAndClose(*StreamResponse) error
	Recv() (*StreamMessage, error)
	grpc.ServerStream
}

type fileSendTarStreamServer struct {
	grpc.ServerStream
}

func (x *fileSendTarStreamServer) SendAndClose(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileSendTarStreamServer) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileSend_ServiceDesc is the grpc.ServiceDesc for FileSend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileSend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dagger.filesend.v1.FileSend",
	HandlerType: (*FileSendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TarStream",
			Handler:       _FileSend_TarStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "filesend.proto",
}
