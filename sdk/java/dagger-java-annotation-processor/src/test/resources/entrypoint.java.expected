// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.gen.entrypoint;

import io.dagger.client.Client;
import io.dagger.client.Container;
import io.dagger.client.Convert;
import io.dagger.client.Dagger;
import io.dagger.client.DaggerQueryException;
import io.dagger.client.Directory;
import io.dagger.client.Function;
import io.dagger.client.FunctionCall;
import io.dagger.client.FunctionCallArgValue;
import io.dagger.client.JSON;
import io.dagger.client.Module;
import io.dagger.client.ModuleID;
import io.dagger.client.TypeDef;
import io.dagger.client.TypeDefKind;
import jakarta.json.bind.JsonbBuilder;
import java.lang.Class;
import java.lang.Exception;
import java.lang.InterruptedException;
import java.lang.String;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;

public class Entrypoint {
  private final Client dag;

  Entrypoint(Client dag) {
    this.dag = dag;
  }

  public static void main(String[] args) throws Exception {
    try (Client dag = Dagger.connect()) {
      new Entrypoint(dag).dispatch();
    }
  }

  private void dispatch() throws Exception {
    FunctionCall fnCall = dag.currentFunctionCall();
    try {
      String parentName = fnCall.parentName();
      String fnName = fnCall.name();
      JSON parentJson = fnCall.parent();
      List<FunctionCallArgValue> fnArgs = fnCall.inputArgs();
      Map<String, JSON> inputArgs = new HashMap<>();
      for (FunctionCallArgValue fnArg : fnArgs) {
        inputArgs.put(fnArg.name(), fnArg.value());
      }

      JSON result;
      if (parentName.isEmpty()) {
        ModuleID modID = register();
        result = modID.toJSON();
      } else {
        result = invoke(parentJson, parentName, fnName, inputArgs);
      }
      fnCall.returnValue(result);
    } catch (Exception e) {
      fnCall.returnError(dag.error(e.getMessage()));
      throw e;
    }
  }

  private ModuleID register() throws ExecutionException, DaggerQueryException,
      InterruptedException {
    Module module = dag.module()
        .withDescription("Dagger Java Module example")
        .withObject(
            dag.typeDef().withObject("DaggerJavaModule", new TypeDef.WithObjectArguments().withDescription("Dagger Java Module main object"))
                .withFunction(
                    dag.function("containerEcho",
                        dag.typeDef().withObject("Container"))
                        .withDescription("Returns a container that echoes whatever string argument is provided")
                        .withArg("stringArg", dag.typeDef().withKind(TypeDefKind.STRING_KIND), new Function.WithArgArguments().withDescription("string to echo")))
                .withFunction(
                    dag.function("grepDir",
                        dag.typeDef().withKind(TypeDefKind.STRING_KIND))
                        .withDescription("Returns lines that match a pattern in the files of the provided Directory")
                        .withArg("directoryArg", dag.typeDef().withObject("Directory"), new Function.WithArgArguments().withDescription("Directory to grep"))
                        .withArg("pattern", dag.typeDef().withKind(TypeDefKind.STRING_KIND), new Function.WithArgArguments().withDescription("Pattern to search for in the directory"))));
    return module.id();
  }

  private JSON invoke(JSON parentJson, String parentName, String fnName,
      Map<String, JSON> inputArgs) throws Exception {
    try (var jsonb = JsonbBuilder.create()) {
      if (parentName.equals("DaggerJavaModule")) {
        Class clazz = Class.forName("io.lgtd.dagger.java.module.DaggerJavaModule");
        var obj = Convert.fromJSON(dag, parentJson, clazz);
        clazz.getMethod("setClient", Client.class).invoke(obj, dag);
        if (fnName.equals("containerEcho")) {
          String stringArg = (String) Convert.fromJSON(dag, inputArgs.get("stringArg"), String.class);
          Method fn = clazz.getMethod("containerEcho", String.class);
          Container res = (Container) fn.invoke(obj, stringArg);
          return Convert.toJSON(res);
        } else if (fnName.equals("grepDir")) {
          Directory directoryArg = (Directory) Convert.fromJSON(dag, inputArgs.get("directoryArg"), Directory.class);
          String pattern = (String) Convert.fromJSON(dag, inputArgs.get("pattern"), String.class);
          Method fn = clazz.getMethod("grepDir", Directory.class, String.class);
          String res = (String) fn.invoke(obj, directoryArg, pattern);
          return Convert.toJSON(res);
        }
      }
    }
    return null;
  }
}
