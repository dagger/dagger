// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.gen.entrypoint;

import static io.dagger.client.Dagger.dag;

import io.dagger.client.Container;
import io.dagger.client.Directory;
import io.dagger.client.FunctionCall;
import io.dagger.client.FunctionCallArgValue;
import io.dagger.client.JSON;
import io.dagger.client.JsonConverter;
import io.dagger.client.Platform;
import io.dagger.java.module.DaggerJava;
import java.lang.Class;
import java.lang.Error;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class Entrypoint {
  Entrypoint() {
  }

  public static void main(String[] args) throws Exception {
    try {
      new Entrypoint().dispatch();
    } finally {
      dag().close();
    }
  }

  private void dispatch() throws Exception {
    FunctionCall fnCall = dag().currentFunctionCall();
    try {
      String parentName = fnCall.parentName();
      String fnName = fnCall.name();
      JSON parentJson = fnCall.parent();
      List<FunctionCallArgValue> fnArgs = fnCall.inputArgs();
      Map<String, JSON> inputArgs = new HashMap<>();
      for (FunctionCallArgValue fnArg : fnArgs) {
        inputArgs.put(fnArg.name(), fnArg.value());
      }

      JSON result = invoke(parentJson, parentName, fnName, inputArgs);
      fnCall.returnValue(result);
    } catch (InvocationTargetException e) {
      fnCall.returnError(dag().error(e.getTargetException().getMessage()));
      throw e;
    } catch (Exception e) {
      fnCall.returnError(dag().error(e.getMessage()));
      throw e;
    }
  }

  private JSON invoke(JSON parentJson, String parentName, String fnName,
      Map<String, JSON> inputArgs) throws Exception {
    if (parentName.equals("DaggerJava")) {
      if (fnName.equals("containerEcho")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        String stringArg = null;
        if (inputArgs.get("stringArg") != null) {
          stringArg = JsonConverter.fromJSON(inputArgs.get("stringArg"), String.class);
        }
        Objects.requireNonNull(stringArg, "stringArg must not be null");
        Container res = obj.containerEcho(stringArg);
        return JsonConverter.toJSON(res);
      } else if (fnName.equals("grepDir")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        Directory directoryArg = null;
        if (inputArgs.get("directoryArg") != null) {
          directoryArg = JsonConverter.fromJSON(inputArgs.get("directoryArg"), Directory.class);
        }
        Objects.requireNonNull(directoryArg, "directoryArg must not be null");
        String pattern = null;
        if (inputArgs.get("pattern") != null) {
          pattern = JsonConverter.fromJSON(inputArgs.get("pattern"), String.class);
        }
        var pattern_opt = Optional.ofNullable(pattern);
        String res = obj.grepDir(directoryArg, pattern_opt);
        return JsonConverter.toJSON(res);
      } else if (fnName.equals("itself")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        DaggerJava res = obj.itself();
        return JsonConverter.toJSON(res);
      } else if (fnName.equals("isZero")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        int value = 0;
        if (inputArgs.get("value") != null) {
          value = JsonConverter.fromJSON(inputArgs.get("value"), int.class);
        }
        boolean res = obj.isZero(value);
        return JsonConverter.toJSON(res);
      } else if (fnName.equals("doThings")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        String[] stringArray = null;
        if (inputArgs.get("stringArray") != null) {
          stringArray = JsonConverter.fromJSON(inputArgs.get("stringArray"), String[].class);
        }
        Objects.requireNonNull(stringArray, "stringArray must not be null");
        List<Integer> ints = null;
        if (inputArgs.get("ints") != null) {
          ints = Arrays.asList(JsonConverter.fromJSON(inputArgs.get("ints"), Integer[].class));
        }
        Objects.requireNonNull(ints, "ints must not be null");
        List<Container> containers = null;
        if (inputArgs.get("containers") != null) {
          containers = Arrays.asList(JsonConverter.fromJSON(inputArgs.get("containers"), Container[].class));
        }
        Objects.requireNonNull(containers, "containers must not be null");
        int[] res = obj.doThings(stringArray, ints, containers);
        return JsonConverter.toJSON(res);
      } else if (fnName.equals("nonNullableNoDefault")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        String stringArg = null;
        if (inputArgs.get("stringArg") != null) {
          stringArg = JsonConverter.fromJSON(inputArgs.get("stringArg"), String.class);
        }
        Objects.requireNonNull(stringArg, "stringArg must not be null");
        String res = obj.nonNullableNoDefault(stringArg);
        return JsonConverter.toJSON(res);
      } else if (fnName.equals("nonNullableDefault")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        String stringArg = null;
        if (inputArgs.get("stringArg") != null) {
          stringArg = JsonConverter.fromJSON(inputArgs.get("stringArg"), String.class);
        }
        Objects.requireNonNull(stringArg, "stringArg must not be null");
        String res = obj.nonNullableDefault(stringArg);
        return JsonConverter.toJSON(res);
      } else if (fnName.equals("nullable")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        String stringArg = null;
        if (inputArgs.get("stringArg") != null) {
          stringArg = JsonConverter.fromJSON(inputArgs.get("stringArg"), String.class);
        }
        var stringArg_opt = Optional.ofNullable(stringArg);
        String res = obj.nullable(stringArg_opt);
        return JsonConverter.toJSON(res);
      } else if (fnName.equals("nullableDefault")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        String stringArg = null;
        if (inputArgs.get("stringArg") != null) {
          stringArg = JsonConverter.fromJSON(inputArgs.get("stringArg"), String.class);
        }
        var stringArg_opt = Optional.ofNullable(stringArg);
        String res = obj.nullableDefault(stringArg_opt);
        return JsonConverter.toJSON(res);
      } else if (fnName.equals("defaultPlatform")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        Platform res = obj.defaultPlatform();
        return JsonConverter.toJSON(res);
      } else if (fnName.equals("addFloat")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        float a = 0;
        if (inputArgs.get("a") != null) {
          a = JsonConverter.fromJSON(inputArgs.get("a"), float.class);
        }
        float b = 0;
        if (inputArgs.get("b") != null) {
          b = JsonConverter.fromJSON(inputArgs.get("b"), float.class);
        }
        float res = obj.addFloat(a, b);
        return JsonConverter.toJSON(res);
      } else if (fnName.equals("doSomething")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        Directory src = null;
        if (inputArgs.get("src") != null) {
          src = JsonConverter.fromJSON(inputArgs.get("src"), Directory.class);
        }
        Objects.requireNonNull(src, "src must not be null");
        obj.doSomething(src);
        return JsonConverter.toJSON(null);
      } else if (fnName.equals("printSeverity")) {
        Class clazz = Class.forName("io.dagger.java.module.DaggerJava");
        DaggerJava obj = (DaggerJava) JsonConverter.fromJSON(parentJson, clazz);
        DaggerJava.Severity severity = null;
        if (inputArgs.get("severity") != null) {
          severity = JsonConverter.fromJSON(inputArgs.get("severity"), DaggerJava.Severity.class);
        }
        Objects.requireNonNull(severity, "severity must not be null");
        String res = obj.printSeverity(severity);
        return JsonConverter.toJSON(res);
      } if (fnName.equals("")) {
        Directory source = null;
        if (inputArgs.get("source") != null) {
          source = JsonConverter.fromJSON(inputArgs.get("source"), Directory.class);
        }
        var source_opt = Optional.ofNullable(source);
        String version = null;
        if (inputArgs.get("version") != null) {
          version = JsonConverter.fromJSON(inputArgs.get("version"), String.class);
        }
        Objects.requireNonNull(version, "version must not be null");
        DaggerJava res = new DaggerJava(source_opt, version);
        return JsonConverter.toJSON(res);
      }
    }
    throw new InvocationTargetException(new Error("unknown function " + fnName));
  }
}