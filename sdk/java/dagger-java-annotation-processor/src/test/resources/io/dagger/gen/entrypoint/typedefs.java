// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.gen.entrypoint;

import static io.dagger.client.Dagger.dag;

import io.dagger.client.Function;
import io.dagger.client.FunctionCall;
import io.dagger.client.JSON;
import io.dagger.client.JsonConverter;
import io.dagger.client.Module;
import io.dagger.client.ModuleID;
import io.dagger.client.TypeDef;
import io.dagger.client.TypeDefKind;
import io.dagger.client.exception.DaggerExecException;
import io.dagger.client.exception.DaggerQueryException;
import java.lang.Exception;
import java.lang.InterruptedException;
import java.lang.String;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.concurrent.ExecutionException;

public class TypeDefs {
  TypeDefs() {
  }

  public static void main(String[] args) throws Exception {
    try {
      new TypeDefs().dispatch();
    } finally {
      dag().close();
    }
  }

  private void dispatch() throws Exception {
    FunctionCall fnCall = dag().currentFunctionCall();
    try {
      fnCall.returnValue(JsonConverter.toJSON(register()));
    } catch (InvocationTargetException e) {
      fnCall.returnError(dag().error(e.getTargetException().getMessage()));
      throw e;
    } catch (DaggerExecException e) {
      fnCall.returnError(dag().error(e.getMessage()).withValue("stdout", JsonConverter.toJSON(e.getStdOut())).withValue("stderr", JsonConverter.toJSON(e.getStdErr())).withValue("cmd", JsonConverter.toJSON(e.getCmd())).withValue("exitCode", JsonConverter.toJSON(e.getExitCode())).withValue("path", JsonConverter.toJSON(e.getPath())));
      throw e;
    } catch (Exception e) {
      fnCall.returnError(dag().error(e.getMessage()));
      throw e;
    }
  }

  static ModuleID register() throws ExecutionException, DaggerQueryException, InterruptedException {
    Module module = dag().module()
        .withDescription("Dagger Java Module example")
        .withObject(
            dag().typeDef().withObject("DaggerJava", new TypeDef.WithObjectArguments().withDescription("Dagger Java Module main object"))
                .withFunction(
                    dag().function("containerEcho",
                        dag().typeDef().withObject("Container"))
                        .withDescription("Returns a container that echoes whatever string argument is provided")
                        .withArg("stringArg", dag().typeDef().withKind(TypeDefKind.STRING_KIND), new Function.WithArgArguments().withDescription("string to echo").withDefaultValue(JSON.from("\"Hello Dagger\""))))
                .withFunction(
                    dag().function("grepDir",
                        dag().typeDef().withKind(TypeDefKind.STRING_KIND))
                        .withDescription("Returns lines that match a pattern in the files of the provided Directory")
                        .withArg("directoryArg", dag().typeDef().withObject("Directory"), new Function.WithArgArguments().withDescription("Directory to grep").withDefaultPath("sdk/java").withIgnore(List.of("**", "!*.java")))
                        .withArg("pattern", dag().typeDef().withKind(TypeDefKind.STRING_KIND).withOptional(true), new Function.WithArgArguments().withDescription("Pattern to search for in the directory")))
                .withFunction(
                    dag().function("itself",
                        dag().typeDef().withObject("DaggerJava")))
                .withFunction(
                    dag().function("isZero",
                        dag().typeDef().withKind(TypeDefKind.BOOLEAN_KIND))
                        .withDescription("but this description should be exposed")
                        .withArg("value", dag().typeDef().withKind(TypeDefKind.INTEGER_KIND)))
                .withFunction(
                    dag().function("doThings",
                        dag().typeDef().withListOf(dag().typeDef().withKind(TypeDefKind.INTEGER_KIND)))
                        .withArg("stringArray", dag().typeDef().withListOf(dag().typeDef().withKind(TypeDefKind.STRING_KIND)))
                        .withArg("ints", dag().typeDef().withListOf(dag().typeDef().withKind(TypeDefKind.INTEGER_KIND)))
                        .withArg("containers", dag().typeDef().withListOf(dag().typeDef().withObject("Container"))))
                .withFunction(
                    dag().function("nonNullableNoDefault",
                        dag().typeDef().withKind(TypeDefKind.STRING_KIND))
                        .withDescription("User must provide the argument")
                        .withArg("stringArg", dag().typeDef().withKind(TypeDefKind.STRING_KIND)))
                .withFunction(
                    dag().function("nonNullableDefault",
                        dag().typeDef().withKind(TypeDefKind.STRING_KIND))
                        .withDescription("If the user doesn't provide an argument, a default value is used. The argument can't be null.")
                        .withArg("stringArg", dag().typeDef().withKind(TypeDefKind.STRING_KIND), new Function.WithArgArguments().withDefaultValue(JSON.from("\"default value\""))))
                .withFunction(
                    dag().function("nullable",
                        dag().typeDef().withKind(TypeDefKind.STRING_KIND))
                        .withDescription("Make it optional but do not define a value. If the user doesn't provide an argument, it will be\n"
        + " set to null.")
                        .withArg("stringArg", dag().typeDef().withKind(TypeDefKind.STRING_KIND).withOptional(true)))
                .withFunction(
                    dag().function("nullableDefault",
                        dag().typeDef().withKind(TypeDefKind.STRING_KIND))
                        .withDescription("Set a default value in case the user doesn't provide a value and allow for null value.")
                        .withArg("stringArg", dag().typeDef().withKind(TypeDefKind.STRING_KIND).withOptional(true), new Function.WithArgArguments().withDefaultValue(JSON.from("\"Foo\""))))
                .withFunction(
                    dag().function("defaultPlatform",
                        dag().typeDef().withScalar("Platform"))
                        .withDescription("return the default platform as a Scalar value"))
                .withFunction(
                    dag().function("addFloat",
                        dag().typeDef().withKind(TypeDefKind.FLOAT_KIND))
                        .withArg("a", dag().typeDef().withKind(TypeDefKind.FLOAT_KIND))
                        .withArg("b", dag().typeDef().withKind(TypeDefKind.FLOAT_KIND)))
                .withFunction(
                    dag().function("doSomething",
                        dag().typeDef().withKind(TypeDefKind.VOID_KIND).withOptional(true))
                        .withDescription("Function returning nothing")
                        .withArg("src", dag().typeDef().withObject("Directory")))
                .withFunction(
                    dag().function("printSeverity",
                        dag().typeDef().withKind(TypeDefKind.STRING_KIND))
                        .withArg("severity", dag().typeDef().withEnum("Severity")))
                .withField("source", dag().typeDef().withObject("Directory"), new TypeDef.WithFieldArguments().withDescription("Project source directory"))
                .withField("version", dag().typeDef().withKind(TypeDefKind.STRING_KIND))
                .withConstructor(
                    dag().function("",
                        dag().typeDef().withObject("DaggerJava"))
                        .withDescription("Initialize the DaggerJava Module")
                        .withArg("source", dag().typeDef().withObject("Directory").withOptional(true), new Function.WithArgArguments().withDescription("Project source directory"))
                        .withArg("version", dag().typeDef().withKind(TypeDefKind.STRING_KIND), new Function.WithArgArguments().withDescription("Go version").withDefaultValue(JSON.from("\"1.23.2\"")))))
        .withEnum(
            dag().typeDef().withEnum("Severity", new TypeDef.WithEnumArguments().withDescription("Severities"))
                .withEnumValue("DEBUG", new TypeDef.WithEnumValueArguments().withDescription("Debug severity"))
                .withEnumValue("INFO", new TypeDef.WithEnumValueArguments().withDescription("Info severity"))
                .withEnumValue("WARN")
                .withEnumValue("ERROR")
                .withEnumValue("FATAL"));
    return module.id();
  }
}