// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.Boolean;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.concurrent.ExecutionException;

@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(Binding.Deserializer.class)
public class Binding implements IDAble<BindingID> {
    private QueryBuilder queryBuilder;

    private String asString;

    private String digest;

    private BindingID id;

    private Boolean isNull;

    private String name;

    private String typeName;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected Binding() {
    }

    Binding(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>Retrieve the binding value, as type CacheVolume</p>
     */
    public CacheVolume asCacheVolume() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asCacheVolume");
        return new CacheVolume(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type Container</p>
     */
    public Container asContainer() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asContainer");
        return new Container(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type Directory</p>
     */
    public Directory asDirectory() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asDirectory");
        return new Directory(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type Env</p>
     */
    public Env asEnv() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asEnv");
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type File</p>
     */
    public File asFile() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asFile");
        return new File(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type GitRef</p>
     */
    public GitRef asGitRef() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asGitRef");
        return new GitRef(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type GitRepository</p>
     */
    public GitRepository asGitRepository() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asGitRepository");
        return new GitRepository(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type LLM</p>
     */
    public LLM asLLM() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asLLM");
        return new LLM(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type Module</p>
     */
    public Module asModule() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asModule");
        return new Module(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type ModuleConfigClient</p>
     */
    public ModuleConfigClient asModuleConfigClient() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asModuleConfigClient");
        return new ModuleConfigClient(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type ModuleSource</p>
     */
    public ModuleSource asModuleSource() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asModuleSource");
        return new ModuleSource(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type Secret</p>
     */
    public Secret asSecret() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asSecret");
        return new Secret(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type Service</p>
     */
    public Service asService() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asService");
        return new Service(nextQueryBuilder);
    }

    /**
     * <p>Retrieve the binding value, as type Socket</p>
     */
    public Socket asSocket() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asSocket");
        return new Socket(nextQueryBuilder);
    }

    /**
     * <p>The binding's string value</p>
     */
    public String asString() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.asString != null) {
            return asString;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("asString");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>The digest of the binding value</p>
     */
    public String digest() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.digest != null) {
            return digest;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("digest");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>A unique identifier for this Binding.</p>
     */
    public BindingID id() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(BindingID.class);
    }

    /**
     * <p>Returns true if the binding is null</p>
     */
    public Boolean isNull() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.isNull != null) {
            return isNull;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("isNull");
        return nextQueryBuilder.executeQuery(java.lang.Boolean.class);
    }

    /**
     * <p>The binding name</p>
     */
    public String name() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.name != null) {
            return name;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("name");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>The binding type</p>
     */
    public String typeName() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.typeName != null) {
            return typeName;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("typeName");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    public static class Deserializer implements JsonbDeserializer<Binding> {
        @Override
        public Binding deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            Binding o = Dagger.dag().loadBindingFromID(new BindingID(id));
            return o;
        }
    }
}
