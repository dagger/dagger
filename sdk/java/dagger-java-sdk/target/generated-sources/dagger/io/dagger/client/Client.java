// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import io.dagger.client.engineconn.Connection;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.InterruptedException;
import java.lang.String;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * The root of the DAG.
 */
public class Client {
    private QueryBuilder queryBuilder;

    private Connection connection;

    Client(Connection connection) {
        this.connection = connection;
        this.queryBuilder = new QueryBuilder(connection.getGraphQLClient());
    }

    Client(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    public void close() throws Exception {
        this.connection.close();
    }

    /**
     * <p>Constructs a cache volume for a given cache key.</p>
     * @param key A string identifier to target this cache volume (e.g., "modules-cache").
     * @param optArgs cacheVolume optional arguments
     */
    public CacheVolume cacheVolume(String key, CacheVolumeArguments optArgs) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("key", key);
        Arguments fieldArgs = builder.build();
        fieldArgs = fieldArgs.merge(optArgs.toArguments());
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("cacheVolume", fieldArgs);
        return new CacheVolume(nextQueryBuilder);
    }

    /**
     * <p>Constructs a cache volume for a given cache key.</p>
     * @param key A string identifier to target this cache volume (e.g., "modules-cache").
     */
    public CacheVolume cacheVolume(String key) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("key", key);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("cacheVolume", fieldArgs);
        return new CacheVolume(nextQueryBuilder);
    }

    /**
     * <p>Creates a scratch container, with no image or metadata.<br/><br/>To pull an image, follow up with the "from" function.</p>
     * @param optArgs container optional arguments
     */
    public Container container(ContainerArguments optArgs) {
        Arguments.Builder builder = Arguments.newBuilder();
        Arguments fieldArgs = builder.build();
        fieldArgs = fieldArgs.merge(optArgs.toArguments());
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("container", fieldArgs);
        return new Container(nextQueryBuilder);
    }

    /**
     * <p>Creates a scratch container, with no image or metadata.<br/><br/>To pull an image, follow up with the "from" function.</p>
     */
    public Container container() {
        Arguments.Builder builder = Arguments.newBuilder();
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("container", fieldArgs);
        return new Container(nextQueryBuilder);
    }

    /**
     * <p>The FunctionCall context that the SDK caller is currently executing in.<br/><br/>If the caller is not currently executing in a function, this will return an error.</p>
     */
    public FunctionCall currentFunctionCall() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("currentFunctionCall");
        return new FunctionCall(nextQueryBuilder);
    }

    /**
     * <p>The module currently being served in the session, if any.</p>
     */
    public CurrentModule currentModule() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("currentModule");
        return new CurrentModule(nextQueryBuilder);
    }

    /**
     * <p>The TypeDef representations of the objects currently being served in the session.</p>
     */
    public List<TypeDef> currentTypeDefs() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("currentTypeDefs");
        nextQueryBuilder = nextQueryBuilder.chain(List.of("id"));
        List<QueryBuilder> builders = nextQueryBuilder.executeObjectListQuery(TypeDef.class);
        return builders.stream().map(qb -> new TypeDef(qb)).toList();
    }

    /**
     * <p>The default platform of the engine.</p>
     */
    public Platform defaultPlatform() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("defaultPlatform");
        return nextQueryBuilder.executeQuery(Platform.class);
    }

    /**
     * <p>Creates an empty directory.</p>
     */
    public Directory directory() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("directory");
        return new Directory(nextQueryBuilder);
    }

    /**
     * <p>The Dagger engine container configuration and state</p>
     */
    public Engine engine() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("engine");
        return new Engine(nextQueryBuilder);
    }

    /**
     * <p>Initialize a new environment</p>
     *
     * @apiNote EXPERIMENTAL: Environments are not yet stabilized
     * @param optArgs env optional arguments
     */
    public Env env(EnvArguments optArgs) {
        Arguments.Builder builder = Arguments.newBuilder();
        Arguments fieldArgs = builder.build();
        fieldArgs = fieldArgs.merge(optArgs.toArguments());
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("env", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Initialize a new environment</p>
     *
     * @apiNote EXPERIMENTAL: Environments are not yet stabilized
     */
    public Env env() {
        Arguments.Builder builder = Arguments.newBuilder();
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("env", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create a new error.</p>
     * @param message A brief description of the error.
     */
    public Error error(String message) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("message", message);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("error", fieldArgs);
        return new Error(nextQueryBuilder);
    }

    /**
     * <p>Creates a function.</p>
     * @param name Name of the function, in its original format from the implementation language.
     * @param returnType Return type of the function.
     */
    public Function function(String name, TypeDef returnType) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("returnType", returnType);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("function", fieldArgs);
        return new Function(nextQueryBuilder);
    }

    /**
     * <p>Create a code generation result, given a directory containing the generated code.</p>
     */
    public GeneratedCode generatedCode(Directory code) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("code", code);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("generatedCode", fieldArgs);
        return new GeneratedCode(nextQueryBuilder);
    }

    /**
     * <p>Queries a Git repository.</p>
     * @param url URL of the git repository.<br/><br/>Can be formatted as `https://{host}/{owner}/{repo}`, `git@{host}:{owner}/{repo}`.<br/><br/>Suffix ".git" is optional.
     * @param optArgs git optional arguments
     */
    public GitRepository git(String url, GitArguments optArgs) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("url", url);
        Arguments fieldArgs = builder.build();
        fieldArgs = fieldArgs.merge(optArgs.toArguments());
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("git", fieldArgs);
        return new GitRepository(nextQueryBuilder);
    }

    /**
     * <p>Queries a Git repository.</p>
     * @param url URL of the git repository.<br/><br/>Can be formatted as `https://{host}/{owner}/{repo}`, `git@{host}:{owner}/{repo}`.<br/><br/>Suffix ".git" is optional.
     */
    public GitRepository git(String url) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("url", url);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("git", fieldArgs);
        return new GitRepository(nextQueryBuilder);
    }

    /**
     * <p>Queries the host environment.</p>
     */
    public Host host() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("host");
        return new Host(nextQueryBuilder);
    }

    /**
     * <p>Returns a file containing an http remote url content.</p>
     * @param url HTTP url to get the content from (e.g., "https://docs.dagger.io").
     * @param optArgs http optional arguments
     */
    public File http(String url, HttpArguments optArgs) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("url", url);
        Arguments fieldArgs = builder.build();
        fieldArgs = fieldArgs.merge(optArgs.toArguments());
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("http", fieldArgs);
        return new File(nextQueryBuilder);
    }

    /**
     * <p>Returns a file containing an http remote url content.</p>
     * @param url HTTP url to get the content from (e.g., "https://docs.dagger.io").
     */
    public File http(String url) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("url", url);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("http", fieldArgs);
        return new File(nextQueryBuilder);
    }

    /**
     * <p>Initialize a Large Language Model (LLM)</p>
     *
     * @apiNote EXPERIMENTAL: LLM support is not yet stabilized
     * @param optArgs llm optional arguments
     */
    public LLM llm(LlmArguments optArgs) {
        Arguments.Builder builder = Arguments.newBuilder();
        Arguments fieldArgs = builder.build();
        fieldArgs = fieldArgs.merge(optArgs.toArguments());
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("llm", fieldArgs);
        return new LLM(nextQueryBuilder);
    }

    /**
     * <p>Initialize a Large Language Model (LLM)</p>
     *
     * @apiNote EXPERIMENTAL: LLM support is not yet stabilized
     */
    public LLM llm() {
        Arguments.Builder builder = Arguments.newBuilder();
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("llm", fieldArgs);
        return new LLM(nextQueryBuilder);
    }

    /**
     * <p>Load a Binding from its ID.</p>
     */
    public Binding loadBindingFromID(BindingID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadBindingFromID", fieldArgs);
        return new Binding(nextQueryBuilder);
    }

    /**
     * <p>Load a CacheVolume from its ID.</p>
     */
    public CacheVolume loadCacheVolumeFromID(CacheVolumeID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadCacheVolumeFromID", fieldArgs);
        return new CacheVolume(nextQueryBuilder);
    }

    /**
     * <p>Load a Container from its ID.</p>
     */
    public Container loadContainerFromID(ContainerID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadContainerFromID", fieldArgs);
        return new Container(nextQueryBuilder);
    }

    /**
     * <p>Load a CurrentModule from its ID.</p>
     */
    public CurrentModule loadCurrentModuleFromID(CurrentModuleID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadCurrentModuleFromID", fieldArgs);
        return new CurrentModule(nextQueryBuilder);
    }

    /**
     * <p>Load a Directory from its ID.</p>
     */
    public Directory loadDirectoryFromID(DirectoryID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadDirectoryFromID", fieldArgs);
        return new Directory(nextQueryBuilder);
    }

    /**
     * <p>Load a EngineCacheEntry from its ID.</p>
     */
    public EngineCacheEntry loadEngineCacheEntryFromID(EngineCacheEntryID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadEngineCacheEntryFromID", fieldArgs);
        return new EngineCacheEntry(nextQueryBuilder);
    }

    /**
     * <p>Load a EngineCacheEntrySet from its ID.</p>
     */
    public EngineCacheEntrySet loadEngineCacheEntrySetFromID(EngineCacheEntrySetID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadEngineCacheEntrySetFromID", fieldArgs);
        return new EngineCacheEntrySet(nextQueryBuilder);
    }

    /**
     * <p>Load a EngineCache from its ID.</p>
     */
    public EngineCache loadEngineCacheFromID(EngineCacheID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadEngineCacheFromID", fieldArgs);
        return new EngineCache(nextQueryBuilder);
    }

    /**
     * <p>Load a Engine from its ID.</p>
     */
    public Engine loadEngineFromID(EngineID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadEngineFromID", fieldArgs);
        return new Engine(nextQueryBuilder);
    }

    /**
     * <p>Load a EnumTypeDef from its ID.</p>
     */
    public EnumTypeDef loadEnumTypeDefFromID(EnumTypeDefID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadEnumTypeDefFromID", fieldArgs);
        return new EnumTypeDef(nextQueryBuilder);
    }

    /**
     * <p>Load a EnumValueTypeDef from its ID.</p>
     */
    public EnumValueTypeDef loadEnumValueTypeDefFromID(EnumValueTypeDefID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadEnumValueTypeDefFromID", fieldArgs);
        return new EnumValueTypeDef(nextQueryBuilder);
    }

    /**
     * <p>Load a Env from its ID.</p>
     */
    public Env loadEnvFromID(EnvID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadEnvFromID", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Load a EnvVariable from its ID.</p>
     */
    public EnvVariable loadEnvVariableFromID(EnvVariableID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadEnvVariableFromID", fieldArgs);
        return new EnvVariable(nextQueryBuilder);
    }

    /**
     * <p>Load a Error from its ID.</p>
     */
    public Error loadErrorFromID(ErrorID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadErrorFromID", fieldArgs);
        return new Error(nextQueryBuilder);
    }

    /**
     * <p>Load a ErrorValue from its ID.</p>
     */
    public ErrorValue loadErrorValueFromID(ErrorValueID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadErrorValueFromID", fieldArgs);
        return new ErrorValue(nextQueryBuilder);
    }

    /**
     * <p>Load a FieldTypeDef from its ID.</p>
     */
    public FieldTypeDef loadFieldTypeDefFromID(FieldTypeDefID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadFieldTypeDefFromID", fieldArgs);
        return new FieldTypeDef(nextQueryBuilder);
    }

    /**
     * <p>Load a File from its ID.</p>
     */
    public File loadFileFromID(FileID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadFileFromID", fieldArgs);
        return new File(nextQueryBuilder);
    }

    /**
     * <p>Load a FunctionArg from its ID.</p>
     */
    public FunctionArg loadFunctionArgFromID(FunctionArgID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadFunctionArgFromID", fieldArgs);
        return new FunctionArg(nextQueryBuilder);
    }

    /**
     * <p>Load a FunctionCallArgValue from its ID.</p>
     */
    public FunctionCallArgValue loadFunctionCallArgValueFromID(FunctionCallArgValueID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadFunctionCallArgValueFromID", fieldArgs);
        return new FunctionCallArgValue(nextQueryBuilder);
    }

    /**
     * <p>Load a FunctionCall from its ID.</p>
     */
    public FunctionCall loadFunctionCallFromID(FunctionCallID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadFunctionCallFromID", fieldArgs);
        return new FunctionCall(nextQueryBuilder);
    }

    /**
     * <p>Load a Function from its ID.</p>
     */
    public Function loadFunctionFromID(FunctionID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadFunctionFromID", fieldArgs);
        return new Function(nextQueryBuilder);
    }

    /**
     * <p>Load a GeneratedCode from its ID.</p>
     */
    public GeneratedCode loadGeneratedCodeFromID(GeneratedCodeID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadGeneratedCodeFromID", fieldArgs);
        return new GeneratedCode(nextQueryBuilder);
    }

    /**
     * <p>Load a GitRef from its ID.</p>
     */
    public GitRef loadGitRefFromID(GitRefID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadGitRefFromID", fieldArgs);
        return new GitRef(nextQueryBuilder);
    }

    /**
     * <p>Load a GitRepository from its ID.</p>
     */
    public GitRepository loadGitRepositoryFromID(GitRepositoryID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadGitRepositoryFromID", fieldArgs);
        return new GitRepository(nextQueryBuilder);
    }

    /**
     * <p>Load a Host from its ID.</p>
     */
    public Host loadHostFromID(HostID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadHostFromID", fieldArgs);
        return new Host(nextQueryBuilder);
    }

    /**
     * <p>Load a InputTypeDef from its ID.</p>
     */
    public InputTypeDef loadInputTypeDefFromID(InputTypeDefID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadInputTypeDefFromID", fieldArgs);
        return new InputTypeDef(nextQueryBuilder);
    }

    /**
     * <p>Load a InterfaceTypeDef from its ID.</p>
     */
    public InterfaceTypeDef loadInterfaceTypeDefFromID(InterfaceTypeDefID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadInterfaceTypeDefFromID", fieldArgs);
        return new InterfaceTypeDef(nextQueryBuilder);
    }

    /**
     * <p>Load a LLM from its ID.</p>
     */
    public LLM loadLLMFromID(LLMID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadLLMFromID", fieldArgs);
        return new LLM(nextQueryBuilder);
    }

    /**
     * <p>Load a LLMTokenUsage from its ID.</p>
     */
    public LLMTokenUsage loadLLMTokenUsageFromID(LLMTokenUsageID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadLLMTokenUsageFromID", fieldArgs);
        return new LLMTokenUsage(nextQueryBuilder);
    }

    /**
     * <p>Load a Label from its ID.</p>
     */
    public Label loadLabelFromID(LabelID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadLabelFromID", fieldArgs);
        return new Label(nextQueryBuilder);
    }

    /**
     * <p>Load a ListTypeDef from its ID.</p>
     */
    public ListTypeDef loadListTypeDefFromID(ListTypeDefID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadListTypeDefFromID", fieldArgs);
        return new ListTypeDef(nextQueryBuilder);
    }

    /**
     * <p>Load a ModuleConfigClient from its ID.</p>
     */
    public ModuleConfigClient loadModuleConfigClientFromID(ModuleConfigClientID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadModuleConfigClientFromID", fieldArgs);
        return new ModuleConfigClient(nextQueryBuilder);
    }

    /**
     * <p>Load a Module from its ID.</p>
     */
    public Module loadModuleFromID(ModuleID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadModuleFromID", fieldArgs);
        return new Module(nextQueryBuilder);
    }

    /**
     * <p>Load a ModuleSource from its ID.</p>
     */
    public ModuleSource loadModuleSourceFromID(ModuleSourceID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadModuleSourceFromID", fieldArgs);
        return new ModuleSource(nextQueryBuilder);
    }

    /**
     * <p>Load a ObjectTypeDef from its ID.</p>
     */
    public ObjectTypeDef loadObjectTypeDefFromID(ObjectTypeDefID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadObjectTypeDefFromID", fieldArgs);
        return new ObjectTypeDef(nextQueryBuilder);
    }

    /**
     * <p>Load a Port from its ID.</p>
     */
    public Port loadPortFromID(PortID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadPortFromID", fieldArgs);
        return new Port(nextQueryBuilder);
    }

    /**
     * <p>Load a SDKConfig from its ID.</p>
     */
    public SDKConfig loadSDKConfigFromID(SDKConfigID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadSDKConfigFromID", fieldArgs);
        return new SDKConfig(nextQueryBuilder);
    }

    /**
     * <p>Load a ScalarTypeDef from its ID.</p>
     */
    public ScalarTypeDef loadScalarTypeDefFromID(ScalarTypeDefID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadScalarTypeDefFromID", fieldArgs);
        return new ScalarTypeDef(nextQueryBuilder);
    }

    /**
     * <p>Load a Secret from its ID.</p>
     */
    public Secret loadSecretFromID(SecretID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadSecretFromID", fieldArgs);
        return new Secret(nextQueryBuilder);
    }

    /**
     * <p>Load a Service from its ID.</p>
     */
    public Service loadServiceFromID(ServiceID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadServiceFromID", fieldArgs);
        return new Service(nextQueryBuilder);
    }

    /**
     * <p>Load a Socket from its ID.</p>
     */
    public Socket loadSocketFromID(SocketID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadSocketFromID", fieldArgs);
        return new Socket(nextQueryBuilder);
    }

    /**
     * <p>Load a SourceMap from its ID.</p>
     */
    public SourceMap loadSourceMapFromID(SourceMapID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadSourceMapFromID", fieldArgs);
        return new SourceMap(nextQueryBuilder);
    }

    /**
     * <p>Load a Terminal from its ID.</p>
     */
    public Terminal loadTerminalFromID(TerminalID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadTerminalFromID", fieldArgs);
        return new Terminal(nextQueryBuilder);
    }

    /**
     * <p>Load a TypeDef from its ID.</p>
     */
    public TypeDef loadTypeDefFromID(TypeDefID id) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("id", id);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loadTypeDefFromID", fieldArgs);
        return new TypeDef(nextQueryBuilder);
    }

    /**
     * <p>Create a new module.</p>
     */
    public Module module() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("module");
        return new Module(nextQueryBuilder);
    }

    /**
     * <p>Create a new module source instance from a source ref string</p>
     * @param refString The string ref representation of the module source
     * @param optArgs moduleSource optional arguments
     */
    public ModuleSource moduleSource(String refString, ModuleSourceArguments optArgs) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("refString", refString);
        Arguments fieldArgs = builder.build();
        fieldArgs = fieldArgs.merge(optArgs.toArguments());
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("moduleSource", fieldArgs);
        return new ModuleSource(nextQueryBuilder);
    }

    /**
     * <p>Create a new module source instance from a source ref string</p>
     * @param refString The string ref representation of the module source
     */
    public ModuleSource moduleSource(String refString) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("refString", refString);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("moduleSource", fieldArgs);
        return new ModuleSource(nextQueryBuilder);
    }

    /**
     * <p>Creates a new secret.</p>
     * @param uri The URI of the secret store
     */
    public Secret secret(String uri) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("uri", uri);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("secret", fieldArgs);
        return new Secret(nextQueryBuilder);
    }

    /**
     * <p>Sets a secret given a user defined name to its plaintext and returns the secret.<br/><br/>The plaintext value is limited to a size of 128000 bytes.</p>
     * @param name The user defined name for this secret
     * @param plaintext The plaintext of the secret
     */
    public Secret setSecret(String name, String plaintext) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("plaintext", plaintext);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("setSecret", fieldArgs);
        return new Secret(nextQueryBuilder);
    }

    /**
     * <p>Creates source map metadata.</p>
     * @param filename The filename from the module source.
     * @param line The line number within the filename.
     * @param column The column number within the line.
     */
    public SourceMap sourceMap(String filename, Integer line, Integer column) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("filename", filename);
        builder.add("line", line);
        builder.add("column", column);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("sourceMap", fieldArgs);
        return new SourceMap(nextQueryBuilder);
    }

    /**
     * <p>Create a new TypeDef.</p>
     */
    public TypeDef typeDef() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("typeDef");
        return new TypeDef(nextQueryBuilder);
    }

    /**
     * <p>Get the current Dagger Engine version.</p>
     */
    public String version() throws InterruptedException, ExecutionException, DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("version");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * Optional arguments for {@link Client#cacheVolume}
     *
     */
    public static class CacheVolumeArguments {
        private String namespace;

        /**
         *
         */
        public CacheVolumeArguments withNamespace(String namespace) {
            this.namespace = namespace;
            return this;
        }

        Arguments toArguments() {
            Arguments.Builder builder = Arguments.newBuilder();
            if (namespace != null) {
                builder.add("namespace", this.namespace);
            }

                    return builder.build();
        }
    }

    /**
     * Optional arguments for {@link Client#container}
     *
     */
    public static class ContainerArguments {
        private Platform platform;

        /**
         * Platform to initialize the container with. Defaults to the native platform of the current engine
         */
        public ContainerArguments withPlatform(Platform platform) {
            this.platform = platform;
            return this;
        }

        Arguments toArguments() {
            Arguments.Builder builder = Arguments.newBuilder();
            if (platform != null) {
                builder.add("platform", this.platform);
            }

                    return builder.build();
        }
    }

    /**
     * Optional arguments for {@link Client#env}
     *
     */
    public static class EnvArguments {
        private Boolean privileged;

        private Boolean writable;

        /**
         * Give the environment the same privileges as the caller: core API including host access, current module, and dependencies
         */
        public EnvArguments withPrivileged(Boolean privileged) {
            this.privileged = privileged;
            return this;
        }

        /**
         * Allow new outputs to be declared and saved in the environment
         */
        public EnvArguments withWritable(Boolean writable) {
            this.writable = writable;
            return this;
        }

        Arguments toArguments() {
            Arguments.Builder builder = Arguments.newBuilder();
            if (privileged != null) {
                builder.add("privileged", this.privileged);
            }

            if (writable != null) {
                builder.add("writable", this.writable);
            }

                    return builder.build();
        }
    }

    /**
     * Optional arguments for {@link Client#git}
     *
     */
    public static class GitArguments {
        private Boolean keepGitDir;

        private Service experimentalServiceHost;

        private String sshKnownHosts;

        private Socket sshAuthSocket;

        /**
         * DEPRECATED: Set to true to keep .git directory.
         */
        public GitArguments withKeepGitDir(Boolean keepGitDir) {
            this.keepGitDir = keepGitDir;
            return this;
        }

        /**
         * A service which must be started before the repo is fetched.
         */
        public GitArguments withExperimentalServiceHost(Service experimentalServiceHost) {
            this.experimentalServiceHost = experimentalServiceHost;
            return this;
        }

        /**
         * Set SSH known hosts
         */
        public GitArguments withSshKnownHosts(String sshKnownHosts) {
            this.sshKnownHosts = sshKnownHosts;
            return this;
        }

        /**
         * Set SSH auth socket
         */
        public GitArguments withSshAuthSocket(Socket sshAuthSocket) {
            this.sshAuthSocket = sshAuthSocket;
            return this;
        }

        Arguments toArguments() {
            Arguments.Builder builder = Arguments.newBuilder();
            if (keepGitDir != null) {
                builder.add("keepGitDir", this.keepGitDir);
            }

            if (experimentalServiceHost != null) {
                builder.add("experimentalServiceHost", this.experimentalServiceHost);
            }

            if (sshKnownHosts != null) {
                builder.add("sshKnownHosts", this.sshKnownHosts);
            }

            if (sshAuthSocket != null) {
                builder.add("sshAuthSocket", this.sshAuthSocket);
            }

                    return builder.build();
        }
    }

    /**
     * Optional arguments for {@link Client#http}
     *
     */
    public static class HttpArguments {
        private Service experimentalServiceHost;

        /**
         * A service which must be started before the URL is fetched.
         */
        public HttpArguments withExperimentalServiceHost(Service experimentalServiceHost) {
            this.experimentalServiceHost = experimentalServiceHost;
            return this;
        }

        Arguments toArguments() {
            Arguments.Builder builder = Arguments.newBuilder();
            if (experimentalServiceHost != null) {
                builder.add("experimentalServiceHost", this.experimentalServiceHost);
            }

                    return builder.build();
        }
    }

    /**
     * Optional arguments for {@link Client#llm}
     *
     */
    public static class LlmArguments {
        private String model;

        private Integer maxAPICalls;

        /**
         * Model to use
         */
        public LlmArguments withModel(String model) {
            this.model = model;
            return this;
        }

        /**
         * Cap the number of API calls for this LLM
         */
        public LlmArguments withMaxAPICalls(Integer maxAPICalls) {
            this.maxAPICalls = maxAPICalls;
            return this;
        }

        Arguments toArguments() {
            Arguments.Builder builder = Arguments.newBuilder();
            if (model != null) {
                builder.add("model", this.model);
            }

            if (maxAPICalls != null) {
                builder.add("maxAPICalls", this.maxAPICalls);
            }

                    return builder.build();
        }
    }

    /**
     * Optional arguments for {@link Client#moduleSource}
     *
     */
    public static class ModuleSourceArguments {
        private String refPin;

        private Boolean disableFindUp;

        private Boolean allowNotExists;

        private ModuleSourceKind requireKind;

        /**
         * The pinned version of the module source
         */
        public ModuleSourceArguments withRefPin(String refPin) {
            this.refPin = refPin;
            return this;
        }

        /**
         * If true, do not attempt to find dagger.json in a parent directory of the provided path. Only relevant for local module sources.
         */
        public ModuleSourceArguments withDisableFindUp(Boolean disableFindUp) {
            this.disableFindUp = disableFindUp;
            return this;
        }

        /**
         * If true, do not error out if the provided ref string is a local path and does not exist yet. Useful when initializing new modules in directories that don't exist yet.
         */
        public ModuleSourceArguments withAllowNotExists(Boolean allowNotExists) {
            this.allowNotExists = allowNotExists;
            return this;
        }

        /**
         * If set, error out if the ref string is not of the provided requireKind.
         */
        public ModuleSourceArguments withRequireKind(ModuleSourceKind requireKind) {
            this.requireKind = requireKind;
            return this;
        }

        Arguments toArguments() {
            Arguments.Builder builder = Arguments.newBuilder();
            if (refPin != null) {
                builder.add("refPin", this.refPin);
            }

            if (disableFindUp != null) {
                builder.add("disableFindUp", this.disableFindUp);
            }

            if (allowNotExists != null) {
                builder.add("allowNotExists", this.allowNotExists);
            }

            if (requireKind != null) {
                builder.add("requireKind", this.requireKind);
            }

                    return builder.build();
        }
    }
}
