// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * Reflective module API provided to functions at runtime.
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(CurrentModule.Deserializer.class)
public class CurrentModule implements IDAble<CurrentModuleID> {
    private QueryBuilder queryBuilder;

    private CurrentModuleID id;

    private String name;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected CurrentModule() {
    }

    CurrentModule(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>A unique identifier for this CurrentModule.</p>
     */
    public CurrentModuleID id() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(CurrentModuleID.class);
    }

    /**
     * <p>The name of the module being executed in</p>
     */
    public String name() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.name != null) {
            return name;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("name");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>The directory containing the module's source code loaded into the engine (plus any generated code that may have been created).</p>
     */
    public Directory source() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("source");
        return new Directory(nextQueryBuilder);
    }

    /**
     * <p>Load a directory from the module's scratch working directory, including any changes that may have been made to it during module function execution.</p>
     * @param path Location of the directory to access (e.g., ".").
     * @param optArgs workdir optional arguments
     */
    public Directory workdir(String path, WorkdirArguments optArgs) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("path", path);
        Arguments fieldArgs = builder.build();
        fieldArgs = fieldArgs.merge(optArgs.toArguments());
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("workdir", fieldArgs);
        return new Directory(nextQueryBuilder);
    }

    /**
     * <p>Load a directory from the module's scratch working directory, including any changes that may have been made to it during module function execution.</p>
     * @param path Location of the directory to access (e.g., ".").
     */
    public Directory workdir(String path) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("path", path);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("workdir", fieldArgs);
        return new Directory(nextQueryBuilder);
    }

    /**
     * <p>Load a file from the module's scratch working directory, including any changes that may have been made to it during module function execution.Load a file from the module's scratch working directory, including any changes that may have been made to it during module function execution.</p>
     * @param path Location of the file to retrieve (e.g., "README.md").
     */
    public File workdirFile(String path) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("path", path);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("workdirFile", fieldArgs);
        return new File(nextQueryBuilder);
    }

    public static class Deserializer implements JsonbDeserializer<CurrentModule> {
        @Override
        public CurrentModule deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            CurrentModule o = Dagger.dag().loadCurrentModuleFromID(new CurrentModuleID(id));
            return o;
        }
    }

    /**
     * Optional arguments for {@link CurrentModule#workdir}
     *
     */
    public static class WorkdirArguments {
        private List<String> exclude;

        private List<String> include;

        /**
         * Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
         */
        public WorkdirArguments withExclude(List<String> exclude) {
            this.exclude = exclude;
            return this;
        }

        /**
         * Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
         */
        public WorkdirArguments withInclude(List<String> include) {
            this.include = include;
            return this;
        }

        Arguments toArguments() {
            Arguments.Builder builder = Arguments.newBuilder();
            if (exclude != null) {
                builder.add("exclude", this.exclude);
            }

            if (include != null) {
                builder.add("include", this.include);
            }

                    return builder.build();
        }
    }
}
