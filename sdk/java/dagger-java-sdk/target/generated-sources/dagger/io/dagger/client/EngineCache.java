// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.Deprecated;
import java.lang.Integer;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.concurrent.ExecutionException;

/**
 * A cache storage for the Dagger engine
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(EngineCache.Deserializer.class)
public class EngineCache implements IDAble<EngineCacheID> {
    private QueryBuilder queryBuilder;

    private EngineCacheID id;

    private Integer keepBytes;

    private Integer maxUsedSpace;

    private Integer minFreeSpace;

    private Void prune;

    private Integer reservedSpace;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected EngineCache() {
    }

    EngineCache(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>The current set of entries in the cache</p>
     * @param optArgs entrySet optional arguments
     */
    public EngineCacheEntrySet entrySet(EntrySetArguments optArgs) {
        Arguments.Builder builder = Arguments.newBuilder();
        Arguments fieldArgs = builder.build();
        fieldArgs = fieldArgs.merge(optArgs.toArguments());
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("entrySet", fieldArgs);
        return new EngineCacheEntrySet(nextQueryBuilder);
    }

    /**
     * <p>The current set of entries in the cache</p>
     */
    public EngineCacheEntrySet entrySet() {
        Arguments.Builder builder = Arguments.newBuilder();
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("entrySet", fieldArgs);
        return new EngineCacheEntrySet(nextQueryBuilder);
    }

    /**
     * <p>A unique identifier for this EngineCache.</p>
     */
    public EngineCacheID id() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(EngineCacheID.class);
    }

    /**
     * <p>The maximum bytes to keep in the cache without pruning, after which automatic pruning may kick in.</p>@deprecated Use minFreeSpace instead.
     */
    @Deprecated
    public Integer keepBytes() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.keepBytes != null) {
            return keepBytes;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("keepBytes");
        return nextQueryBuilder.executeQuery(java.lang.Integer.class);
    }

    /**
     * <p>The maximum bytes to keep in the cache without pruning.</p>
     */
    public Integer maxUsedSpace() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.maxUsedSpace != null) {
            return maxUsedSpace;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("maxUsedSpace");
        return nextQueryBuilder.executeQuery(java.lang.Integer.class);
    }

    /**
     * <p>The target amount of free disk space the garbage collector will attempt to leave.</p>
     */
    public Integer minFreeSpace() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.minFreeSpace != null) {
            return minFreeSpace;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("minFreeSpace");
        return nextQueryBuilder.executeQuery(java.lang.Integer.class);
    }

    /**
     * <p>Prune the cache of releaseable entries</p>
     */
    public Void prune() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.prune != null) {
            return prune;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("prune");
        return nextQueryBuilder.executeQuery(Void.class);
    }

    /**
     * <p></p>
     */
    public Integer reservedSpace() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.reservedSpace != null) {
            return reservedSpace;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("reservedSpace");
        return nextQueryBuilder.executeQuery(java.lang.Integer.class);
    }

    public static class Deserializer implements JsonbDeserializer<EngineCache> {
        @Override
        public EngineCache deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            EngineCache o = Dagger.dag().loadEngineCacheFromID(new EngineCacheID(id));
            return o;
        }
    }

    /**
     * Optional arguments for {@link EngineCache#entrySet}
     *
     */
    public static class EntrySetArguments {
        private String key;

        /**
         *
         */
        public EntrySetArguments withKey(String key) {
            this.key = key;
            return this;
        }

        Arguments toArguments() {
            Arguments.Builder builder = Arguments.newBuilder();
            if (key != null) {
                builder.add("key", this.key);
            }

                    return builder.build();
        }
    }
}
