// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.concurrent.ExecutionException;

/**
 * An individual cache entry in a cache entry set
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(EngineCacheEntry.Deserializer.class)
public class EngineCacheEntry implements IDAble<EngineCacheEntryID> {
    private QueryBuilder queryBuilder;

    private Boolean activelyUsed;

    private Integer createdTimeUnixNano;

    private String description;

    private Integer diskSpaceBytes;

    private EngineCacheEntryID id;

    private Integer mostRecentUseTimeUnixNano;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected EngineCacheEntry() {
    }

    EngineCacheEntry(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>Whether the cache entry is actively being used.</p>
     */
    public Boolean activelyUsed() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.activelyUsed != null) {
            return activelyUsed;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("activelyUsed");
        return nextQueryBuilder.executeQuery(java.lang.Boolean.class);
    }

    /**
     * <p>The time the cache entry was created, in Unix nanoseconds.</p>
     */
    public Integer createdTimeUnixNano() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.createdTimeUnixNano != null) {
            return createdTimeUnixNano;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("createdTimeUnixNano");
        return nextQueryBuilder.executeQuery(java.lang.Integer.class);
    }

    /**
     * <p>The description of the cache entry.</p>
     */
    public String description() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.description != null) {
            return description;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("description");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>The disk space used by the cache entry.</p>
     */
    public Integer diskSpaceBytes() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.diskSpaceBytes != null) {
            return diskSpaceBytes;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("diskSpaceBytes");
        return nextQueryBuilder.executeQuery(java.lang.Integer.class);
    }

    /**
     * <p>A unique identifier for this EngineCacheEntry.</p>
     */
    public EngineCacheEntryID id() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(EngineCacheEntryID.class);
    }

    /**
     * <p>The most recent time the cache entry was used, in Unix nanoseconds.</p>
     */
    public Integer mostRecentUseTimeUnixNano() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.mostRecentUseTimeUnixNano != null) {
            return mostRecentUseTimeUnixNano;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("mostRecentUseTimeUnixNano");
        return nextQueryBuilder.executeQuery(java.lang.Integer.class);
    }

    public static class Deserializer implements JsonbDeserializer<EngineCacheEntry> {
        @Override
        public EngineCacheEntry deserialize(JsonParser parser, DeserializationContext ctx,
                Type type) {
            String id = ctx.deserialize(String.class, parser);
            EngineCacheEntry o = Dagger.dag().loadEngineCacheEntryFromID(new EngineCacheEntryID(id));
            return o;
        }
    }
}
