// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.Integer;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * A set of cache entries returned by a query to a cache
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(EngineCacheEntrySet.Deserializer.class)
public class EngineCacheEntrySet implements IDAble<EngineCacheEntrySetID> {
    private QueryBuilder queryBuilder;

    private Integer diskSpaceBytes;

    private Integer entryCount;

    private EngineCacheEntrySetID id;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected EngineCacheEntrySet() {
    }

    EngineCacheEntrySet(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>The total disk space used by the cache entries in this set.</p>
     */
    public Integer diskSpaceBytes() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.diskSpaceBytes != null) {
            return diskSpaceBytes;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("diskSpaceBytes");
        return nextQueryBuilder.executeQuery(java.lang.Integer.class);
    }

    /**
     * <p>The list of individual cache entries in the set</p>
     */
    public List<EngineCacheEntry> entries() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("entries");
        nextQueryBuilder = nextQueryBuilder.chain(List.of("id"));
        List<QueryBuilder> builders = nextQueryBuilder.executeObjectListQuery(EngineCacheEntry.class);
        return builders.stream().map(qb -> new EngineCacheEntry(qb)).toList();
    }

    /**
     * <p>The number of cache entries in this set.</p>
     */
    public Integer entryCount() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.entryCount != null) {
            return entryCount;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("entryCount");
        return nextQueryBuilder.executeQuery(java.lang.Integer.class);
    }

    /**
     * <p>A unique identifier for this EngineCacheEntrySet.</p>
     */
    public EngineCacheEntrySetID id() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(EngineCacheEntrySetID.class);
    }

    public static class Deserializer implements JsonbDeserializer<EngineCacheEntrySet> {
        @Override
        public EngineCacheEntrySet deserialize(JsonParser parser, DeserializationContext ctx,
                Type type) {
            String id = ctx.deserialize(String.class, parser);
            EngineCacheEntrySet o = Dagger.dag().loadEngineCacheEntrySetFromID(new EngineCacheEntrySetID(id));
            return o;
        }
    }
}
