// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.ExecutionException;

@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(Env.Deserializer.class)
public class Env implements IDAble<EnvID> {
    private QueryBuilder queryBuilder;

    private EnvID id;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected Env() {
    }

    Env(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>A unique identifier for this Env.</p>
     */
    public EnvID id() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(EnvID.class);
    }

    /**
     * <p>retrieve an input value by name</p>
     */
    public Binding input(String name) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("input", fieldArgs);
        return new Binding(nextQueryBuilder);
    }

    /**
     * <p>return all input values for the environment</p>
     */
    public List<Binding> inputs() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("inputs");
        nextQueryBuilder = nextQueryBuilder.chain(List.of("id"));
        List<QueryBuilder> builders = nextQueryBuilder.executeObjectListQuery(Binding.class);
        return builders.stream().map(qb -> new Binding(qb)).toList();
    }

    /**
     * <p>retrieve an output value by name</p>
     */
    public Binding output(String name) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("output", fieldArgs);
        return new Binding(nextQueryBuilder);
    }

    /**
     * <p>return all output values for the environment</p>
     */
    public List<Binding> outputs() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("outputs");
        nextQueryBuilder = nextQueryBuilder.chain(List.of("id"));
        List<QueryBuilder> builders = nextQueryBuilder.executeObjectListQuery(Binding.class);
        return builders.stream().map(qb -> new Binding(qb)).toList();
    }

    /**
     * <p>Create or update a binding of type CacheVolume in the environment</p>
     * @param name The name of the binding
     * @param value The CacheVolume value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withCacheVolumeInput(String name, CacheVolume value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withCacheVolumeInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired CacheVolume output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withCacheVolumeOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withCacheVolumeOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type Container in the environment</p>
     * @param name The name of the binding
     * @param value The Container value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withContainerInput(String name, Container value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withContainerInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired Container output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withContainerOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withContainerOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type Directory in the environment</p>
     * @param name The name of the binding
     * @param value The Directory value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withDirectoryInput(String name, Directory value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withDirectoryInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired Directory output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withDirectoryOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withDirectoryOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type Env in the environment</p>
     * @param name The name of the binding
     * @param value The Env value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withEnvInput(String name, Env value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withEnvInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired Env output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withEnvOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withEnvOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type File in the environment</p>
     * @param name The name of the binding
     * @param value The File value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withFileInput(String name, File value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withFileInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired File output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withFileOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withFileOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type GitRef in the environment</p>
     * @param name The name of the binding
     * @param value The GitRef value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withGitRefInput(String name, GitRef value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withGitRefInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired GitRef output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withGitRefOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withGitRefOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type GitRepository in the environment</p>
     * @param name The name of the binding
     * @param value The GitRepository value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withGitRepositoryInput(String name, GitRepository value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withGitRepositoryInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired GitRepository output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withGitRepositoryOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withGitRepositoryOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type LLM in the environment</p>
     * @param name The name of the binding
     * @param value The LLM value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withLLMInput(String name, LLM value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withLLMInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired LLM output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withLLMOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withLLMOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type ModuleConfigClient in the environment</p>
     * @param name The name of the binding
     * @param value The ModuleConfigClient value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withModuleConfigClientInput(String name, ModuleConfigClient value,
            String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withModuleConfigClientInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired ModuleConfigClient output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withModuleConfigClientOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withModuleConfigClientOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type Module in the environment</p>
     * @param name The name of the binding
     * @param value The Module value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withModuleInput(String name, Module value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withModuleInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired Module output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withModuleOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withModuleOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type ModuleSource in the environment</p>
     * @param name The name of the binding
     * @param value The ModuleSource value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withModuleSourceInput(String name, ModuleSource value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withModuleSourceInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired ModuleSource output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withModuleSourceOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withModuleSourceOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type Secret in the environment</p>
     * @param name The name of the binding
     * @param value The Secret value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withSecretInput(String name, Secret value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withSecretInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired Secret output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withSecretOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withSecretOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type Service in the environment</p>
     * @param name The name of the binding
     * @param value The Service value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withServiceInput(String name, Service value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withServiceInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired Service output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withServiceOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withServiceOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update a binding of type Socket in the environment</p>
     * @param name The name of the binding
     * @param value The Socket value to assign to the binding
     * @param description The purpose of the input
     */
    public Env withSocketInput(String name, Socket value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withSocketInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Declare a desired Socket output to be assigned in the environment</p>
     * @param name The name of the binding
     * @param description A description of the desired value of the binding
     */
    public Env withSocketOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withSocketOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update an input value of type string</p>
     * @param name The name of the binding
     * @param value The string value to assign to the binding
     * @param description The description of the input
     */
    public Env withStringInput(String name, String value, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withStringInput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>Create or update an input value of type string</p>
     * @param name The name of the binding
     * @param description The description of the output
     */
    public Env withStringOutput(String name, String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withStringOutput", fieldArgs);
        return new Env(nextQueryBuilder);
    }

    public static class Deserializer implements JsonbDeserializer<Env> {
        @Override
        public Env deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            Env o = Dagger.dag().loadEnvFromID(new EnvID(id));
            return o;
        }
    }
}
