// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.ExecutionException;

@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(Error.Deserializer.class)
public class Error implements IDAble<ErrorID> {
    private QueryBuilder queryBuilder;

    private ErrorID id;

    private String message;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected Error() {
    }

    Error(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>A unique identifier for this Error.</p>
     */
    public ErrorID id() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(ErrorID.class);
    }

    /**
     * <p>A description of the error.</p>
     */
    public String message() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.message != null) {
            return message;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("message");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>The extensions of the error.</p>
     */
    public List<ErrorValue> values() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("values");
        nextQueryBuilder = nextQueryBuilder.chain(List.of("id"));
        List<QueryBuilder> builders = nextQueryBuilder.executeObjectListQuery(ErrorValue.class);
        return builders.stream().map(qb -> new ErrorValue(qb)).toList();
    }

    /**
     * <p>Add a value to the error.</p>
     * @param name The name of the value.
     * @param value The value to store on the error.
     */
    public Error withValue(String name, JSON value) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        builder.add("value", value);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withValue", fieldArgs);
        return new Error(nextQueryBuilder);
    }

    public static class Deserializer implements JsonbDeserializer<Error> {
        @Override
        public Error deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            Error o = Dagger.dag().loadErrorFromID(new ErrorID(id));
            return o;
        }
    }
}
