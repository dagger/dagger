// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.concurrent.ExecutionException;

@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(ErrorValue.Deserializer.class)
public class ErrorValue implements IDAble<ErrorValueID> {
    private QueryBuilder queryBuilder;

    private ErrorValueID id;

    private String name;

    private JSON value;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected ErrorValue() {
    }

    ErrorValue(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>A unique identifier for this ErrorValue.</p>
     */
    public ErrorValueID id() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(ErrorValueID.class);
    }

    /**
     * <p>The name of the value.</p>
     */
    public String name() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.name != null) {
            return name;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("name");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>The value.</p>
     */
    public JSON value() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.value != null) {
            return value;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("value");
        return nextQueryBuilder.executeQuery(JSON.class);
    }

    public static class Deserializer implements JsonbDeserializer<ErrorValue> {
        @Override
        public ErrorValue deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            ErrorValue o = Dagger.dag().loadErrorValueFromID(new ErrorValueID(id));
            return o;
        }
    }
}
