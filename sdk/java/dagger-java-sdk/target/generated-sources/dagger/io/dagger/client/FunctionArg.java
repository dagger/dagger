// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * An argument accepted by a function.<br/><br/>This is a specification for an argument at function definition time, not an argument passed at function call time.
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(FunctionArg.Deserializer.class)
public class FunctionArg implements IDAble<FunctionArgID> {
    private QueryBuilder queryBuilder;

    private String defaultPath;

    private JSON defaultValue;

    private String description;

    private FunctionArgID id;

    private String name;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected FunctionArg() {
    }

    FunctionArg(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>Only applies to arguments of type File or Directory. If the argument is not set, load it from the given path in the context directory</p>
     */
    public String defaultPath() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.defaultPath != null) {
            return defaultPath;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("defaultPath");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>A default value to use for this argument when not explicitly set by the caller, if any.</p>
     */
    public JSON defaultValue() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.defaultValue != null) {
            return defaultValue;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("defaultValue");
        return nextQueryBuilder.executeQuery(JSON.class);
    }

    /**
     * <p>A doc string for the argument, if any.</p>
     */
    public String description() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.description != null) {
            return description;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("description");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>A unique identifier for this FunctionArg.</p>
     */
    public FunctionArgID id() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(FunctionArgID.class);
    }

    /**
     * <p>Only applies to arguments of type Directory. The ignore patterns are applied to the input directory, and matching entries are filtered out, in a cache-efficient manner.</p>
     */
    public List<String> ignore() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("ignore");
        return nextQueryBuilder.executeListQuery(String.class);
    }

    /**
     * <p>The name of the argument in lowerCamelCase format.</p>
     */
    public String name() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.name != null) {
            return name;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("name");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>The location of this arg declaration.</p>
     */
    public SourceMap sourceMap() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("sourceMap");
        return new SourceMap(nextQueryBuilder);
    }

    /**
     * <p>The type of the argument.</p>
     */
    public TypeDef typeDef() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("typeDef");
        return new TypeDef(nextQueryBuilder);
    }

    public static class Deserializer implements JsonbDeserializer<FunctionArg> {
        @Override
        public FunctionArg deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            FunctionArg o = Dagger.dag().loadFunctionArgFromID(new FunctionArgID(id));
            return o;
        }
    }
}
