// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * An active function call.
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(FunctionCall.Deserializer.class)
public class FunctionCall implements IDAble<FunctionCallID> {
    private QueryBuilder queryBuilder;

    private FunctionCallID id;

    private String name;

    private JSON parent;

    private String parentName;

    private Void returnError;

    private Void returnValue;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected FunctionCall() {
    }

    FunctionCall(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>A unique identifier for this FunctionCall.</p>
     */
    public FunctionCallID id() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(FunctionCallID.class);
    }

    /**
     * <p>The argument values the function is being invoked with.</p>
     */
    public List<FunctionCallArgValue> inputArgs() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("inputArgs");
        nextQueryBuilder = nextQueryBuilder.chain(List.of("id"));
        List<QueryBuilder> builders = nextQueryBuilder.executeObjectListQuery(FunctionCallArgValue.class);
        return builders.stream().map(qb -> new FunctionCallArgValue(qb)).toList();
    }

    /**
     * <p>The name of the function being called.</p>
     */
    public String name() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.name != null) {
            return name;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("name");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>The value of the parent object of the function being called. If the function is top-level to the module, this is always an empty object.</p>
     */
    public JSON parent() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.parent != null) {
            return parent;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("parent");
        return nextQueryBuilder.executeQuery(JSON.class);
    }

    /**
     * <p>The name of the parent object of the function being called. If the function is top-level to the module, this is the name of the module.</p>
     */
    public String parentName() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.parentName != null) {
            return parentName;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("parentName");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>Return an error from the function.</p>
     * @param error The error to return.
     */
    public Void returnError(Error error) throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.returnError != null) {
            return returnError;
        }
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("error", error);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("returnError", fieldArgs);
        return nextQueryBuilder.executeQuery(Void.class);
    }

    /**
     * <p>Set the return value of the function call to the provided value.</p>
     * @param value JSON serialization of the return value.
     */
    public Void returnValue(JSON value) throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.returnValue != null) {
            return returnValue;
        }
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("value", value);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("returnValue", fieldArgs);
        return nextQueryBuilder.executeQuery(Void.class);
    }

    public static class Deserializer implements JsonbDeserializer<FunctionCall> {
        @Override
        public FunctionCall deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            FunctionCall o = Dagger.dag().loadFunctionCallFromID(new FunctionCallID(id));
            return o;
        }
    }
}
