// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.concurrent.ExecutionException;

/**
 * A git ref (tag, branch, or commit).
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(GitRef.Deserializer.class)
public class GitRef implements IDAble<GitRefID> {
    private QueryBuilder queryBuilder;

    private String commit;

    private GitRefID id;

    private String ref;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected GitRef() {
    }

    GitRef(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>The resolved commit id at this ref.</p>
     */
    public String commit() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.commit != null) {
            return commit;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("commit");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>A unique identifier for this GitRef.</p>
     */
    public GitRefID id() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(GitRefID.class);
    }

    /**
     * <p>The resolved ref name at this ref.</p>
     */
    public String ref() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.ref != null) {
            return ref;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("ref");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>The filesystem tree at this ref.</p>
     * @param optArgs tree optional arguments
     */
    public Directory tree(TreeArguments optArgs) {
        Arguments.Builder builder = Arguments.newBuilder();
        Arguments fieldArgs = builder.build();
        fieldArgs = fieldArgs.merge(optArgs.toArguments());
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("tree", fieldArgs);
        return new Directory(nextQueryBuilder);
    }

    /**
     * <p>The filesystem tree at this ref.</p>
     */
    public Directory tree() {
        Arguments.Builder builder = Arguments.newBuilder();
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("tree", fieldArgs);
        return new Directory(nextQueryBuilder);
    }

    public static class Deserializer implements JsonbDeserializer<GitRef> {
        @Override
        public GitRef deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            GitRef o = Dagger.dag().loadGitRefFromID(new GitRefID(id));
            return o;
        }
    }

    /**
     * Optional arguments for {@link GitRef#tree}
     *
     */
    public static class TreeArguments {
        private Boolean discardGitDir;

        private Integer depth;

        /**
         * Set to true to discard .git directory.
         */
        public TreeArguments withDiscardGitDir(Boolean discardGitDir) {
            this.discardGitDir = discardGitDir;
            return this;
        }

        /**
         * The depth of the tree to fetch.
         */
        public TreeArguments withDepth(Integer depth) {
            this.depth = depth;
            return this;
        }

        Arguments toArguments() {
            Arguments.Builder builder = Arguments.newBuilder();
            if (discardGitDir != null) {
                builder.add("discardGitDir", this.discardGitDir);
            }

            if (depth != null) {
                builder.add("depth", this.depth);
            }

                    return builder.build();
        }
    }
}
