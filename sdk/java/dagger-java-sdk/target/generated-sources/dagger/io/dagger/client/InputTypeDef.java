// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * A graphql input type, which is essentially just a group of named args.<br/>This is currently only used to represent pre-existing usage of graphql input types<br/>in the core API. It is not used by user modules and shouldn't ever be as user<br/>module accept input objects via their id rather than graphql input types.
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(InputTypeDef.Deserializer.class)
public class InputTypeDef implements IDAble<InputTypeDefID> {
    private QueryBuilder queryBuilder;

    private InputTypeDefID id;

    private String name;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected InputTypeDef() {
    }

    InputTypeDef(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>Static fields defined on this input object, if any.</p>
     */
    public List<FieldTypeDef> fields() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("fields");
        nextQueryBuilder = nextQueryBuilder.chain(List.of("id"));
        List<QueryBuilder> builders = nextQueryBuilder.executeObjectListQuery(FieldTypeDef.class);
        return builders.stream().map(qb -> new FieldTypeDef(qb)).toList();
    }

    /**
     * <p>A unique identifier for this InputTypeDef.</p>
     */
    public InputTypeDefID id() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(InputTypeDefID.class);
    }

    /**
     * <p>The name of the input object.</p>
     */
    public String name() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.name != null) {
            return name;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("name");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    public static class Deserializer implements JsonbDeserializer<InputTypeDef> {
        @Override
        public InputTypeDef deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            InputTypeDef o = Dagger.dag().loadInputTypeDefFromID(new InputTypeDefID(id));
            return o;
        }
    }
}
