// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.Jsonb;
import jakarta.json.bind.JsonbBuilder;
import jakarta.json.bind.JsonbConfig;
import java.lang.Class;
import java.lang.Enum;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.lang.reflect.Method;

/**
 * Convert to and from Json with the right serializers and deserializers
 */
public final class JsonConverter {
    public static JSON toJSON(Object object) throws Exception {
        try (Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withPropertyVisibilityStrategy(new FieldsStrategy()))) {
            if (object instanceof Enum<?>) {
                return JSON.from(jsonb.toJson(((Enum<?>) object).name()));
            }
            return JSON.from(jsonb.toJson(object));
        }
    }

    public static <T> T fromJSON(JSON json, Class<T> clazz) throws Exception {
        return fromJSON(json.convert(), clazz);
    }

    public static <T> T fromJSON(String json, Class<T> clazz) throws Exception {
        try (Jsonb jsonb = JsonbBuilder.create(new JsonbConfig().withPropertyVisibilityStrategy(new FieldsStrategy()))) {
            if (clazz.isEnum()) {
                Method valueOf = clazz.getMethod("valueOf", String.class);
                return clazz.cast(valueOf.invoke(null, jsonb.fromJson(json, String.class)));
            }
            return jsonb.fromJson(json, clazz);
        }
    }
}
