// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.Integer;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.ExecutionException;

@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(LLM.Deserializer.class)
public class LLM implements IDAble<LLMID> {
    private QueryBuilder queryBuilder;

    private JSON historyJSON;

    private LLMID id;

    private String lastReply;

    private String model;

    private String provider;

    private LLMID sync;

    private String tools;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected LLM() {
    }

    LLM(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>create a branch in the LLM's history</p>
     */
    public LLM attempt(Integer number) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("number", number);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("attempt", fieldArgs);
        return new LLM(nextQueryBuilder);
    }

    /**
     * <p>returns the type of the current state</p>
     */
    public Binding bindResult(String name) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("name", name);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("bindResult", fieldArgs);
        return new Binding(nextQueryBuilder);
    }

    /**
     * <p>return the LLM's current environment</p>
     */
    public Env env() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("env");
        return new Env(nextQueryBuilder);
    }

    /**
     * <p>return the llm message history</p>
     */
    public List<String> history() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("history");
        return nextQueryBuilder.executeListQuery(String.class);
    }

    /**
     * <p>return the raw llm message history as json</p>
     */
    public JSON historyJSON() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.historyJSON != null) {
            return historyJSON;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("historyJSON");
        return nextQueryBuilder.executeQuery(JSON.class);
    }

    /**
     * <p>A unique identifier for this LLM.</p>
     */
    public LLMID id() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(LLMID.class);
    }

    /**
     * <p>return the last llm reply from the history</p>
     */
    public String lastReply() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.lastReply != null) {
            return lastReply;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("lastReply");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>synchronize LLM state</p>
     */
    public LLM loop() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("loop");
        return new LLM(nextQueryBuilder);
    }

    /**
     * <p>return the model used by the llm</p>
     */
    public String model() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.model != null) {
            return model;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("model");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>return the provider used by the llm</p>
     */
    public String provider() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.provider != null) {
            return provider;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("provider");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>synchronize LLM state</p>
     */
    public LLM sync() throws InterruptedException, ExecutionException, DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("sync");
        nextQueryBuilder.executeQuery();
        return this;
    }

    /**
     * <p>returns the token usage of the current state</p>
     */
    public LLMTokenUsage tokenUsage() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("tokenUsage");
        return new LLMTokenUsage(nextQueryBuilder);
    }

    /**
     * <p>print documentation for available tools</p>
     */
    public String tools() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.tools != null) {
            return tools;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("tools");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>allow the LLM to interact with an environment via MCP</p>
     */
    public LLM withEnv(Env env) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("env", env);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withEnv", fieldArgs);
        return new LLM(nextQueryBuilder);
    }

    /**
     * <p>swap out the llm model</p>
     * @param model The model to use
     */
    public LLM withModel(String model) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("model", model);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withModel", fieldArgs);
        return new LLM(nextQueryBuilder);
    }

    /**
     * <p>append a prompt to the llm context</p>
     * @param prompt The prompt to send
     */
    public LLM withPrompt(String prompt) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("prompt", prompt);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withPrompt", fieldArgs);
        return new LLM(nextQueryBuilder);
    }

    /**
     * <p>append the contents of a file to the llm context</p>
     * @param file The file to read the prompt from
     */
    public LLM withPromptFile(File file) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("file", file);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withPromptFile", fieldArgs);
        return new LLM(nextQueryBuilder);
    }

    /**
     * <p>Add a system prompt to the LLM's environment</p>
     * @param prompt The system prompt to send
     */
    public LLM withSystemPrompt(String prompt) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("prompt", prompt);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withSystemPrompt", fieldArgs);
        return new LLM(nextQueryBuilder);
    }

    /**
     * <p>Disable the default system prompt</p>
     */
    public LLM withoutDefaultSystemPrompt() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withoutDefaultSystemPrompt");
        return new LLM(nextQueryBuilder);
    }

    public static class Deserializer implements JsonbDeserializer<LLM> {
        @Override
        public LLM deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            LLM o = Dagger.dag().loadLLMFromID(new LLMID(id));
            return o;
        }
    }
}
