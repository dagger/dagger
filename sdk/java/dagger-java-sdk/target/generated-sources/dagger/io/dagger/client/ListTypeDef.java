// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.concurrent.ExecutionException;

/**
 * A definition of a list type in a Module.
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(ListTypeDef.Deserializer.class)
public class ListTypeDef implements IDAble<ListTypeDefID> {
    private QueryBuilder queryBuilder;

    private ListTypeDefID id;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected ListTypeDef() {
    }

    ListTypeDef(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>The type of the elements in the list.</p>
     */
    public TypeDef elementTypeDef() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("elementTypeDef");
        return new TypeDef(nextQueryBuilder);
    }

    /**
     * <p>A unique identifier for this ListTypeDef.</p>
     */
    public ListTypeDefID id() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(ListTypeDefID.class);
    }

    public static class Deserializer implements JsonbDeserializer<ListTypeDef> {
        @Override
        public ListTypeDef deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            ListTypeDef o = Dagger.dag().loadListTypeDefFromID(new ListTypeDefID(id));
            return o;
        }
    }
}
