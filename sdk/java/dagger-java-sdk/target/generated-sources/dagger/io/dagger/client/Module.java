// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.List;
import java.util.concurrent.ExecutionException;

/**
 * A Dagger module.
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(Module.Deserializer.class)
public class Module implements IDAble<ModuleID> {
    private QueryBuilder queryBuilder;

    private String description;

    private ModuleID id;

    private String name;

    private Void serve;

    private ModuleID sync;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected Module() {
    }

    Module(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>The dependencies of the module.</p>
     */
    public List<Module> dependencies() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("dependencies");
        nextQueryBuilder = nextQueryBuilder.chain(List.of("id"));
        List<QueryBuilder> builders = nextQueryBuilder.executeObjectListQuery(Module.class);
        return builders.stream().map(qb -> new Module(qb)).toList();
    }

    /**
     * <p>The doc string of the module, if any</p>
     */
    public String description() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.description != null) {
            return description;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("description");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>Enumerations served by this module.</p>
     */
    public List<TypeDef> enums() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("enums");
        nextQueryBuilder = nextQueryBuilder.chain(List.of("id"));
        List<QueryBuilder> builders = nextQueryBuilder.executeObjectListQuery(TypeDef.class);
        return builders.stream().map(qb -> new TypeDef(qb)).toList();
    }

    /**
     * <p>The generated files and directories made on top of the module source's context directory.</p>
     */
    public Directory generatedContextDirectory() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("generatedContextDirectory");
        return new Directory(nextQueryBuilder);
    }

    /**
     * <p>A unique identifier for this Module.</p>
     */
    public ModuleID id() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(ModuleID.class);
    }

    /**
     * <p>Interfaces served by this module.</p>
     */
    public List<TypeDef> interfaces() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("interfaces");
        nextQueryBuilder = nextQueryBuilder.chain(List.of("id"));
        List<QueryBuilder> builders = nextQueryBuilder.executeObjectListQuery(TypeDef.class);
        return builders.stream().map(qb -> new TypeDef(qb)).toList();
    }

    /**
     * <p>The name of the module</p>
     */
    public String name() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.name != null) {
            return name;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("name");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>Objects served by this module.</p>
     */
    public List<TypeDef> objects() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("objects");
        nextQueryBuilder = nextQueryBuilder.chain(List.of("id"));
        List<QueryBuilder> builders = nextQueryBuilder.executeObjectListQuery(TypeDef.class);
        return builders.stream().map(qb -> new TypeDef(qb)).toList();
    }

    /**
     * <p>The container that runs the module's entrypoint. It will fail to execute if the module doesn't compile.</p>
     */
    public Container runtime() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("runtime");
        return new Container(nextQueryBuilder);
    }

    /**
     * <p>The SDK config used by this module.</p>
     */
    public SDKConfig sdk() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("sdk");
        return new SDKConfig(nextQueryBuilder);
    }

    /**
     * <p>Serve a module's API in the current session.<br/><br/>Note: this can only be called once per session. In the future, it could return a stream or service to remove the side effect.</p>
     */
    public Void serve() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.serve != null) {
            return serve;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("serve");
        return nextQueryBuilder.executeQuery(Void.class);
    }

    /**
     * <p>The source for the module.</p>
     */
    public ModuleSource source() {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("source");
        return new ModuleSource(nextQueryBuilder);
    }

    /**
     * <p>Forces evaluation of the module, including any loading into the engine and associated validation.</p>
     */
    public Module sync() throws InterruptedException, ExecutionException, DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("sync");
        nextQueryBuilder.executeQuery();
        return this;
    }

    /**
     * <p>Retrieves the module with the given description</p>
     * @param description The description to set
     */
    public Module withDescription(String description) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("description", description);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withDescription", fieldArgs);
        return new Module(nextQueryBuilder);
    }

    /**
     * <p>This module plus the given Enum type and associated values</p>
     */
    public Module withEnum(TypeDef _enum) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("enum", _enum);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withEnum", fieldArgs);
        return new Module(nextQueryBuilder);
    }

    /**
     * <p>This module plus the given Interface type and associated functions</p>
     */
    public Module withInterface(TypeDef iface) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("iface", iface);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withInterface", fieldArgs);
        return new Module(nextQueryBuilder);
    }

    /**
     * <p>This module plus the given Object type and associated functions.</p>
     */
    public Module withObject(TypeDef object) {
        Arguments.Builder builder = Arguments.newBuilder();
        builder.add("object", object);
        Arguments fieldArgs = builder.build();
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("withObject", fieldArgs);
        return new Module(nextQueryBuilder);
    }

    public static class Deserializer implements JsonbDeserializer<Module> {
        @Override
        public Module deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            Module o = Dagger.dag().loadModuleFromID(new ModuleID(id));
            return o;
        }
    }
}
