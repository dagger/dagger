// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.concurrent.ExecutionException;

/**
 * A port exposed by a container.
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(Port.Deserializer.class)
public class Port implements IDAble<PortID> {
    private QueryBuilder queryBuilder;

    private String description;

    private Boolean experimentalSkipHealthcheck;

    private PortID id;

    private Integer port;

    private NetworkProtocol protocol;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected Port() {
    }

    Port(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>The port description.</p>
     */
    public String description() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.description != null) {
            return description;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("description");
        return nextQueryBuilder.executeQuery(java.lang.String.class);
    }

    /**
     * <p>Skip the health check when run as a service.</p>
     */
    public Boolean experimentalSkipHealthcheck() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.experimentalSkipHealthcheck != null) {
            return experimentalSkipHealthcheck;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("experimentalSkipHealthcheck");
        return nextQueryBuilder.executeQuery(java.lang.Boolean.class);
    }

    /**
     * <p>A unique identifier for this Port.</p>
     */
    public PortID id() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(PortID.class);
    }

    /**
     * <p>The port number.</p>
     */
    public Integer port() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.port != null) {
            return port;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("port");
        return nextQueryBuilder.executeQuery(java.lang.Integer.class);
    }

    /**
     * <p>The transport layer protocol.</p>
     */
    public NetworkProtocol protocol() throws InterruptedException, ExecutionException,
            DaggerQueryException {
        if (this.protocol != null) {
            return protocol;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("protocol");
        return nextQueryBuilder.executeQuery(NetworkProtocol.class);
    }

    public static class Deserializer implements JsonbDeserializer<Port> {
        @Override
        public Port deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            Port o = Dagger.dag().loadPortFromID(new PortID(id));
            return o;
        }
    }
}
