// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.concurrent.ExecutionException;

/**
 * A Unix or TCP/IP socket that can be mounted into a container.
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(Socket.Deserializer.class)
public class Socket implements IDAble<SocketID> {
    private QueryBuilder queryBuilder;

    private SocketID id;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected Socket() {
    }

    Socket(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>A unique identifier for this Socket.</p>
     */
    public SocketID id() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(SocketID.class);
    }

    public static class Deserializer implements JsonbDeserializer<Socket> {
        @Override
        public Socket deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            Socket o = Dagger.dag().loadSocketFromID(new SocketID(id));
            return o;
        }
    }
}
