// This class has been generated by dagger-java-sdk. DO NOT EDIT.
package io.dagger.client;

import jakarta.json.bind.annotation.JsonbTypeDeserializer;
import jakarta.json.bind.annotation.JsonbTypeSerializer;
import jakarta.json.bind.serializer.DeserializationContext;
import jakarta.json.bind.serializer.JsonbDeserializer;
import jakarta.json.stream.JsonParser;
import java.lang.InterruptedException;
import java.lang.Override;
import java.lang.String;
import java.lang.reflect.Type;
import java.util.concurrent.ExecutionException;

/**
 * An interactive terminal that clients can connect to.
 */
@JsonbTypeSerializer(IDAbleSerializer.class)
@JsonbTypeDeserializer(Terminal.Deserializer.class)
public class Terminal implements IDAble<TerminalID> {
    private QueryBuilder queryBuilder;

    private TerminalID id;

    private TerminalID sync;

    /**
     * Empty constructor for JSON-B deserialization
     */
    protected Terminal() {
    }

    Terminal(QueryBuilder queryBuilder) {
        this.queryBuilder = queryBuilder;
    }

    /**
     * <p>A unique identifier for this Terminal.</p>
     */
    public TerminalID id() throws InterruptedException, ExecutionException, DaggerQueryException {
        if (this.id != null) {
            return id;
        }
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("id");
        return nextQueryBuilder.executeQuery(TerminalID.class);
    }

    /**
     * <p>Forces evaluation of the pipeline in the engine.<br/><br/>It doesn't run the default command if no exec has been set.</p>
     */
    public Terminal sync() throws InterruptedException, ExecutionException, DaggerQueryException {
        QueryBuilder nextQueryBuilder = this.queryBuilder.chain("sync");
        nextQueryBuilder.executeQuery();
        return this;
    }

    public static class Deserializer implements JsonbDeserializer<Terminal> {
        @Override
        public Terminal deserialize(JsonParser parser, DeserializationContext ctx, Type type) {
            String id = ctx.deserialize(String.class, parser);
            Terminal o = Dagger.dag().loadTerminalFromID(new TerminalID(id));
            return o;
        }
    }
}
