/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: api.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class Payload extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        data?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set data(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        data?: string;
    }): Payload {
        const message = new Payload({});
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            data?: string;
        } = {};
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.data.length)
            writer.writeString(1, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Payload {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Payload();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.data = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Payload {
        return Payload.deserialize(bytes);
    }
}
export class CallRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        package?: string;
        action?: string;
        payload?: Payload;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("package" in data && data.package != undefined) {
                this.package = data.package;
            }
            if ("action" in data && data.action != undefined) {
                this.action = data.action;
            }
            if ("payload" in data && data.payload != undefined) {
                this.payload = data.payload;
            }
        }
    }
    get package() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set package(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get action() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set action(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get payload() {
        return pb_1.Message.getWrapperField(this, Payload, 3) as Payload;
    }
    set payload(value: Payload) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_payload() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        package?: string;
        action?: string;
        payload?: ReturnType<typeof Payload.prototype.toObject>;
    }): CallRequest {
        const message = new CallRequest({});
        if (data.package != null) {
            message.package = data.package;
        }
        if (data.action != null) {
            message.action = data.action;
        }
        if (data.payload != null) {
            message.payload = Payload.fromObject(data.payload);
        }
        return message;
    }
    toObject() {
        const data: {
            package?: string;
            action?: string;
            payload?: ReturnType<typeof Payload.prototype.toObject>;
        } = {};
        if (this.package != null) {
            data.package = this.package;
        }
        if (this.action != null) {
            data.action = this.action;
        }
        if (this.payload != null) {
            data.payload = this.payload.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.package.length)
            writer.writeString(1, this.package);
        if (this.action.length)
            writer.writeString(2, this.action);
        if (this.has_payload)
            writer.writeMessage(3, this.payload, () => this.payload.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CallRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CallRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.package = reader.readString();
                    break;
                case 2:
                    message.action = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.payload, () => message.payload = Payload.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CallRequest {
        return CallRequest.deserialize(bytes);
    }
}
export class CallResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        payload?: Payload;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("payload" in data && data.payload != undefined) {
                this.payload = data.payload;
            }
        }
    }
    get payload() {
        return pb_1.Message.getWrapperField(this, Payload, 1) as Payload;
    }
    set payload(value: Payload) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_payload() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        payload?: ReturnType<typeof Payload.prototype.toObject>;
    }): CallResponse {
        const message = new CallResponse({});
        if (data.payload != null) {
            message.payload = Payload.fromObject(data.payload);
        }
        return message;
    }
    toObject() {
        const data: {
            payload?: ReturnType<typeof Payload.prototype.toObject>;
        } = {};
        if (this.payload != null) {
            data.payload = this.payload.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_payload)
            writer.writeMessage(1, this.payload, () => this.payload.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CallResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CallResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.payload, () => message.payload = Payload.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CallResponse {
        return CallResponse.deserialize(bytes);
    }
}
export class CreateFSRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        llb?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("llb" in data && data.llb != undefined) {
                this.llb = data.llb;
            }
        }
    }
    get llb() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
    }
    set llb(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        llb?: Uint8Array;
    }): CreateFSRequest {
        const message = new CreateFSRequest({});
        if (data.llb != null) {
            message.llb = data.llb;
        }
        return message;
    }
    toObject() {
        const data: {
            llb?: Uint8Array;
        } = {};
        if (this.llb != null) {
            data.llb = this.llb;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.llb.length)
            writer.writeBytes(1, this.llb);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateFSRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateFSRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.llb = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateFSRequest {
        return CreateFSRequest.deserialize(bytes);
    }
}
export class CreateFSResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        fs?: FS;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("fs" in data && data.fs != undefined) {
                this.fs = data.fs;
            }
        }
    }
    get fs() {
        return pb_1.Message.getWrapperField(this, FS, 1) as FS;
    }
    set fs(value: FS) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_fs() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        fs?: ReturnType<typeof FS.prototype.toObject>;
    }): CreateFSResponse {
        const message = new CreateFSResponse({});
        if (data.fs != null) {
            message.fs = FS.fromObject(data.fs);
        }
        return message;
    }
    toObject() {
        const data: {
            fs?: ReturnType<typeof FS.prototype.toObject>;
        } = {};
        if (this.fs != null) {
            data.fs = this.fs.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_fs)
            writer.writeMessage(1, this.fs, () => this.fs.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateFSResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateFSResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.fs, () => message.fs = FS.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateFSResponse {
        return CreateFSResponse.deserialize(bytes);
    }
}
export class FS extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        definition?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("definition" in data && data.definition != undefined) {
                this.definition = data.definition;
            }
        }
    }
    get definition() {
        return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
    }
    set definition(value: Uint8Array) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        definition?: Uint8Array;
    }): FS {
        const message = new FS({});
        if (data.definition != null) {
            message.definition = data.definition;
        }
        return message;
    }
    toObject() {
        const data: {
            definition?: Uint8Array;
        } = {};
        if (this.definition != null) {
            data.definition = this.definition;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.definition.length)
            writer.writeBytes(1, this.definition);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FS {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FS();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.definition = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FS {
        return FS.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedDaggerService {
    static definition = {
        Call: {
            path: "/Dagger/Call",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CallRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CallRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CallResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CallResponse.deserialize(new Uint8Array(bytes))
        },
        CreateFS: {
            path: "/Dagger/CreateFS",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: CreateFSRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => CreateFSRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: CreateFSResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => CreateFSResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Call(call: grpc_1.ServerUnaryCall<CallRequest, CallResponse>, callback: grpc_1.sendUnaryData<CallResponse>): void;
    abstract CreateFS(call: grpc_1.ServerUnaryCall<CreateFSRequest, CreateFSResponse>, callback: grpc_1.sendUnaryData<CreateFSResponse>): void;
}
export class DaggerClient extends grpc_1.makeGenericClientConstructor(UnimplementedDaggerService.definition, "Dagger", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    Call: GrpcUnaryServiceInterface<CallRequest, CallResponse> = (message: CallRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CallResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CallResponse>, callback?: grpc_1.requestCallback<CallResponse>): grpc_1.ClientUnaryCall => {
        return super.Call(message, metadata, options, callback);
    };
    CreateFS: GrpcUnaryServiceInterface<CreateFSRequest, CreateFSResponse> = (message: CreateFSRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<CreateFSResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<CreateFSResponse>, callback?: grpc_1.requestCallback<CreateFSResponse>): grpc_1.ClientUnaryCall => {
        return super.CreateFS(message, metadata, options, callback);
    };
}
