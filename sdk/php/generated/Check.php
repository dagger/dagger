<?php

/**
 * This class has been generated by dagger-php-sdk. DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dagger;

class Check extends Client\AbstractObject implements Client\IdAble
{
    /**
     * Whether the check completed
     */
    public function completed(): bool
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('completed');
        return (bool)$this->queryLeaf($leafQueryBuilder, 'completed');
    }

    /**
     * The description of the check
     */
    public function description(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('description');
        return (string)$this->queryLeaf($leafQueryBuilder, 'description');
    }

    /**
     * A unique identifier for this Check.
     */
    public function id(): CheckId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('id');
        return new \Dagger\CheckId((string)$this->queryLeaf($leafQueryBuilder, 'id'));
    }

    /**
     * A message emitted when running the check
     */
    public function message(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('message');
        return (string)$this->queryLeaf($leafQueryBuilder, 'message');
    }

    /**
     * Return the fully qualified name of the check
     */
    public function name(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('name');
        return (string)$this->queryLeaf($leafQueryBuilder, 'name');
    }

    /**
     * Whether the check passed
     */
    public function passed(): bool
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('passed');
        return (bool)$this->queryLeaf($leafQueryBuilder, 'passed');
    }

    /**
     * The path of the check within its module
     */
    public function path(): array
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('path');
        return (array)$this->queryLeaf($leafQueryBuilder, 'path');
    }

    /**
     * An emoji representing the result of the check
     */
    public function resultEmoji(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('resultEmoji');
        return (string)$this->queryLeaf($leafQueryBuilder, 'resultEmoji');
    }
}
