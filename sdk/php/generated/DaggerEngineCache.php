<?php

/**
 * This class has been generated by dagger-php-sdk. DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dagger;

/**
 * A cache storage for the Dagger engine
 */
class DaggerEngineCache extends Client\AbstractObject implements Client\IdAble
{
    /**
     * The current set of entries in the cache
     */
    public function entrySet(): DaggerEngineCacheEntrySet
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('entrySet');
        return new \Dagger\DaggerEngineCacheEntrySet($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * A unique identifier for this DaggerEngineCache.
     */
    public function id(): DaggerEngineCacheId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('id');
        return new \Dagger\DaggerEngineCacheId((string)$this->queryLeaf($leafQueryBuilder, 'id'));
    }

    /**
     * The maximum bytes to keep in the cache without pruning, after which automatic pruning may kick in.
     */
    public function keepBytes(): int
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('keepBytes');
        return (int)$this->queryLeaf($leafQueryBuilder, 'keepBytes');
    }

    /**
     * The maximum bytes to keep in the cache without pruning.
     */
    public function maxUsedSpace(): int
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('maxUsedSpace');
        return (int)$this->queryLeaf($leafQueryBuilder, 'maxUsedSpace');
    }

    /**
     * The target amount of free disk space the garbage collector will attempt to leave.
     */
    public function minFreeSpace(): int
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('minFreeSpace');
        return (int)$this->queryLeaf($leafQueryBuilder, 'minFreeSpace');
    }

    /**
     * Prune the cache of releaseable entries
     */
    public function prune(): void
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('prune');
        $this->queryLeaf($leafQueryBuilder, 'prune');
    }

    public function reservedSpace(): int
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('reservedSpace');
        return (int)$this->queryLeaf($leafQueryBuilder, 'reservedSpace');
    }
}
