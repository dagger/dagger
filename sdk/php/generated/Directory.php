<?php

/**
 * This class has been generated by dagger-php-sdk. DO NOT EDIT.
 */

declare(strict_types=1);

namespace DaggerIo\Gen;

/**
 * A directory.
 */
class Directory extends \DaggerIo\Client\AbstractDaggerObject implements \DaggerIo\Client\IdAble
{
    /**
     * Load the directory as a Dagger module
     */
    public function asModule(?string $sourceSubpath = null): Module
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('asModule');
        if (null !== $sourceSubpath) {
        $innerQueryBuilder->setArgument('sourceSubpath', $sourceSubpath);
        }
        return new \DaggerIo\Gen\Module($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Gets the difference between this directory and an another directory.
     */
    public function diff(DirectoryId|Directory $other): Directory
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('diff');
        $innerQueryBuilder->setArgument('other', $other);
        return new \DaggerIo\Gen\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieves a directory at the given path.
     */
    public function directory(string $path): Directory
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('directory');
        $innerQueryBuilder->setArgument('path', $path);
        return new \DaggerIo\Gen\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Builds a new Docker container from this directory.
     */
    public function dockerBuild(
        ?string $dockerfile = null,
        ?Platform $platform = null,
        ?array $buildArgs = null,
        ?string $target = null,
        ?array $secrets = null,
    ): Container
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('dockerBuild');
        if (null !== $dockerfile) {
        $innerQueryBuilder->setArgument('dockerfile', $dockerfile);
        }
        if (null !== $platform) {
        $innerQueryBuilder->setArgument('platform', $platform);
        }
        if (null !== $buildArgs) {
        $innerQueryBuilder->setArgument('buildArgs', $buildArgs);
        }
        if (null !== $target) {
        $innerQueryBuilder->setArgument('target', $target);
        }
        if (null !== $secrets) {
        $innerQueryBuilder->setArgument('secrets', $secrets);
        }
        return new \DaggerIo\Gen\Container($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Returns a list of files and directories at the given path.
     */
    public function entries(?string $path = null): array
    {
        $leafQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('entries');
        if (null !== $path) {
        $leafQueryBuilder->setArgument('path', $path);
        }
        return $this->queryLeaf($leafQueryBuilder, 'entries');
    }

    /**
     * Writes the contents of the directory to a path on the host.
     */
    public function export(string $path): bool
    {
        $leafQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('export');
        $leafQueryBuilder->setArgument('path', $path);
        return $this->queryLeaf($leafQueryBuilder, 'export');
    }

    /**
     * Retrieves a file at the given path.
     */
    public function file(string $path): File
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('file');
        $innerQueryBuilder->setArgument('path', $path);
        return new \DaggerIo\Gen\File($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Returns a list of files and directories that matche the given pattern.
     */
    public function glob(string $pattern): array
    {
        $leafQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('glob');
        $leafQueryBuilder->setArgument('pattern', $pattern);
        return $this->queryLeaf($leafQueryBuilder, 'glob');
    }

    /**
     * The content-addressed identifier of the directory.
     */
    public function id(): DirectoryId
    {
        $leafQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('id');
        return $this->queryLeafDaggerScalar($leafQueryBuilder, 'id', \DaggerIo\Gen\DirectoryId::class);
    }

    /**
     * Creates a named sub-pipeline
     */
    public function pipeline(string $name, ?string $description = null, ?array $labels = null): Directory
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('pipeline');
        $innerQueryBuilder->setArgument('name', $name);
        if (null !== $description) {
        $innerQueryBuilder->setArgument('description', $description);
        }
        if (null !== $labels) {
        $innerQueryBuilder->setArgument('labels', $labels);
        }
        return new \DaggerIo\Gen\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Force evaluation in the engine.
     */
    public function sync(): DirectoryId
    {
        $leafQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('sync');
        return $this->queryLeafDaggerScalar($leafQueryBuilder, 'sync', \DaggerIo\Gen\DirectoryId::class);
    }

    /**
     * Retrieves this directory plus a directory written at the given path.
     */
    public function withDirectory(
        string $path,
        DirectoryId|Directory $directory,
        ?array $exclude = null,
        ?array $include = null,
    ): Directory
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('withDirectory');
        $innerQueryBuilder->setArgument('path', $path);
        $innerQueryBuilder->setArgument('directory', $directory);
        if (null !== $exclude) {
        $innerQueryBuilder->setArgument('exclude', $exclude);
        }
        if (null !== $include) {
        $innerQueryBuilder->setArgument('include', $include);
        }
        return new \DaggerIo\Gen\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieves this directory plus the contents of the given file copied to the given path.
     */
    public function withFile(string $path, FileId|File $source, ?int $permissions = null): Directory
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('withFile');
        $innerQueryBuilder->setArgument('path', $path);
        $innerQueryBuilder->setArgument('source', $source);
        if (null !== $permissions) {
        $innerQueryBuilder->setArgument('permissions', $permissions);
        }
        return new \DaggerIo\Gen\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieves this directory plus a new directory created at the given path.
     */
    public function withNewDirectory(string $path, ?int $permissions = null): Directory
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('withNewDirectory');
        $innerQueryBuilder->setArgument('path', $path);
        if (null !== $permissions) {
        $innerQueryBuilder->setArgument('permissions', $permissions);
        }
        return new \DaggerIo\Gen\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieves this directory plus a new file written at the given path.
     */
    public function withNewFile(string $path, string $contents, ?int $permissions = null): Directory
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('withNewFile');
        $innerQueryBuilder->setArgument('path', $path);
        $innerQueryBuilder->setArgument('contents', $contents);
        if (null !== $permissions) {
        $innerQueryBuilder->setArgument('permissions', $permissions);
        }
        return new \DaggerIo\Gen\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieves this directory with all file/dir timestamps set to the given time.
     */
    public function withTimestamps(int $timestamp): Directory
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('withTimestamps');
        $innerQueryBuilder->setArgument('timestamp', $timestamp);
        return new \DaggerIo\Gen\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieves this directory with the directory at the given path removed.
     */
    public function withoutDirectory(string $path): Directory
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('withoutDirectory');
        $innerQueryBuilder->setArgument('path', $path);
        return new \DaggerIo\Gen\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieves this directory with the file at the given path removed.
     */
    public function withoutFile(string $path): Directory
    {
        $innerQueryBuilder = new \DaggerIo\Client\DaggerQueryBuilder('withoutFile');
        $innerQueryBuilder->setArgument('path', $path);
        return new \DaggerIo\Gen\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }
}
