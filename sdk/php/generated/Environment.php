<?php

/**
 * This class has been generated by dagger-php-sdk. DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dagger;

class Environment extends Client\AbstractObject implements Client\IdAble
{
    /**
     * retrieve a binding by name
     */
    public function binding(string $name): Binding
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('binding');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\Binding($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * return all bindings in the environment
     */
    public function bindings(): array
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('bindings');
        return (array)$this->queryLeaf($leafQueryBuilder, 'bindings');
    }

    /**
     * A unique identifier for this Environment.
     */
    public function id(): EnvironmentId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('id');
        return new \Dagger\EnvironmentId((string)$this->queryLeaf($leafQueryBuilder, 'id'));
    }

    /**
     * Create or update a binding of type CacheVolume in the environment
     */
    public function withCacheVolumeBinding(string $name, CacheVolumeId|CacheVolume $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withCacheVolumeBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type Container in the environment
     */
    public function withContainerBinding(string $name, ContainerId|Container $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withContainerBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type CurrentModule in the environment
     */
    public function withCurrentModuleBinding(string $name, CurrentModuleId|CurrentModule $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withCurrentModuleBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type Directory in the environment
     */
    public function withDirectoryBinding(string $name, DirectoryId|Directory $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withDirectoryBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type EnumTypeDef in the environment
     */
    public function withEnumTypeDefBinding(string $name, EnumTypeDefId|EnumTypeDef $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withEnumTypeDefBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type EnumValueTypeDef in the environment
     */
    public function withEnumValueTypeDefBinding(string $name, EnumValueTypeDefId|EnumValueTypeDef $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withEnumValueTypeDefBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type Environment in the environment
     */
    public function withEnvironmentBinding(string $name, EnvironmentId|Environment $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withEnvironmentBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type Error in the environment
     */
    public function withErrorBinding(string $name, ErrorId|Error $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withErrorBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type ErrorValue in the environment
     */
    public function withErrorValueBinding(string $name, ErrorValueId|ErrorValue $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withErrorValueBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type FieldTypeDef in the environment
     */
    public function withFieldTypeDefBinding(string $name, FieldTypeDefId|FieldTypeDef $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFieldTypeDefBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type File in the environment
     */
    public function withFileBinding(string $name, FileId|File $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFileBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type FunctionArg in the environment
     */
    public function withFunctionArgBinding(string $name, FunctionArgId|FunctionArg $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunctionArgBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type Function in the environment
     */
    public function withFunctionBinding(string $name, FunctionId|Function_ $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunctionBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type FunctionCallArgValue in the environment
     */
    public function withFunctionCallArgValueBinding(
        string $name,
        FunctionCallArgValueId|FunctionCallArgValue $value,
    ): Environment {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunctionCallArgValueBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type FunctionCall in the environment
     */
    public function withFunctionCallBinding(string $name, FunctionCallId|FunctionCall $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunctionCallBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type GeneratedCode in the environment
     */
    public function withGeneratedCodeBinding(string $name, GeneratedCodeId|GeneratedCode $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withGeneratedCodeBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type GitRef in the environment
     */
    public function withGitRefBinding(string $name, GitRefId|GitRef $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withGitRefBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type GitRepository in the environment
     */
    public function withGitRepositoryBinding(string $name, GitRepositoryId|GitRepository $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withGitRepositoryBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type InputTypeDef in the environment
     */
    public function withInputTypeDefBinding(string $name, InputTypeDefId|InputTypeDef $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withInputTypeDefBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type InterfaceTypeDef in the environment
     */
    public function withInterfaceTypeDefBinding(string $name, InterfaceTypeDefId|InterfaceTypeDef $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withInterfaceTypeDefBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type LLM in the environment
     */
    public function withLLMBinding(string $name, LLMId|LLM $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withLLMBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type LLMTokenUsage in the environment
     */
    public function withLLMTokenUsageBinding(string $name, LLMTokenUsageId|LLMTokenUsage $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withLLMTokenUsageBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type ListTypeDef in the environment
     */
    public function withListTypeDefBinding(string $name, ListTypeDefId|ListTypeDef $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withListTypeDefBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type Module in the environment
     */
    public function withModuleBinding(string $name, ModuleId|Module $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModuleBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type ModuleConfigClient in the environment
     */
    public function withModuleConfigClientBinding(
        string $name,
        ModuleConfigClientId|ModuleConfigClient $value,
    ): Environment {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModuleConfigClientBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type ModuleSource in the environment
     */
    public function withModuleSourceBinding(string $name, ModuleSourceId|ModuleSource $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModuleSourceBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type ObjectTypeDef in the environment
     */
    public function withObjectTypeDefBinding(string $name, ObjectTypeDefId|ObjectTypeDef $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withObjectTypeDefBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type PhpSdk in the environment
     */
    public function withPhpSdkBinding(string $name, PhpSdkId|PhpSdk $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withPhpSdkBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type SDKConfig in the environment
     */
    public function withSDKConfigBinding(string $name, SDKConfigId|SDKConfig $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSDKConfigBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type ScalarTypeDef in the environment
     */
    public function withScalarTypeDefBinding(string $name, ScalarTypeDefId|ScalarTypeDef $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withScalarTypeDefBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type Secret in the environment
     */
    public function withSecretBinding(string $name, SecretId|Secret $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSecretBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type Service in the environment
     */
    public function withServiceBinding(string $name, ServiceId|Service $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withServiceBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type Socket in the environment
     */
    public function withSocketBinding(string $name, SocketId|Socket $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSocketBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type SourceMap in the environment
     */
    public function withSourceMapBinding(string $name, SourceMapId|SourceMap $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSourceMapBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type string in the environment
     */
    public function withStringBinding(string $name, string $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withStringBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type Terminal in the environment
     */
    public function withTerminalBinding(string $name, TerminalId|Terminal $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withTerminalBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Create or update a binding of type TypeDef in the environment
     */
    public function withTypeDefBinding(string $name, TypeDefId|TypeDef $value): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withTypeDefBinding');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }
}
