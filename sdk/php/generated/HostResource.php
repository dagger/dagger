<?php

/**
 * This class has been generated by dagger-php-sdk. DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dagger;

/**
 * A resource to be loaded from the host using a standardized address.
 * May be converted to a directory, container, secret, file...
 */
class HostResource extends Client\AbstractObject implements Client\IdAble
{
    /**
     * Load the host resource as a container.
     */
    public function asContainer(): Container
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('asContainer');
        return new \Dagger\Container($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Load the host resource as a directory.
     */
    public function asDirectory(?array $exclude = null, ?array $include = null, ?bool $noCache = false): Directory
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('asDirectory');
        if (null !== $exclude) {
        $innerQueryBuilder->setArgument('exclude', $exclude);
        }
        if (null !== $include) {
        $innerQueryBuilder->setArgument('include', $include);
        }
        if (null !== $noCache) {
        $innerQueryBuilder->setArgument('noCache', $noCache);
        }
        return new \Dagger\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Load the host resource as a file.
     */
    public function asFile(?array $exclude = null, ?array $include = null, ?bool $noCache = false): File
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('asFile');
        if (null !== $exclude) {
        $innerQueryBuilder->setArgument('exclude', $exclude);
        }
        if (null !== $include) {
        $innerQueryBuilder->setArgument('include', $include);
        }
        if (null !== $noCache) {
        $innerQueryBuilder->setArgument('noCache', $noCache);
        }
        return new \Dagger\File($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Load the host resource as a git ref (branch, tag or commit)
     */
    public function asGitRef(): GitRef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('asGitRef');
        return new \Dagger\GitRef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Load the host resource as a git repository.
     */
    public function asGitRepository(): GitRepository
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('asGitRepository');
        return new \Dagger\GitRepository($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Load the host resource as a secret.
     */
    public function asSecret(): Secret
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('asSecret');
        return new \Dagger\Secret($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Load the host resource as a service.
     */
    public function asService(): Service
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('asService');
        return new \Dagger\Service($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * A unique identifier for this HostResource.
     */
    public function id(): HostResourceId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('id');
        return new \Dagger\HostResourceId((string)$this->queryLeaf($leafQueryBuilder, 'id'));
    }
}
