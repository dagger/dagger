<?php

/**
 * This class has been generated by dagger-php-sdk. DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dagger;

class LLM extends Client\AbstractObject implements Client\IdAble
{
    /**
     * Retrieve a the current value in the LLM environment, of type CacheVolume
     */
    public function cacheVolume(): CacheVolume
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('cacheVolume');
        return new \Dagger\CacheVolume($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type Container
     */
    public function container(): Container
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('container');
        return new \Dagger\Container($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type CurrentModule
     */
    public function currentModule(): CurrentModule
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('currentModule');
        return new \Dagger\CurrentModule($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type Directory
     */
    public function directory(): Directory
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('directory');
        return new \Dagger\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type EnumTypeDef
     */
    public function enumTypeDef(): EnumTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('enumTypeDef');
        return new \Dagger\EnumTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type EnumValueTypeDef
     */
    public function enumValueTypeDef(): EnumValueTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('enumValueTypeDef');
        return new \Dagger\EnumValueTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type Error
     */
    public function error(): Error
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('error');
        return new \Dagger\Error($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type ErrorValue
     */
    public function errorValue(): ErrorValue
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('errorValue');
        return new \Dagger\ErrorValue($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type FieldTypeDef
     */
    public function fieldTypeDef(): FieldTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('fieldTypeDef');
        return new \Dagger\FieldTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type File
     */
    public function file(): File
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('file');
        return new \Dagger\File($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type Function
     */
    public function function(): Function_
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('function');
        return new \Dagger\Function_($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type FunctionArg
     */
    public function functionArg(): FunctionArg
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('functionArg');
        return new \Dagger\FunctionArg($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type FunctionCall
     */
    public function functionCall(): FunctionCall
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('functionCall');
        return new \Dagger\FunctionCall($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type FunctionCallArgValue
     */
    public function functionCallArgValue(): FunctionCallArgValue
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('functionCallArgValue');
        return new \Dagger\FunctionCallArgValue($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type GeneratedCode
     */
    public function generatedCode(): GeneratedCode
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('generatedCode');
        return new \Dagger\GeneratedCode($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type CacheVolume
     */
    public function getCacheVolume(string $name): CacheVolume
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getCacheVolume');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\CacheVolume($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type Container
     */
    public function getContainer(string $name): Container
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getContainer');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\Container($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type CurrentModule
     */
    public function getCurrentModule(string $name): CurrentModule
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getCurrentModule');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\CurrentModule($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type Directory
     */
    public function getDirectory(string $name): Directory
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getDirectory');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type EnumTypeDef
     */
    public function getEnumTypeDef(string $name): EnumTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getEnumTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\EnumTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type EnumValueTypeDef
     */
    public function getEnumValueTypeDef(string $name): EnumValueTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getEnumValueTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\EnumValueTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type Error
     */
    public function getError(string $name): Error
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getError');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\Error($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type ErrorValue
     */
    public function getErrorValue(string $name): ErrorValue
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getErrorValue');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\ErrorValue($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type FieldTypeDef
     */
    public function getFieldTypeDef(string $name): FieldTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getFieldTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\FieldTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type File
     */
    public function getFile(string $name): File
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getFile');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\File($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type Function
     */
    public function getFunction(string $name): Function_
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getFunction');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\Function_($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type FunctionArg
     */
    public function getFunctionArg(string $name): FunctionArg
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getFunctionArg');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\FunctionArg($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type FunctionCall
     */
    public function getFunctionCall(string $name): FunctionCall
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getFunctionCall');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\FunctionCall($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type FunctionCallArgValue
     */
    public function getFunctionCallArgValue(string $name): FunctionCallArgValue
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getFunctionCallArgValue');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\FunctionCallArgValue($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type GeneratedCode
     */
    public function getGeneratedCode(string $name): GeneratedCode
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getGeneratedCode');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\GeneratedCode($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type GitRef
     */
    public function getGitRef(string $name): GitRef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getGitRef');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\GitRef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type GitRepository
     */
    public function getGitRepository(string $name): GitRepository
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getGitRepository');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\GitRepository($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type InputTypeDef
     */
    public function getInputTypeDef(string $name): InputTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getInputTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\InputTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type InterfaceTypeDef
     */
    public function getInterfaceTypeDef(string $name): InterfaceTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getInterfaceTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\InterfaceTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type LLM
     */
    public function getLLM(string $name): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getLLM');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type ListTypeDef
     */
    public function getListTypeDef(string $name): ListTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getListTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\ListTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type Module
     */
    public function getModule(string $name): Module
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getModule');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\Module($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type ModuleConfigClient
     */
    public function getModuleConfigClient(string $name): ModuleConfigClient
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getModuleConfigClient');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\ModuleConfigClient($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type ModuleSource
     */
    public function getModuleSource(string $name): ModuleSource
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getModuleSource');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\ModuleSource($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type ObjectTypeDef
     */
    public function getObjectTypeDef(string $name): ObjectTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getObjectTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\ObjectTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type PhpSdk
     */
    public function getPhpSdk(string $name): PhpSdk
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getPhpSdk');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\PhpSdk($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type SDKConfig
     */
    public function getSDKConfig(string $name): SDKConfig
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getSDKConfig');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\SDKConfig($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type ScalarTypeDef
     */
    public function getScalarTypeDef(string $name): ScalarTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getScalarTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\ScalarTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type Secret
     */
    public function getSecret(string $name): Secret
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getSecret');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\Secret($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type Service
     */
    public function getService(string $name): Service
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getService');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\Service($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type Socket
     */
    public function getSocket(string $name): Socket
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getSocket');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\Socket($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type SourceMap
     */
    public function getSourceMap(string $name): SourceMap
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getSourceMap');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\SourceMap($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Get a string variable from the LLM's environment
     */
    public function getString(string $name): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('getString');
        $leafQueryBuilder->setArgument('name', $name);
        return (string)$this->queryLeaf($leafQueryBuilder, 'getString');
    }

    /**
     * Retrieve a variable in the llm environment, of type Terminal
     */
    public function getTerminal(string $name): Terminal
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getTerminal');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\Terminal($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a variable in the llm environment, of type TypeDef
     */
    public function getTypeDef(string $name): TypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('getTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        return new \Dagger\TypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type GitRef
     */
    public function gitRef(): GitRef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('gitRef');
        return new \Dagger\GitRef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type GitRepository
     */
    public function gitRepository(): GitRepository
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('gitRepository');
        return new \Dagger\GitRepository($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * return the llm message history
     */
    public function history(): array
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('history');
        return (array)$this->queryLeaf($leafQueryBuilder, 'history');
    }

    /**
     * return the raw llm message history as json
     */
    public function historyJSON(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('historyJSON');
        return (string)$this->queryLeaf($leafQueryBuilder, 'historyJSON');
    }

    /**
     * A unique identifier for this LLM.
     */
    public function id(): LLMId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('id');
        return new \Dagger\LLMId((string)$this->queryLeaf($leafQueryBuilder, 'id'));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type InputTypeDef
     */
    public function inputTypeDef(): InputTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('inputTypeDef');
        return new \Dagger\InputTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type InterfaceTypeDef
     */
    public function interfaceTypeDef(): InterfaceTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('interfaceTypeDef');
        return new \Dagger\InterfaceTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type LLM
     */
    public function lLM(): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('lLM');
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * return the last llm reply from the history
     */
    public function lastReply(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('lastReply');
        return (string)$this->queryLeaf($leafQueryBuilder, 'lastReply');
    }

    /**
     * Retrieve a the current value in the LLM environment, of type ListTypeDef
     */
    public function listTypeDef(): ListTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('listTypeDef');
        return new \Dagger\ListTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * synchronize LLM state
     */
    public function loop(): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('loop');
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * return the model used by the llm
     */
    public function model(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('model');
        return (string)$this->queryLeaf($leafQueryBuilder, 'model');
    }

    /**
     * Retrieve a the current value in the LLM environment, of type Module
     */
    public function module(): Module
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('module');
        return new \Dagger\Module($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type ModuleConfigClient
     */
    public function moduleConfigClient(): ModuleConfigClient
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('moduleConfigClient');
        return new \Dagger\ModuleConfigClient($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type ModuleSource
     */
    public function moduleSource(): ModuleSource
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('moduleSource');
        return new \Dagger\ModuleSource($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type ObjectTypeDef
     */
    public function objectTypeDef(): ObjectTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('objectTypeDef');
        return new \Dagger\ObjectTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type PhpSdk
     */
    public function phpSdk(): PhpSdk
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('phpSdk');
        return new \Dagger\PhpSdk($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * return the provider used by the llm
     */
    public function provider(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('provider');
        return (string)$this->queryLeaf($leafQueryBuilder, 'provider');
    }

    /**
     * Retrieve a the current value in the LLM environment, of type ScalarTypeDef
     */
    public function scalarTypeDef(): ScalarTypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('scalarTypeDef');
        return new \Dagger\ScalarTypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type SDKConfig
     */
    public function sdkconfig(): SDKConfig
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('sdkconfig');
        return new \Dagger\SDKConfig($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type Secret
     */
    public function secret(): Secret
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('secret');
        return new \Dagger\Secret($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type Service
     */
    public function service(): Service
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('service');
        return new \Dagger\Service($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type CacheVolume in the llm environment
     */
    public function setCacheVolume(string $name, CacheVolumeId|CacheVolume $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setCacheVolume');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Container in the llm environment
     */
    public function setContainer(string $name, ContainerId|Container $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setContainer');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type CurrentModule in the llm environment
     */
    public function setCurrentModule(string $name, CurrentModuleId|CurrentModule $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setCurrentModule');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Directory in the llm environment
     */
    public function setDirectory(string $name, DirectoryId|Directory $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setDirectory');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type EnumTypeDef in the llm environment
     */
    public function setEnumTypeDef(string $name, EnumTypeDefId|EnumTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setEnumTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type EnumValueTypeDef in the llm environment
     */
    public function setEnumValueTypeDef(string $name, EnumValueTypeDefId|EnumValueTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setEnumValueTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Error in the llm environment
     */
    public function setError(string $name, ErrorId|Error $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setError');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ErrorValue in the llm environment
     */
    public function setErrorValue(string $name, ErrorValueId|ErrorValue $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setErrorValue');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type FieldTypeDef in the llm environment
     */
    public function setFieldTypeDef(string $name, FieldTypeDefId|FieldTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setFieldTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type File in the llm environment
     */
    public function setFile(string $name, FileId|File $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setFile');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Function in the llm environment
     */
    public function setFunction(string $name, FunctionId|Function_ $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setFunction');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type FunctionArg in the llm environment
     */
    public function setFunctionArg(string $name, FunctionArgId|FunctionArg $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setFunctionArg');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type FunctionCall in the llm environment
     */
    public function setFunctionCall(string $name, FunctionCallId|FunctionCall $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setFunctionCall');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type FunctionCallArgValue in the llm environment
     */
    public function setFunctionCallArgValue(string $name, FunctionCallArgValueId|FunctionCallArgValue $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setFunctionCallArgValue');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type GeneratedCode in the llm environment
     */
    public function setGeneratedCode(string $name, GeneratedCodeId|GeneratedCode $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setGeneratedCode');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type GitRef in the llm environment
     */
    public function setGitRef(string $name, GitRefId|GitRef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setGitRef');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type GitRepository in the llm environment
     */
    public function setGitRepository(string $name, GitRepositoryId|GitRepository $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setGitRepository');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type InputTypeDef in the llm environment
     */
    public function setInputTypeDef(string $name, InputTypeDefId|InputTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setInputTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type InterfaceTypeDef in the llm environment
     */
    public function setInterfaceTypeDef(string $name, InterfaceTypeDefId|InterfaceTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setInterfaceTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type LLM in the llm environment
     */
    public function setLLM(string $name, LLMId|LLM $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setLLM');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ListTypeDef in the llm environment
     */
    public function setListTypeDef(string $name, ListTypeDefId|ListTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setListTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Module in the llm environment
     */
    public function setModule(string $name, ModuleId|Module $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setModule');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ModuleConfigClient in the llm environment
     */
    public function setModuleConfigClient(string $name, ModuleConfigClientId|ModuleConfigClient $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setModuleConfigClient');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ModuleSource in the llm environment
     */
    public function setModuleSource(string $name, ModuleSourceId|ModuleSource $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setModuleSource');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ObjectTypeDef in the llm environment
     */
    public function setObjectTypeDef(string $name, ObjectTypeDefId|ObjectTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setObjectTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type PhpSdk in the llm environment
     */
    public function setPhpSdk(string $name, PhpSdkId|PhpSdk $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setPhpSdk');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type SDKConfig in the llm environment
     */
    public function setSDKConfig(string $name, SDKConfigId|SDKConfig $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setSDKConfig');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ScalarTypeDef in the llm environment
     */
    public function setScalarTypeDef(string $name, ScalarTypeDefId|ScalarTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setScalarTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Secret in the llm environment
     */
    public function setSecret(string $name, SecretId|Secret $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setSecret');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Service in the llm environment
     */
    public function setService(string $name, ServiceId|Service $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setService');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Socket in the llm environment
     */
    public function setSocket(string $name, SocketId|Socket $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setSocket');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type SourceMap in the llm environment
     */
    public function setSourceMap(string $name, SourceMapId|SourceMap $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setSourceMap');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Add a string variable to the LLM's environment
     */
    public function setString(string $name, string $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setString');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Terminal in the llm environment
     */
    public function setTerminal(string $name, TerminalId|Terminal $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setTerminal');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type TypeDef in the llm environment
     */
    public function setTypeDef(string $name, TypeDefId|TypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('setTypeDef');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type Socket
     */
    public function socket(): Socket
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('socket');
        return new \Dagger\Socket($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type SourceMap
     */
    public function sourceMap(): SourceMap
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('sourceMap');
        return new \Dagger\SourceMap($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * synchronize LLM state
     */
    public function sync(): LLMId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('sync');
        return new \Dagger\LLMId((string)$this->queryLeaf($leafQueryBuilder, 'sync'));
    }

    /**
     * Retrieve a the current value in the LLM environment, of type Terminal
     */
    public function terminal(): Terminal
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('terminal');
        return new \Dagger\Terminal($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * print documentation for available tools
     */
    public function tools(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('tools');
        return (string)$this->queryLeaf($leafQueryBuilder, 'tools');
    }

    /**
     * Retrieve a the current value in the LLM environment, of type TypeDef
     */
    public function typeDef(): TypeDef
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('typeDef');
        return new \Dagger\TypeDef($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * list variables in the LLM environment
     */
    public function variables(): array
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('variables');
        return (array)$this->queryLeaf($leafQueryBuilder, 'variables');
    }

    /**
     * Set a variable of type CacheVolume in the llm environment
     */
    public function withCacheVolume(CacheVolumeId|CacheVolume $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withCacheVolume');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Container in the llm environment
     */
    public function withContainer(ContainerId|Container $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withContainer');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type CurrentModule in the llm environment
     */
    public function withCurrentModule(CurrentModuleId|CurrentModule $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withCurrentModule');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Directory in the llm environment
     */
    public function withDirectory(DirectoryId|Directory $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withDirectory');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type EnumTypeDef in the llm environment
     */
    public function withEnumTypeDef(EnumTypeDefId|EnumTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withEnumTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type EnumValueTypeDef in the llm environment
     */
    public function withEnumValueTypeDef(EnumValueTypeDefId|EnumValueTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withEnumValueTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Error in the llm environment
     */
    public function withError(ErrorId|Error $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withError');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ErrorValue in the llm environment
     */
    public function withErrorValue(ErrorValueId|ErrorValue $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withErrorValue');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type FieldTypeDef in the llm environment
     */
    public function withFieldTypeDef(FieldTypeDefId|FieldTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFieldTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type File in the llm environment
     */
    public function withFile(FileId|File $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFile');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Function in the llm environment
     */
    public function withFunction(FunctionId|Function_ $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunction');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type FunctionArg in the llm environment
     */
    public function withFunctionArg(FunctionArgId|FunctionArg $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunctionArg');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type FunctionCall in the llm environment
     */
    public function withFunctionCall(FunctionCallId|FunctionCall $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunctionCall');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type FunctionCallArgValue in the llm environment
     */
    public function withFunctionCallArgValue(FunctionCallArgValueId|FunctionCallArgValue $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withFunctionCallArgValue');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type GeneratedCode in the llm environment
     */
    public function withGeneratedCode(GeneratedCodeId|GeneratedCode $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withGeneratedCode');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type GitRef in the llm environment
     */
    public function withGitRef(GitRefId|GitRef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withGitRef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type GitRepository in the llm environment
     */
    public function withGitRepository(GitRepositoryId|GitRepository $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withGitRepository');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type InputTypeDef in the llm environment
     */
    public function withInputTypeDef(InputTypeDefId|InputTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withInputTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type InterfaceTypeDef in the llm environment
     */
    public function withInterfaceTypeDef(InterfaceTypeDefId|InterfaceTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withInterfaceTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type LLM in the llm environment
     */
    public function withLLM(LLMId|LLM $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withLLM');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ListTypeDef in the llm environment
     */
    public function withListTypeDef(ListTypeDefId|ListTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withListTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * swap out the llm model
     */
    public function withModel(string $model): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModel');
        $innerQueryBuilder->setArgument('model', $model);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Module in the llm environment
     */
    public function withModule(ModuleId|Module $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModule');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ModuleConfigClient in the llm environment
     */
    public function withModuleConfigClient(ModuleConfigClientId|ModuleConfigClient $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModuleConfigClient');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ModuleSource in the llm environment
     */
    public function withModuleSource(ModuleSourceId|ModuleSource $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModuleSource');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ObjectTypeDef in the llm environment
     */
    public function withObjectTypeDef(ObjectTypeDefId|ObjectTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withObjectTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type PhpSdk in the llm environment
     */
    public function withPhpSdk(PhpSdkId|PhpSdk $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withPhpSdk');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * append a prompt to the llm context
     */
    public function withPrompt(string $prompt): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withPrompt');
        $innerQueryBuilder->setArgument('prompt', $prompt);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * append the contents of a file to the llm context
     */
    public function withPromptFile(FileId|File $file): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withPromptFile');
        $innerQueryBuilder->setArgument('file', $file);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Add a string variable to the LLM's environment
     */
    public function withPromptVar(string $name, string $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withPromptVar');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type SDKConfig in the llm environment
     */
    public function withSDKConfig(SDKConfigId|SDKConfig $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSDKConfig');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type ScalarTypeDef in the llm environment
     */
    public function withScalarTypeDef(ScalarTypeDefId|ScalarTypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withScalarTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Secret in the llm environment
     */
    public function withSecret(SecretId|Secret $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSecret');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Service in the llm environment
     */
    public function withService(ServiceId|Service $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withService');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Socket in the llm environment
     */
    public function withSocket(SocketId|Socket $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSocket');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type SourceMap in the llm environment
     */
    public function withSourceMap(SourceMapId|SourceMap $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSourceMap');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type Terminal in the llm environment
     */
    public function withTerminal(TerminalId|Terminal $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withTerminal');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Set a variable of type TypeDef in the llm environment
     */
    public function withTypeDef(TypeDefId|TypeDef $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withTypeDef');
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }
}
