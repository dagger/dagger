<?php

/**
 * This class has been generated by dagger-php-sdk. DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dagger;

class LLM extends Client\AbstractObject implements Client\IdAble
{
    /**
     * create a branch in the LLM's history
     */
    public function attempt(int $number): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('attempt');
        $innerQueryBuilder->setArgument('number', $number);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * returns the type of the current state
     */
    public function currentType(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('currentType');
        return (string)$this->queryLeaf($leafQueryBuilder, 'currentType');
    }

    /**
     * return the LLM's current environment
     */
    public function environment(): Environment
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('environment');
        return new \Dagger\Environment($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * return the llm message history
     */
    public function history(): array
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('history');
        return (array)$this->queryLeaf($leafQueryBuilder, 'history');
    }

    /**
     * return the raw llm message history as json
     */
    public function historyJSON(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('historyJSON');
        return (string)$this->queryLeaf($leafQueryBuilder, 'historyJSON');
    }

    /**
     * A unique identifier for this LLM.
     */
    public function id(): LLMId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('id');
        return new \Dagger\LLMId((string)$this->queryLeaf($leafQueryBuilder, 'id'));
    }

    /**
     * return the last llm reply from the history
     */
    public function lastReply(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('lastReply');
        return (string)$this->queryLeaf($leafQueryBuilder, 'lastReply');
    }

    /**
     * synchronize LLM state
     */
    public function loop(): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('loop');
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * return the model used by the llm
     */
    public function model(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('model');
        return (string)$this->queryLeaf($leafQueryBuilder, 'model');
    }

    /**
     * return the provider used by the llm
     */
    public function provider(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('provider');
        return (string)$this->queryLeaf($leafQueryBuilder, 'provider');
    }

    /**
     * synchronize LLM state
     */
    public function sync(): LLMId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('sync');
        return new \Dagger\LLMId((string)$this->queryLeaf($leafQueryBuilder, 'sync'));
    }

    /**
     * returns the token usage of the current state
     */
    public function tokenUsage(): LLMTokenUsage
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('tokenUsage');
        return new \Dagger\LLMTokenUsage($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * print documentation for available tools
     */
    public function tools(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('tools');
        return (string)$this->queryLeaf($leafQueryBuilder, 'tools');
    }

    /**
     * list variables in the LLM environment
     */
    public function variables(): array
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('variables');
        return (array)$this->queryLeaf($leafQueryBuilder, 'variables');
    }

    /**
     * allow the LLM to interact with an environment via MCP
     */
    public function withEnvironment(EnvironmentId|Environment $environment): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withEnvironment');
        $innerQueryBuilder->setArgument('environment', $environment);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * swap out the llm model
     */
    public function withModel(string $model): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withModel');
        $innerQueryBuilder->setArgument('model', $model);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * append a prompt to the llm context
     */
    public function withPrompt(string $prompt): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withPrompt');
        $innerQueryBuilder->setArgument('prompt', $prompt);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * append the contents of a file to the llm context
     */
    public function withPromptFile(FileId|File $file): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withPromptFile');
        $innerQueryBuilder->setArgument('file', $file);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Add a string variable to the LLM's environment
     */
    public function withPromptVar(string $name, string $value): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withPromptVar');
        $innerQueryBuilder->setArgument('name', $name);
        $innerQueryBuilder->setArgument('value', $value);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Provide the entire Query object to the LLM
     */
    public function withQuery(): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withQuery');
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * Add a system prompt to the LLM's environment
     */
    public function withSystemPrompt(string $prompt): LLM
    {
        $innerQueryBuilder = new \Dagger\Client\QueryBuilder('withSystemPrompt');
        $innerQueryBuilder->setArgument('prompt', $prompt);
        return new \Dagger\LLM($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }
}
