<?php

/**
 * This class has been generated by dagger-php-sdk. DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dagger\Dagger;

class Module extends \Dagger\Client\AbstractDaggerObject implements \Dagger\Client\IdAble
{
    /**
     * Modules used by this module
     */
    public function dependencies(): array
    {
        $leafQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('dependencies');
        return (array)$this->queryLeaf($leafQueryBuilder, 'dependencies');
    }

    /**
     * The dependencies as configured by the module
     */
    public function dependencyConfig(): array
    {
        $leafQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('dependencyConfig');
        return (array)$this->queryLeaf($leafQueryBuilder, 'dependencyConfig');
    }

    /**
     * The doc string of the module, if any
     */
    public function description(): string
    {
        $leafQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('description');
        return (string)$this->queryLeaf($leafQueryBuilder, 'description');
    }

    /**
     * The code generated by the SDK's runtime
     */
    public function generatedCode(): GeneratedCode
    {
        $innerQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('generatedCode');
        return new \Dagger\Dagger\GeneratedCode($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * The ID of the module
     */
    public function id(): ModuleId
    {
        $leafQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('id');
        return new \Dagger\Dagger\ModuleId((string)$this->queryLeaf($leafQueryBuilder, 'id'));
    }

    /**
     * The name of the module
     */
    public function name(): string
    {
        $leafQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('name');
        return (string)$this->queryLeaf($leafQueryBuilder, 'name');
    }

    /**
     * Objects served by this module
     */
    public function objects(): array
    {
        $leafQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('objects');
        return (array)$this->queryLeaf($leafQueryBuilder, 'objects');
    }

    /**
     * The SDK used by this module. Either a name of a builtin SDK or a module ref pointing to the SDK's implementation.
     */
    public function sdk(): string
    {
        $leafQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('sdk');
        return (string)$this->queryLeaf($leafQueryBuilder, 'sdk');
    }

    /**
     * Serve a module's API in the current session.
     *     Note: this can only be called once per session.
     *     In the future, it could return a stream or service to remove the side effect.
     */
    public function serve(): void
    {
        $leafQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('serve');
        $this->queryLeaf($leafQueryBuilder, 'serve');
    }

    /**
     * The directory containing the module's source code
     */
    public function sourceDirectory(): Directory
    {
        $innerQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('sourceDirectory');
        return new \Dagger\Dagger\Directory($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }

    /**
     * The module's subpath within the source directory
     */
    public function sourceDirectorySubPath(): string
    {
        $leafQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('sourceDirectorySubPath');
        return (string)$this->queryLeaf($leafQueryBuilder, 'sourceDirectorySubPath');
    }

    /**
     * This module plus the given Object type and associated functions
     */
    public function withObject(TypeDefId|TypeDef $object): Module
    {
        $innerQueryBuilder = new \Dagger\Client\DaggerQueryBuilder('withObject');
        $innerQueryBuilder->setArgument('object', $object);
        return new \Dagger\Dagger\Module($this->client, $this->queryBuilderChain->chain($innerQueryBuilder));
    }
}
