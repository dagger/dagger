<?php

/**
 * This class has been generated by dagger-php-sdk. DO NOT EDIT.
 */

declare(strict_types=1);

namespace Dagger;

/**
 * A status indicator to show to the user.
 */
class Status extends Client\AbstractObject implements Client\IdAble
{
    /**
     * Start and immediately finish the status, so that it just gets displayed to the user.
     */
    public function display(): StatusId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('display');
        return new \Dagger\StatusId((string)$this->queryLeaf($leafQueryBuilder, 'display'));
    }

    /**
     * Mark the status as complete, with an optional error.
     */
    public function end(ErrorId|Error|null $error = null): void
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('end');
        if (null !== $error) {
        $leafQueryBuilder->setArgument('error', $error);
        }
        $this->queryLeaf($leafQueryBuilder, 'end');
    }

    /**
     * A unique identifier for this Status.
     */
    public function id(): StatusId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('id');
        return new \Dagger\StatusId((string)$this->queryLeaf($leafQueryBuilder, 'id'));
    }

    /**
     * Returns the internal OpenTelemetry span ID of the status.
     *
     * (You probably don't need to use this, unless you're implementing OpenTelemetry integration for a Dagger SDK.)
     */
    public function internalId(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('internalId');
        return (string)$this->queryLeaf($leafQueryBuilder, 'internalId');
    }

    /**
     * The display name of the status.
     */
    public function name(): string
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('name');
        return (string)$this->queryLeaf($leafQueryBuilder, 'name');
    }

    /**
     * Start a new instance of the status.
     */
    public function start(): StatusId
    {
        $leafQueryBuilder = new \Dagger\Client\QueryBuilder('start');
        return new \Dagger\StatusId((string)$this->queryLeaf($leafQueryBuilder, 'start'));
    }
}
