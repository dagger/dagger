[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "dagger-io"
version = "0.0.0"
description = "A client package for running Dagger pipelines in Python."
license = "Apache-2.0"
authors = ["Dagger <hello@dagger.io>"]
readme = "README.md"
homepage = "https://dagger.io"
documentation = "https://docs.dagger.io/sdk/python"
repository = "https://github.com/dagger/dagger/tree/main/sdk/python"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Framework :: AnyIO",
    "Framework :: Pytest",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: Apache Software License",
    # FIXME: just waiting on windows tests for this
    # "Operating System :: OS Independent",
    "Typing :: Typed",
]
packages = [
    { include = "dagger", from = "src" },
]

[tool.poetry.urls]
"Tracker" = "https://github.com/dagger/dagger/issues"
"Release Notes" = "https://github.com/dagger/dagger/releases?q=tag%3Asdk%2Fpython%2Fv0"
"Community" = "https://discord.gg/ufnyBtc8uY"
"Twitter" = "https://twitter.com/dagger_io"

[tool.poetry.dependencies]
python = "^3.10"
anyio = ">=3.6.2"
attrs = ">=22.1.0"
cattrs = ">=22.2.0"
# FIXME: replace next two lines with the following when gql version 3.5.0 is released
# gql = {version = ">=3.5.0", extras = ["httpx"]}
gql = ">=3.4.0"
httpx = ">=0.23.1"
strawberry-graphql = {version = ">=0.133.5", optional = true}
typer = {version = ">=0.6.1", extras = ["all"]}
beartype = ">=0.11.0"
platformdirs = ">=2.6.2"

[tool.poetry.extras]
server = ["strawberry-graphql"]

[tool.poetry.group.test.dependencies]
pytest = ">=7.2.0"
pytest-mock = ">=3.10.0"
pytest-subprocess = ">=1.4.2"
pytest-lazy-fixture = "^0.6.3"

[tool.poetry.group.lint.dependencies]
black = ">=22.3.0"
mypy = ">=0.942"
typing_extensions = ">=4.4.0"
ruff = ">=0.0.218"

[tool.poetry.group.dev.dependencies]
poethepoet = ">=0.16.4"

[tool.poetry.group.docs.dependencies]
sphinx = ">=5.3.0"
sphinx-rtd-theme = "^1.1.1"

[tool.poe.env]
GEN_PATH = "./src/dagger/api"

[tool.poe.env.DOCS_SNIPPETS]
default = "../../docs/current/sdk/python/snippets"

[tool.poe.tasks]
test = "pytest"
unittest = "pytest -m 'not slow'"
typing = "mypy src/dagger tests"

[tool.poe.tasks.docs]
cmd = "sphinx-build -v . _build"
cwd = "docs"

[tool.poe.tasks.lint]
sequence = [
    "ruff ${target}",
    "black --check ${target}",
]
default_item_type = "cmd"

[[tool.poe.tasks.lint.args]]
name = "target"
positional = true
multiple = true
default = "."

[tool.poe.tasks.lint-docs]
ref = "lint ${DOCS_SNIPPETS}"

[tool.poe.tasks.lint-all]
ref = "lint . ${DOCS_SNIPPETS}"

[tool.poe.tasks.fmt]
sequence = [
    "ruff --fix-only -e ${target}",
    "black ${target}",
]
default_item_type = "cmd"

[[tool.poe.tasks.fmt.args]]
name = "target"
positional = true
multiple = true
default = ". ${DOCS_SNIPPETS}"

[tool.poe.tasks.generate]
sequence = [
    "python -m dagger generate --output ${GEN_PATH}/gen.py",
    "python -m dagger generate --output ${GEN_PATH}/gen_sync.py --sync",
    "black ${GEN_PATH}/gen*.py",
]
default_item_type = "cmd"

[tool.pytest.ini_options]
testpaths = ["tests/"]
addopts = [
    "--import-mode=importlib",
]
markers = [
    "slow: mark test as slow (integration)",
    "provision: mark provisioning tests",
]

[tool.mypy]
disallow_untyped_defs = false
follow_imports = "normal"
# ignore_missing_imports = true
install_types = true
non_interactive = true
warn_redundant_casts = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true
# plugins = [
#     "strawberry.ext.mypy_plugin",
# ]

[tool.black]
include = '\.pyi?$'
target-version = ["py310"]

[tool.ruff]
src = ["src", "tests"]
target-version = "py310"
select = ["ALL"]
ignore = [
    # Type inferrance is ok in a lot of places.
    "ANN",
    # This rule doesn't know to ignore a subclass override
    # so we get false positives for unused arguments. 
    "ARG002",
    # Black can handle trailing commas automatically.
    "COM812",
    # FIXME: prefix everything internal with an underscore and document
    # what's left (public).
    "D1",
    # Imperative mood only makes sense in functions, not classes.
    "D401",
    # Not using timezones in this project.
    "DTZ",
    # Valid use in pytest, docs and examples.
    "INP001",
    # Unnecessary variable assignment before `return` statement
    # doesn't seem to work as expected.
    "RET504",
    # We don't use asserts as runtime validation guarantees.
    "S101",
    # Pandas
    "PD", 
]
unfixable = [
    # Don't remove `print` statements, just warn.
    "T201",
]

[tool.ruff.isort]
known-first-party = ["dagger"]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["typer.Option"]

[tool.ruff.per-file-ignores]
# Docs and examples can have `print` statements.
"../../docs/current/sdk/python/*.py" = ["T201"]
"./examples/*" = ["T201"]
"./src/dagger/api/gen*.py" = [
    # Not much control over field names and docs coming from the API.
    # Note: We could detect built-in shadowing like the reserved
    # keywords but these built-ins aren't being used in the generated
    # code so no need to bother.
    "A", 
    "D", 
    # `Optional` is preferred over `| None` because of how 
    # beartype handles forward references.
    "UP007",
]
# Ignore built-in shadowing in test mocks. 
"./tests/api/test_inputs.py" = ["A", "ERA001"]
"./tests/*.py" = [
    # Ignore security issues in tests.
    "S", 
    # Magic value comparison doesn't apply to tests.
    "PLR2004",
]
# Allow some patterns to redefine imports in __init__.
"__init__.py" = ["F401", "F403", "PLC0414"]
# Typer uses boolean parameters for the CLI. Let it.
"./src/dagger/cli.py" = ["FBT"]
"./src/dagger/server/cli.py" = ["FBT"]

[tool.ruff.pydocstyle]
convention = "numpy"
