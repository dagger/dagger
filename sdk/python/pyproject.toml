[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "dagger-io"
dynamic = ["version"]
description = "A client package for running Dagger pipelines in Python."
readme = "README.md"
license = "Apache-2.0"
authors = [
    {name = "Dagger", email = "hello@dagger.io"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Framework :: AnyIO",
    "Framework :: Pytest",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
requires-python = ">=3.10"
dependencies = [
    "anyio>=3.6.2",
    "cattrs>=22.2.0",
    "graphql-core>=3.2.3",
    # TODO: replace next two lines with the following when gql version 3.5.0 is released
    # "gql[httpx]>=3.5.0",
    "gql>=3.4.0",
    "httpx>=0.23.1",
    "beartype>=0.11.0",
    "platformdirs>=2.6.2",
    "typing_extensions>=4.4.0",
    "rich>=10.11.0",
]

[project.urls]
"Homepage" = "https://dagger.io"
"Documentation" = "https://docs.dagger.io/sdk/python"
"Repository" = "https://github.com/dagger/dagger/tree/main/sdk/python"
"Tracker" = "https://github.com/dagger/dagger/issues"
"Release Notes" = "https://github.com/dagger/dagger/releases?q=tag%3Asdk%2Fpython%2Fv0"
"Community" = "https://discord.gg/ufnyBtc8uY"
"Twitter" = "https://twitter.com/dagger_io"

[tool.hatch.version]
source = "vcs"
fallback-version = "0.0.0"

[tool.hatch.build.targets.sdist]
only-include = [
    "src",
    "tests",
    "docs",
    "CHANGELOG.md",
]

[tool.hatch.build.targets.wheel]
packages = ["src/dagger"]

[tool.hatch.envs.default]
dependencies = [
    "black>=22.3.0",
    "ruff>=0.0.218",
    "pytest>=7.2.0",
    "pytest-mock>=3.10.0",
    "pytest-subprocess>=1.4.2",
    "pytest-lazy-fixture>=0.6.3",
    "pytest-httpx>=0.21.3",
]

[tool.hatch.envs.default.scripts]
fmt = [
    "ruff --fix-only -e {args:. ../../docs/current}",
    "black {args:. ../../docs/current}",
]
lint = [
    "ruff check {args:. ../../docs/current}",
    "black --check {args:. ../../docs/current}",
]
test = "pytest -W default"
testunit = "pytest -m 'not slow'"

# Lock dependencies for CI, otherwise we could get failing checks on
# unrelated PRs but not needed locally because it can help catch issues
# early from dependency updates.
lock = "hatch dep show requirements --all | pip-compile --annotate --resolver=backtracking -U -o requirements.txt -"

[tool.hatch.envs.default.env-vars]
CUSTOM_COMPILE_COMMAND = "hatch run lock"

[tool.hatch.envs.typing]
extra-dependencies = ["mypy>=0.942"]
scripts = {check = "mypy {args:src/dagger tests}"}

[tool.hatch.envs.docs]
template = "docs"
dependencies = [
    "sphinx>=5.3.0",
    "sphinx-rtd-theme~=1.3.0",
]

[tool.hatch.envs.docs.scripts]
build = "sphinx-build -v docs docs/_build"
server = "python -m http.server -d docs/_build"
preview = [
    "build",
    "server",
]

[tool.pytest.ini_options]
testpaths = ["tests/"]
addopts = [
    "--import-mode=importlib",
]
markers = [
    "slow: mark test as slow (integration)",
    "provision: mark provisioning tests",
]

[tool.mypy]
disallow_untyped_defs = false
follow_imports = "normal"
# ignore_missing_imports = true
install_types = true
non_interactive = true
warn_redundant_casts = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

[tool.black]
include = '\.pyi?$'
target-version = ["py310", "py311"]

[tool.ruff]
src = ["src", "tests"]
exclude = ["experimental/*/pyproject.toml"]
target-version = "py310"
select = ["ALL"]
ignore = [
    # Type inferrance is ok in a lot of places.
    "ANN",
    # This rule doesn't know to ignore a subclass override
    # so we get false positives for unused arguments.
    "ARG002",
    # Black can handle trailing commas automatically.
    "COM812",
    # Can't control using a library with boolean arguments.
    "FBT",
    # TODO: Document public modules and packages.
    "D100",
    "D104",
    # Imperative mood only makes sense in functions, not classes.
    "D401",
    # Not using timezones in this project.
    "DTZ",
    # Allow logging with default %. You need custom setup to use `extra`.
    "G002",
    # Valid use in pytest, docs and examples.
    "INP001",
    # Unnecessary variable assignment before `return` statement
    # doesn't seem to work as expected.
    "RET504",
    # We don't use asserts as runtime validation guarantees.
    "S101",
    # Don't guard types. Don't want to stringize them.
    "TCH",
    # Don't require author and link in TODO comments.
    "TD002",
    "TD003",
    "FIX002",
    # Pandas
    "PD",
]
unfixable = [
    # Don't remove `print` statements, just warn.
    "T201",
]

[tool.ruff.isort]
known-first-party = ["dagger"]

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["typer.Option"]

[tool.ruff.per-file-ignores]
"./docs/*" = ["D1"]
"./experimental/*" = ["D1", "T201"]
"./src/dagger/client/gen.py" = [
    # Not much control over field names and docs coming from the API.
    # Note: We could detect built-in shadowing like the reserved
    # keywords but these built-ins aren't being used in the generated
    # code so no need to bother.
    "A",
    "D",
    # Too hard to properly wrap long lines in codegen.
    "E501",
    # Allow access to private members as it's controlled by our own library.
    "SLF001",
    # Too many arguments to function call.
    "PLR0913",
    # `Optional` is preferred over `| None` because of how
    # beartype handles forward references.
    "UP007",
]
# Ignore built-in shadowing in test mocks.
"./tests/client/test_inputs.py" = ["A", "ERA001"]
"./tests/*.py" = [
    # Ignore security issues in tests.
    "S",
    # Magic value comparison doesn't apply to tests.
    "PLR2004",
    # Allow more than one statement in pytest.raises.
    "PT012",
    # No public interfaces.
    "D1",
]
# Allow some patterns to redefine imports in __init__.
"__init__.py" = ["I001", "F401", "F403", "PLC0414"]
# Typer uses boolean parameters for the CLI. Let it.
"./src/**/cli.py" = ["FBT"]

[tool.ruff.pydocstyle]
convention = "numpy"
