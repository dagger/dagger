# frozen_string_literal: true

# This file was auto-generated by `client-gen`.
# Do not make direct changes to the file.

require 'net/http'
require 'base64'
require 'json'

# Dagger module
module Dagger
  # A directory whose contents persist across runs.
  class CacheVolume < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end
  end

  # An OCI-compatible container, also known as a Docker container.
  class Container < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Turn the container into a Service.
    #
    # Be sure to set any exposed ports before this conversion.
    # @return [Service]
    def as_service
      Service.new(self, @client, 'asService')
    end

    # Returns a File representing the container serialized to a tarball.
    # @param platform_variants [Array<Container>, nil] Identifiers for other platform specific containers.
    #
    # Used for multi-platform images.
    # @param forced_compression [ImageLayerCompression, nil] Force each layer of the image to use the specified compression algorithm.
    #
    # If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
    # @param media_types [ImageMediaTypes, nil] Use the specified media types for the image's layers.
    #
    # Defaults to OCI, which is largely compatible with most recent container runtimes, but Docker may be needed for older runtimes without OCI support.
    # @return [File]
    def as_tarball(platform_variants: nil, forced_compression: nil, media_types: nil)
      args = {}
      args['platformVariants'] = platform_variants unless platform_variants.nil?
      args['forcedCompression'] = forced_compression unless forced_compression.nil?
      args['mediaTypes'] = media_types unless media_types.nil?
      File.new(self, @client, 'asTarball', args)
    end

    # Initializes this container from a Dockerfile build.
    # @param context [Directory] Directory context used by the Dockerfile.
    # @param dockerfile [string, nil] Path to the Dockerfile to use.
    # @param target [string, nil] Target build stage to build.
    # @param build_args [Array<BuildArg>, nil] Additional build arguments.
    # @param secrets [Array<Secret>, nil] Secrets to pass to the build.
    #
    # They will be mounted at /run/secrets/[secret-name] in the build container
    #
    # They can be accessed in the Dockerfile using the "secret" mount type and mount path /run/secrets/[secret-name], e.g. RUN --mount=type=secret,id=my-secret curl [http://example.com?token=$(cat /run/secrets/my-secret)](http://example.com?token=$(cat /run/secrets/my-secret))
    # @return [Container]
    def build(context:, dockerfile: nil, target: nil, build_args: nil, secrets: nil)
      assert_not_nil(:context, context)
      args = {
        'context' => context
      }
      args['dockerfile'] = dockerfile unless dockerfile.nil?
      args['target'] = target unless target.nil?
      args['buildArgs'] = build_args unless build_args.nil?
      args['secrets'] = secrets unless secrets.nil?
      Container.new(self, @client, 'build', args)
    end

    # Retrieves default arguments for future commands.
    # @return [Array<string>]
    def default_args
      n = Container.new(self, @client, 'defaultArgs')
      @client.invoke(n)
    end

    # Retrieves a directory at the given path.
    #
    # Mounts are included.
    # @param path [string] The path of the directory to retrieve (e.g., "./src").
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [Directory]
    def directory(path:, expand: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['expand'] = expand unless expand.nil?
      Directory.new(self, @client, 'directory', args)
    end

    # Retrieves entrypoint to be prepended to the arguments of all commands.
    # @return [Array<string>]
    def entrypoint
      n = Container.new(self, @client, 'entrypoint')
      @client.invoke(n)
    end

    # Retrieves the value of the specified environment variable.
    # @param name [string] The name of the environment variable to retrieve (e.g., "PATH").
    # @return [string]
    def env_variable(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      n = Container.new(self, @client, 'envVariable', args)
      @client.invoke(n)
    end

    # Retrieves the list of environment variables passed to commands.
    # @return [Array<EnvVariable>]
    def env_variables
      n = Container.new(self, @client, 'envVariables')
      @client.invoke(n)
    end

    # The exit code of the last executed command.
    #
    # Returns an error if no command was set.
    # @return [number]
    def exit_code
      n = Container.new(self, @client, 'exitCode')
      @client.invoke(n)
    end

    # EXPERIMENTAL API! Subject to change/removal at any time.
    #
    # Configures all available GPUs on the host to be accessible to this container.
    #
    # This currently works for Nvidia devices only.
    # @return [Container]
    def experimental_with_all_gp_us
      Container.new(self, @client, 'experimentalWithAllGPUs')
    end

    # EXPERIMENTAL API! Subject to change/removal at any time.
    #
    # Configures the provided list of devices to be accessible to this container.
    #
    # This currently works for Nvidia devices only.
    # @param devices [Array<string>] List of devices to be accessible to this container.
    # @return [Container]
    def experimental_with_gpu(devices:)
      assert_not_nil(:devices, devices)
      args = {
        'devices' => devices
      }
      Container.new(self, @client, 'experimentalWithGPU', args)
    end

    # Writes the container as an OCI tarball to the destination file path on the host.
    #
    # It can also export platform variants.
    # @param path [string] Host's destination path (e.g., "./tarball").
    #
    # Path can be relative to the engine's workdir or absolute.
    # @param platform_variants [Array<Container>, nil] Identifiers for other platform specific containers.
    #
    # Used for multi-platform image.
    # @param forced_compression [ImageLayerCompression, nil] Force each layer of the exported image to use the specified compression algorithm.
    #
    # If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
    # @param media_types [ImageMediaTypes, nil] Use the specified media types for the exported image's layers.
    #
    # Defaults to OCI, which is largely compatible with most recent container runtimes, but Docker may be needed for older runtimes without OCI support.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [string]
    def export(path:, platform_variants: nil, forced_compression: nil, media_types: nil, expand: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['platformVariants'] = platform_variants unless platform_variants.nil?
      args['forcedCompression'] = forced_compression unless forced_compression.nil?
      args['mediaTypes'] = media_types unless media_types.nil?
      args['expand'] = expand unless expand.nil?
      n = Container.new(self, @client, 'export', args)
      @client.invoke(n)
    end

    # Retrieves the list of exposed ports.
    #
    # This includes ports already exposed by the image, even if not explicitly added with dagger.
    # @return [Array<Port>]
    def exposed_ports
      n = Container.new(self, @client, 'exposedPorts')
      @client.invoke(n)
    end

    # Retrieves a file at the given path.
    #
    # Mounts are included.
    # @param path [string] The path of the file to retrieve (e.g., "./README.md").
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
    # @return [File]
    def file(path:, expand: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['expand'] = expand unless expand.nil?
      File.new(self, @client, 'file', args)
    end

    # Initializes this container from a pulled base image.
    # @param address [string] Image's address from its registry.
    #
    # Formatted as [host]/[user]/[repo]:[tag] (e.g., "docker.io/dagger/dagger:main").
    # @return [Container]
    def from(address:)
      assert_not_nil(:address, address)
      args = {
        'address' => address
      }
      Container.new(self, @client, 'from', args)
    end

    # The unique image reference which can only be retrieved immediately after the 'Container.From' call.
    # @return [string]
    def image_ref
      n = Container.new(self, @client, 'imageRef')
      @client.invoke(n)
    end

    # Reads the container from an OCI tarball.
    # @param source [File] File to read the container from.
    # @param tag [string, nil] Identifies the tag to import from the archive, if the archive bundles multiple tags.
    # @return [Container]
    def import(source:, tag: nil)
      assert_not_nil(:source, source)
      args = {
        'source' => source
      }
      args['tag'] = tag unless tag.nil?
      Container.new(self, @client, 'import', args)
    end

    # Retrieves the value of the specified label.
    # @param name [string] The name of the label (e.g., "org.opencontainers.artifact.created").
    # @return [string]
    def label(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      n = Container.new(self, @client, 'label', args)
      @client.invoke(n)
    end

    # Retrieves the list of labels passed to container.
    # @return [Array<Label>]
    def labels
      n = Container.new(self, @client, 'labels')
      @client.invoke(n)
    end

    # Retrieves the list of paths where a directory is mounted.
    # @return [Array<string>]
    def mounts
      n = Container.new(self, @client, 'mounts')
      @client.invoke(n)
    end

    # The platform this container executes and publishes as.
    # @return [Platform]
    def platform
      n = Container.new(self, @client, 'platform')
      @client.invoke(n)
    end

    # Publishes this container as a new image to the specified address.
    #
    # Publish returns a fully qualified ref.
    #
    # It can also publish platform variants.
    # @param address [string] Registry's address to publish the image to.
    #
    # Formatted as [host]/[user]/[repo]:[tag] (e.g. "docker.io/dagger/dagger:main").
    # @param platform_variants [Array<Container>, nil] Identifiers for other platform specific containers.
    #
    # Used for multi-platform image.
    # @param forced_compression [ImageLayerCompression, nil] Force each layer of the published image to use the specified compression algorithm.
    #
    # If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
    # @param media_types [ImageMediaTypes, nil] Use the specified media types for the published image's layers.
    #
    # Defaults to OCI, which is largely compatible with most recent registries, but Docker may be needed for older registries without OCI support.
    # @return [string]
    def publish(address:, platform_variants: nil, forced_compression: nil, media_types: nil)
      assert_not_nil(:address, address)
      args = {
        'address' => address
      }
      args['platformVariants'] = platform_variants unless platform_variants.nil?
      args['forcedCompression'] = forced_compression unless forced_compression.nil?
      args['mediaTypes'] = media_types unless media_types.nil?
      n = Container.new(self, @client, 'publish', args)
      @client.invoke(n)
    end

    # Retrieves this container's root filesystem. Mounts are not included.
    # @return [Directory]
    def rootfs
      Directory.new(self, @client, 'rootfs')
    end

    # The error stream of the last executed command.
    #
    # Returns an error if no command was set.
    # @return [string]
    def stderr
      n = Container.new(self, @client, 'stderr')
      @client.invoke(n)
    end

    # The output stream of the last executed command.
    #
    # Returns an error if no command was set.
    # @return [string]
    def stdout
      n = Container.new(self, @client, 'stdout')
      @client.invoke(n)
    end

    # Forces evaluation of the pipeline in the engine.
    #
    # It doesn't run the default command if no exec has been set.
    # @return [ContainerID]
    def sync
      n = Container.new(self, @client, 'sync')
      @client.invoke(n)
    end

    # Opens an interactive terminal for this container using its configured default terminal command if not overridden by args (or sh as a fallback default).
    # @param cmd [Array<string>, nil] If set, override the container's default terminal command and invoke these command arguments instead.
    # @param experimental_privileged_nesting [boolean, nil] Provides Dagger access to the executed command.
    #
    # Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
    # @param insecure_root_capabilities [boolean, nil] Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
    # @return [Container]
    def terminal(cmd: nil, experimental_privileged_nesting: nil, insecure_root_capabilities: nil)
      args = {}
      args['cmd'] = cmd unless cmd.nil?
      args['experimentalPrivilegedNesting'] = experimental_privileged_nesting unless experimental_privileged_nesting.nil?
      args['insecureRootCapabilities'] = insecure_root_capabilities unless insecure_root_capabilities.nil?
      Container.new(self, @client, 'terminal', args)
    end

    # Starts a Service and creates a tunnel that forwards traffic from the caller's network to that service.
    #
    # Be sure to set any exposed ports before calling this api.
    # @param ports [Array<PortForward>, nil] List of frontend/backend port mappings to forward.
    #
    # Frontend is the port accepting traffic on the host, backend is the service port.
    # @param random [boolean, nil] Bind each tunnel port to a random port on the host.
    # @return [Void]
    def up(ports: nil, random: nil)
      args = {}
      args['ports'] = ports unless ports.nil?
      args['random'] = random unless random.nil?
      n = Container.new(self, @client, 'up', args)
      @client.invoke(n)
    end

    # Retrieves the user to be set for all commands.
    # @return [string]
    def user
      n = Container.new(self, @client, 'user')
      @client.invoke(n)
    end

    # Retrieves this container plus the given OCI anotation.
    # @param name [string] The name of the annotation.
    # @param value [string] The value of the annotation.
    # @return [Container]
    def with_annotation(name:, value:)
      assert_not_nil(:name, name)
      assert_not_nil(:value, value)
      args = {
        'name' => name,
        'value' => value
      }
      Container.new(self, @client, 'withAnnotation', args)
    end

    # Configures default arguments for future commands.
    # @param args [Array<string>] Arguments to prepend to future executions (e.g., ["-v", "--no-cache"]).
    # @return [Container]
    def with_default_args(args:)
      assert_not_nil(:args, args)
      args = {
        'args' => args
      }
      Container.new(self, @client, 'withDefaultArgs', args)
    end

    # Set the default command to invoke for the container's terminal API.
    # @param args [Array<string>] The args of the command.
    # @param experimental_privileged_nesting [boolean, nil] Provides Dagger access to the executed command.
    #
    # Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
    # @param insecure_root_capabilities [boolean, nil] Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
    # @return [Container]
    def with_default_terminal_cmd(args:, experimental_privileged_nesting: nil, insecure_root_capabilities: nil)
      assert_not_nil(:args, args)
      args = {
        'args' => args
      }
      args['experimentalPrivilegedNesting'] = experimental_privileged_nesting unless experimental_privileged_nesting.nil?
      args['insecureRootCapabilities'] = insecure_root_capabilities unless insecure_root_capabilities.nil?
      Container.new(self, @client, 'withDefaultTerminalCmd', args)
    end

    # Retrieves this container plus a directory written at the given path.
    # @param path [string] Location of the written directory (e.g., "/tmp/directory").
    # @param directory [Directory] Identifier of the directory to write
    # @param exclude [Array<string>, nil] Patterns to exclude in the written directory (e.g. ["node_modules/**", ".gitignore", ".git/"]).
    # @param include [Array<string>, nil] Patterns to include in the written directory (e.g. ["*.go", "go.mod", "go.sum"]).
    # @param owner [string, nil] A user:group to set for the directory and its contents.
    #
    # The user and group can either be an ID (1000:1000) or a name (foo:bar).
    #
    # If the group is omitted, it defaults to the same as the user.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [Container]
    def with_directory(path:, directory:, exclude: nil, include: nil, owner: nil, expand: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:directory, directory)
      args = {
        'path' => path,
        'directory' => directory
      }
      args['exclude'] = exclude unless exclude.nil?
      args['include'] = include unless include.nil?
      args['owner'] = owner unless owner.nil?
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withDirectory', args)
    end

    # Retrieves this container but with a different command entrypoint.
    # @param args [Array<string>] Entrypoint to use for future executions (e.g., ["go", "run"]).
    # @param keep_default_args [boolean, nil] Don't remove the default arguments when setting the entrypoint.
    # @return [Container]
    def with_entrypoint(args:, keep_default_args: nil)
      assert_not_nil(:args, args)
      args = {
        'args' => args
      }
      args['keepDefaultArgs'] = keep_default_args unless keep_default_args.nil?
      Container.new(self, @client, 'withEntrypoint', args)
    end

    # Retrieves this container plus the given environment variable.
    # @param name [string] The name of the environment variable (e.g., "HOST").
    # @param value [string] The value of the environment variable. (e.g., "localhost").
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value according to the current environment variables defined in the container (e.g. "/opt/bin:$PATH").
    # @return [Container]
    def with_env_variable(name:, value:, expand: nil)
      assert_not_nil(:name, name)
      assert_not_nil(:value, value)
      args = {
        'name' => name,
        'value' => value
      }
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withEnvVariable', args)
    end

    # Retrieves this container after executing the specified command inside it.
    # @param args [Array<string>] Command to run instead of the container's default command (e.g., ["run", "main.go"]).
    #
    # If empty, the container's default command is used.
    # @param use_entrypoint [boolean, nil] If the container has an entrypoint, prepend it to the args.
    # @param stdin [string, nil] Content to write to the command's standard input before closing (e.g., "Hello world").
    # @param redirect_stdout [string, nil] Redirect the command's standard output to a file in the container (e.g., "/tmp/stdout").
    # @param redirect_stderr [string, nil] Redirect the command's standard error to a file in the container (e.g., "/tmp/stderr").
    # @param expect [ReturnType, nil] Exit codes this command is allowed to exit with without error
    # @param experimental_privileged_nesting [boolean, nil] Provides Dagger access to the executed command.
    #
    # Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
    # @param insecure_root_capabilities [boolean, nil] Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the args according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @param no_init [boolean, nil] If set, skip the automatic init process injected into containers by default.
    #
    # This should only be used if the user requires that their exec process be the pid 1 process in the container. Otherwise it may result in unexpected behavior.
    # @return [Container]
    def with_exec(args:, use_entrypoint: nil, stdin: nil, redirect_stdout: nil, redirect_stderr: nil, expect: nil, experimental_privileged_nesting: nil, insecure_root_capabilities: nil, expand: nil, no_init: nil)
      assert_not_nil(:args, args)
      args = {
        'args' => args
      }
      args['useEntrypoint'] = use_entrypoint unless use_entrypoint.nil?
      args['stdin'] = stdin unless stdin.nil?
      args['redirectStdout'] = redirect_stdout unless redirect_stdout.nil?
      args['redirectStderr'] = redirect_stderr unless redirect_stderr.nil?
      args['expect'] = expect unless expect.nil?
      args['experimentalPrivilegedNesting'] = experimental_privileged_nesting unless experimental_privileged_nesting.nil?
      args['insecureRootCapabilities'] = insecure_root_capabilities unless insecure_root_capabilities.nil?
      args['expand'] = expand unless expand.nil?
      args['noInit'] = no_init unless no_init.nil?
      Container.new(self, @client, 'withExec', args)
    end

    # Expose a network port.
    #
    # Exposed ports serve two purposes:
    #
    # - For health checks and introspection, when running services
    #
    # - For setting the EXPOSE OCI field when publishing the container
    # @param port [number] Port number to expose
    # @param protocol [NetworkProtocol, nil] Transport layer network protocol
    # @param description [string, nil] Optional port description
    # @param experimental_skip_healthcheck [boolean, nil] Skip the health check when run as a service.
    # @return [Container]
    def with_exposed_port(port:, protocol: nil, description: nil, experimental_skip_healthcheck: nil)
      assert_not_nil(:port, port)
      args = {
        'port' => port
      }
      args['protocol'] = protocol unless protocol.nil?
      args['description'] = description unless description.nil?
      args['experimentalSkipHealthcheck'] = experimental_skip_healthcheck unless experimental_skip_healthcheck.nil?
      Container.new(self, @client, 'withExposedPort', args)
    end

    # Retrieves this container plus the contents of the given file copied to the given path.
    # @param path [string] Location of the copied file (e.g., "/tmp/file.txt").
    # @param source [File] Identifier of the file to copy.
    # @param permissions [number, nil] Permission given to the copied file (e.g., 0600).
    # @param owner [string, nil] A user:group to set for the file.
    #
    # The user and group can either be an ID (1000:1000) or a name (foo:bar).
    #
    # If the group is omitted, it defaults to the same as the user.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
    # @return [Container]
    def with_file(path:, source:, permissions: nil, owner: nil, expand: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:source, source)
      args = {
        'path' => path,
        'source' => source
      }
      args['permissions'] = permissions unless permissions.nil?
      args['owner'] = owner unless owner.nil?
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withFile', args)
    end

    # Retrieves this container plus the contents of the given files copied to the given path.
    # @param path [string] Location where copied files should be placed (e.g., "/src").
    # @param sources [Array<File>] Identifiers of the files to copy.
    # @param permissions [number, nil] Permission given to the copied files (e.g., 0600).
    # @param owner [string, nil] A user:group to set for the files.
    #
    # The user and group can either be an ID (1000:1000) or a name (foo:bar).
    #
    # If the group is omitted, it defaults to the same as the user.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
    # @return [Container]
    def with_files(path:, sources:, permissions: nil, owner: nil, expand: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:sources, sources)
      args = {
        'path' => path,
        'sources' => sources
      }
      args['permissions'] = permissions unless permissions.nil?
      args['owner'] = owner unless owner.nil?
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withFiles', args)
    end

    # Retrieves this container plus the given label.
    # @param name [string] The name of the label (e.g., "org.opencontainers.artifact.created").
    # @param value [string] The value of the label (e.g., "2023-01-01T00:00:00Z").
    # @return [Container]
    def with_label(name:, value:)
      assert_not_nil(:name, name)
      assert_not_nil(:value, value)
      args = {
        'name' => name,
        'value' => value
      }
      Container.new(self, @client, 'withLabel', args)
    end

    # Retrieves this container plus a cache volume mounted at the given path.
    # @param path [string] Location of the cache directory (e.g., "/cache/node_modules").
    # @param cache [CacheVolume] Identifier of the cache volume to mount.
    # @param source [Directory, nil] Identifier of the directory to use as the cache volume's root.
    # @param sharing [CacheSharingMode, nil] Sharing mode of the cache volume.
    # @param owner [string, nil] A user:group to set for the mounted cache directory.
    #
    # Note that this changes the ownership of the specified mount along with the initial filesystem provided by source (if any). It does not have any effect if/when the cache has already been created.
    #
    # The user and group can either be an ID (1000:1000) or a name (foo:bar).
    #
    # If the group is omitted, it defaults to the same as the user.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [Container]
    def with_mounted_cache(path:, cache:, source: nil, sharing: nil, owner: nil, expand: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:cache, cache)
      args = {
        'path' => path,
        'cache' => cache
      }
      args['source'] = source unless source.nil?
      args['sharing'] = sharing unless sharing.nil?
      args['owner'] = owner unless owner.nil?
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withMountedCache', args)
    end

    # Retrieves this container plus a directory mounted at the given path.
    # @param path [string] Location of the mounted directory (e.g., "/mnt/directory").
    # @param source [Directory] Identifier of the mounted directory.
    # @param owner [string, nil] A user:group to set for the mounted directory and its contents.
    #
    # The user and group can either be an ID (1000:1000) or a name (foo:bar).
    #
    # If the group is omitted, it defaults to the same as the user.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [Container]
    def with_mounted_directory(path:, source:, owner: nil, expand: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:source, source)
      args = {
        'path' => path,
        'source' => source
      }
      args['owner'] = owner unless owner.nil?
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withMountedDirectory', args)
    end

    # Retrieves this container plus a file mounted at the given path.
    # @param path [string] Location of the mounted file (e.g., "/tmp/file.txt").
    # @param source [File] Identifier of the mounted file.
    # @param owner [string, nil] A user or user:group to set for the mounted file.
    #
    # The user and group can either be an ID (1000:1000) or a name (foo:bar).
    #
    # If the group is omitted, it defaults to the same as the user.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
    # @return [Container]
    def with_mounted_file(path:, source:, owner: nil, expand: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:source, source)
      args = {
        'path' => path,
        'source' => source
      }
      args['owner'] = owner unless owner.nil?
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withMountedFile', args)
    end

    # Retrieves this container plus a secret mounted into a file at the given path.
    # @param path [string] Location of the secret file (e.g., "/tmp/secret.txt").
    # @param source [Secret] Identifier of the secret to mount.
    # @param owner [string, nil] A user:group to set for the mounted secret.
    #
    # The user and group can either be an ID (1000:1000) or a name (foo:bar).
    #
    # If the group is omitted, it defaults to the same as the user.
    # @param mode [number, nil] Permission given to the mounted secret (e.g., 0600).
    #
    # This option requires an owner to be set to be active.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [Container]
    def with_mounted_secret(path:, source:, owner: nil, mode: nil, expand: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:source, source)
      args = {
        'path' => path,
        'source' => source
      }
      args['owner'] = owner unless owner.nil?
      args['mode'] = mode unless mode.nil?
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withMountedSecret', args)
    end

    # Retrieves this container plus a temporary directory mounted at the given path. Any writes will be ephemeral to a single withExec call; they will not be persisted to subsequent withExecs.
    # @param path [string] Location of the temporary directory (e.g., "/tmp/temp_dir").
    # @param size [number, nil] Size of the temporary directory in bytes.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [Container]
    def with_mounted_temp(path:, size: nil, expand: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['size'] = size unless size.nil?
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withMountedTemp', args)
    end

    # Retrieves this container plus a new file written at the given path.
    # @param path [string] Location of the written file (e.g., "/tmp/file.txt").
    # @param contents [string] Content of the file to write (e.g., "Hello world!").
    # @param permissions [number, nil] Permission given to the written file (e.g., 0600).
    # @param owner [string, nil] A user:group to set for the file.
    #
    # The user and group can either be an ID (1000:1000) or a name (foo:bar).
    #
    # If the group is omitted, it defaults to the same as the user.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
    # @return [Container]
    def with_new_file(path:, contents:, permissions: nil, owner: nil, expand: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:contents, contents)
      args = {
        'path' => path,
        'contents' => contents
      }
      args['permissions'] = permissions unless permissions.nil?
      args['owner'] = owner unless owner.nil?
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withNewFile', args)
    end

    # Retrieves this container with a registry authentication for a given address.
    # @param address [string] Registry's address to bind the authentication to.
    #
    # Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
    # @param username [string] The username of the registry's account (e.g., "Dagger").
    # @param secret [Secret] The API key, password or token to authenticate to this registry.
    # @return [Container]
    def with_registry_auth(address:, username:, secret:)
      assert_not_nil(:address, address)
      assert_not_nil(:username, username)
      assert_not_nil(:secret, secret)
      args = {
        'address' => address,
        'username' => username,
        'secret' => secret
      }
      Container.new(self, @client, 'withRegistryAuth', args)
    end

    # Retrieves the container with the given directory mounted to /.
    # @param directory [Directory] Directory to mount.
    # @return [Container]
    def with_rootfs(directory:)
      assert_not_nil(:directory, directory)
      args = {
        'directory' => directory
      }
      Container.new(self, @client, 'withRootfs', args)
    end

    # Retrieves this container plus an env variable containing the given secret.
    # @param name [string] The name of the secret variable (e.g., "API_SECRET").
    # @param secret [Secret] The identifier of the secret value.
    # @return [Container]
    def with_secret_variable(name:, secret:)
      assert_not_nil(:name, name)
      assert_not_nil(:secret, secret)
      args = {
        'name' => name,
        'secret' => secret
      }
      Container.new(self, @client, 'withSecretVariable', args)
    end

    # Establish a runtime dependency on a service.
    #
    # The service will be started automatically when needed and detached when it is no longer needed, executing the default command if none is set.
    #
    # The service will be reachable from the container via the provided hostname alias.
    #
    # The service dependency will also convey to any files or directories produced by the container.
    # @param alias_ [string] A name that can be used to reach the service from the container
    # @param service [Service] Identifier of the service container
    # @return [Container]
    def with_service_binding(alias_:, service:)
      assert_not_nil(:alias_, alias_)
      assert_not_nil(:service, service)
      args = {
        'alias' => alias_,
        'service' => service
      }
      Container.new(self, @client, 'withServiceBinding', args)
    end

    # Retrieves this container plus a socket forwarded to the given Unix socket path.
    # @param path [string] Location of the forwarded Unix socket (e.g., "/tmp/socket").
    # @param source [Socket] Identifier of the socket to forward.
    # @param owner [string, nil] A user:group to set for the mounted socket.
    #
    # The user and group can either be an ID (1000:1000) or a name (foo:bar).
    #
    # If the group is omitted, it defaults to the same as the user.
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [Container]
    def with_unix_socket(path:, source:, owner: nil, expand: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:source, source)
      args = {
        'path' => path,
        'source' => source
      }
      args['owner'] = owner unless owner.nil?
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withUnixSocket', args)
    end

    # Retrieves this container with a different command user.
    # @param name [string] The user to set (e.g., "root").
    # @return [Container]
    def with_user(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      Container.new(self, @client, 'withUser', args)
    end

    # Retrieves this container with a different working directory.
    # @param path [string] The path to set as the working directory (e.g., "/app").
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [Container]
    def with_workdir(path:, expand: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withWorkdir', args)
    end

    # Retrieves this container minus the given OCI annotation.
    # @param name [string] The name of the annotation.
    # @return [Container]
    def without_annotation(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      Container.new(self, @client, 'withoutAnnotation', args)
    end

    # Retrieves this container with unset default arguments for future commands.
    # @return [Container]
    def without_default_args
      Container.new(self, @client, 'withoutDefaultArgs')
    end

    # Retrieves this container with the directory at the given path removed.
    # @param path [string] Location of the directory to remove (e.g., ".github/").
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [Container]
    def without_directory(path:, expand: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withoutDirectory', args)
    end

    # Retrieves this container with an unset command entrypoint.
    # @param keep_default_args [boolean, nil] Don't remove the default arguments when unsetting the entrypoint.
    # @return [Container]
    def without_entrypoint(keep_default_args: nil)
      args = {}
      args['keepDefaultArgs'] = keep_default_args unless keep_default_args.nil?
      Container.new(self, @client, 'withoutEntrypoint', args)
    end

    # Retrieves this container minus the given environment variable.
    # @param name [string] The name of the environment variable (e.g., "HOST").
    # @return [Container]
    def without_env_variable(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      Container.new(self, @client, 'withoutEnvVariable', args)
    end

    # Unexpose a previously exposed port.
    # @param port [number] Port number to unexpose
    # @param protocol [NetworkProtocol, nil] Port protocol to unexpose
    # @return [Container]
    def without_exposed_port(port:, protocol: nil)
      assert_not_nil(:port, port)
      args = {
        'port' => port
      }
      args['protocol'] = protocol unless protocol.nil?
      Container.new(self, @client, 'withoutExposedPort', args)
    end

    # Retrieves this container with the file at the given path removed.
    # @param path [string] Location of the file to remove (e.g., "/file.txt").
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
    # @return [Container]
    def without_file(path:, expand: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withoutFile', args)
    end

    # Retrieves this container with the files at the given paths removed.
    # @param paths [Array<string>] Location of the files to remove (e.g., ["/file.txt"]).
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of paths according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
    # @return [Container]
    def without_files(paths:, expand: nil)
      assert_not_nil(:paths, paths)
      args = {
        'paths' => paths
      }
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withoutFiles', args)
    end

    # Retrieves this container minus the given environment label.
    # @param name [string] The name of the label to remove (e.g., "org.opencontainers.artifact.created").
    # @return [Container]
    def without_label(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      Container.new(self, @client, 'withoutLabel', args)
    end

    # Retrieves this container after unmounting everything at the given path.
    # @param path [string] Location of the cache directory (e.g., "/cache/node_modules").
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [Container]
    def without_mount(path:, expand: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withoutMount', args)
    end

    # Retrieves this container without the registry authentication of a given address.
    # @param address [string] Registry's address to remove the authentication from.
    #
    # Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
    # @return [Container]
    def without_registry_auth(address:)
      assert_not_nil(:address, address)
      args = {
        'address' => address
      }
      Container.new(self, @client, 'withoutRegistryAuth', args)
    end

    # Retrieves this container minus the given environment variable containing the secret.
    # @param name [string] The name of the environment variable (e.g., "HOST").
    # @return [Container]
    def without_secret_variable(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      Container.new(self, @client, 'withoutSecretVariable', args)
    end

    # Retrieves this container with a previously added Unix socket removed.
    # @param path [string] Location of the socket to remove (e.g., "/tmp/socket").
    # @param expand [boolean, nil] Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
    # @return [Container]
    def without_unix_socket(path:, expand: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['expand'] = expand unless expand.nil?
      Container.new(self, @client, 'withoutUnixSocket', args)
    end

    # Retrieves this container with an unset command user.
    #
    # Should default to root.
    # @return [Container]
    def without_user
      Container.new(self, @client, 'withoutUser')
    end

    # Retrieves this container with an unset working directory.
    #
    # Should default to "/".
    # @return [Container]
    def without_workdir
      Container.new(self, @client, 'withoutWorkdir')
    end

    # Retrieves the working directory for all commands.
    # @return [string]
    def workdir
      n = Container.new(self, @client, 'workdir')
      @client.invoke(n)
    end

    def with(fun)
      fun.call(self)
    end
  end

  # Reflective module API provided to functions at runtime.
  class CurrentModule < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The name of the module being executed in
    # @return [string]
    def name
      n = CurrentModule.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The directory containing the module's source code loaded into the engine (plus any generated code that may have been created).
    # @return [Directory]
    def source
      Directory.new(self, @client, 'source')
    end

    # Load a directory from the module's scratch working directory, including any changes that may have been made to it during module function execution.
    # @param path [string] Location of the directory to access (e.g., ".").
    # @param exclude [Array<string>, nil] Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
    # @param include [Array<string>, nil] Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
    # @return [Directory]
    def workdir(path:, exclude: nil, include: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['exclude'] = exclude unless exclude.nil?
      args['include'] = include unless include.nil?
      Directory.new(self, @client, 'workdir', args)
    end

    # Load a file from the module's scratch working directory, including any changes that may have been made to it during module function execution.Load a file from the module's scratch working directory, including any changes that may have been made to it during module function execution.
    # @param path [string] Location of the file to retrieve (e.g., "README.md").
    # @return [File]
    def workdir_file(path:)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      File.new(self, @client, 'workdirFile', args)
    end
  end

  # A directory.
  class Directory < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Load the directory as a Dagger module
    # @param source_root_path [string, nil] An optional subpath of the directory which contains the module's configuration file.
    #
    # This is needed when the module code is in a subdirectory but requires parent directories to be loaded in order to execute. For example, the module source code may need a go.mod, project.toml, package.json, etc. file from a parent directory.
    #
    # If not set, the module source code is loaded from the root of the directory.
    # @param engine_version [string, nil] The engine version to upgrade to.
    # @return [Module_]
    def as_module(source_root_path: nil, engine_version: nil)
      args = {}
      args['sourceRootPath'] = source_root_path unless source_root_path.nil?
      args['engineVersion'] = engine_version unless engine_version.nil?
      Module_.new(self, @client, 'asModule', args)
    end

    # Gets the difference between this directory and an another directory.
    # @param other [Directory] Identifier of the directory to compare.
    # @return [Directory]
    def diff(other:)
      assert_not_nil(:other, other)
      args = {
        'other' => other
      }
      Directory.new(self, @client, 'diff', args)
    end

    # Return the directory's digest. The format of the digest is not guaranteed to be stable between releases of Dagger. It is guaranteed to be stable between invocations of the same Dagger engine.
    # @return [string]
    def digest
      n = Directory.new(self, @client, 'digest')
      @client.invoke(n)
    end

    # Retrieves a directory at the given path.
    # @param path [string] Location of the directory to retrieve (e.g., "/src").
    # @return [Directory]
    def directory(path:)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      Directory.new(self, @client, 'directory', args)
    end

    # Builds a new Docker container from this directory.
    # @param platform [Platform, nil] The platform to build.
    # @param dockerfile [string, nil] Path to the Dockerfile to use (e.g., "frontend.Dockerfile").
    # @param target [string, nil] Target build stage to build.
    # @param build_args [Array<BuildArg>, nil] Build arguments to use in the build.
    # @param secrets [Array<Secret>, nil] Secrets to pass to the build.
    #
    # They will be mounted at /run/secrets/[secret-name].
    # @return [Container]
    def docker_build(platform: nil, dockerfile: nil, target: nil, build_args: nil, secrets: nil)
      args = {}
      args['platform'] = platform unless platform.nil?
      args['dockerfile'] = dockerfile unless dockerfile.nil?
      args['target'] = target unless target.nil?
      args['buildArgs'] = build_args unless build_args.nil?
      args['secrets'] = secrets unless secrets.nil?
      Container.new(self, @client, 'dockerBuild', args)
    end

    # Returns a list of files and directories at the given path.
    # @param path [string, nil] Location of the directory to look at (e.g., "/src").
    # @return [Array<string>]
    def entries(path: nil)
      args = {}
      args['path'] = path unless path.nil?
      n = Directory.new(self, @client, 'entries', args)
      @client.invoke(n)
    end

    # Writes the contents of the directory to a path on the host.
    # @param path [string] Location of the copied directory (e.g., "logs/").
    # @param wipe [boolean, nil] If true, then the host directory will be wiped clean before exporting so that it exactly matches the directory being exported; this means it will delete any files on the host that aren't in the exported dir. If false (the default), the contents of the directory will be merged with any existing contents of the host directory, leaving any existing files on the host that aren't in the exported directory alone.
    # @return [string]
    def export(path:, wipe: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['wipe'] = wipe unless wipe.nil?
      n = Directory.new(self, @client, 'export', args)
      @client.invoke(n)
    end

    # Retrieves a file at the given path.
    # @param path [string] Location of the file to retrieve (e.g., "README.md").
    # @return [File]
    def file(path:)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      File.new(self, @client, 'file', args)
    end

    # Returns a list of files and directories that matche the given pattern.
    # @param pattern [string] Pattern to match (e.g., "*.md").
    # @return [Array<string>]
    def glob(pattern:)
      assert_not_nil(:pattern, pattern)
      args = {
        'pattern' => pattern
      }
      n = Directory.new(self, @client, 'glob', args)
      @client.invoke(n)
    end

    # Force evaluation in the engine.
    # @return [DirectoryID]
    def sync
      n = Directory.new(self, @client, 'sync')
      @client.invoke(n)
    end

    # Opens an interactive terminal in new container with this directory mounted inside.
    # @param cmd [Array<string>, nil] If set, override the container's default terminal command and invoke these command arguments instead.
    # @param experimental_privileged_nesting [boolean, nil] Provides Dagger access to the executed command.
    #
    # Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
    # @param insecure_root_capabilities [boolean, nil] Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
    # @param container [Container, nil] If set, override the default container used for the terminal.
    # @return [Directory]
    def terminal(cmd: nil, experimental_privileged_nesting: nil, insecure_root_capabilities: nil, container: nil)
      args = {}
      args['cmd'] = cmd unless cmd.nil?
      args['experimentalPrivilegedNesting'] = experimental_privileged_nesting unless experimental_privileged_nesting.nil?
      args['insecureRootCapabilities'] = insecure_root_capabilities unless insecure_root_capabilities.nil?
      args['container'] = container unless container.nil?
      Directory.new(self, @client, 'terminal', args)
    end

    # Retrieves this directory plus a directory written at the given path.
    # @param path [string] Location of the written directory (e.g., "/src/").
    # @param directory [Directory] Identifier of the directory to copy.
    # @param exclude [Array<string>, nil] Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
    # @param include [Array<string>, nil] Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
    # @return [Directory]
    def with_directory(path:, directory:, exclude: nil, include: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:directory, directory)
      args = {
        'path' => path,
        'directory' => directory
      }
      args['exclude'] = exclude unless exclude.nil?
      args['include'] = include unless include.nil?
      Directory.new(self, @client, 'withDirectory', args)
    end

    # Retrieves this directory plus the contents of the given file copied to the given path.
    # @param path [string] Location of the copied file (e.g., "/file.txt").
    # @param source [File] Identifier of the file to copy.
    # @param permissions [number, nil] Permission given to the copied file (e.g., 0600).
    # @return [Directory]
    def with_file(path:, source:, permissions: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:source, source)
      args = {
        'path' => path,
        'source' => source
      }
      args['permissions'] = permissions unless permissions.nil?
      Directory.new(self, @client, 'withFile', args)
    end

    # Retrieves this directory plus the contents of the given files copied to the given path.
    # @param path [string] Location where copied files should be placed (e.g., "/src").
    # @param sources [Array<File>] Identifiers of the files to copy.
    # @param permissions [number, nil] Permission given to the copied files (e.g., 0600).
    # @return [Directory]
    def with_files(path:, sources:, permissions: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:sources, sources)
      args = {
        'path' => path,
        'sources' => sources
      }
      args['permissions'] = permissions unless permissions.nil?
      Directory.new(self, @client, 'withFiles', args)
    end

    # Retrieves this directory plus a new directory created at the given path.
    # @param path [string] Location of the directory created (e.g., "/logs").
    # @param permissions [number, nil] Permission granted to the created directory (e.g., 0777).
    # @return [Directory]
    def with_new_directory(path:, permissions: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['permissions'] = permissions unless permissions.nil?
      Directory.new(self, @client, 'withNewDirectory', args)
    end

    # Retrieves this directory plus a new file written at the given path.
    # @param path [string] Location of the written file (e.g., "/file.txt").
    # @param contents [string] Content of the written file (e.g., "Hello world!").
    # @param permissions [number, nil] Permission given to the copied file (e.g., 0600).
    # @return [Directory]
    def with_new_file(path:, contents:, permissions: nil)
      assert_not_nil(:path, path)
      assert_not_nil(:contents, contents)
      args = {
        'path' => path,
        'contents' => contents
      }
      args['permissions'] = permissions unless permissions.nil?
      Directory.new(self, @client, 'withNewFile', args)
    end

    # Retrieves this directory with all file/dir timestamps set to the given time.
    # @param timestamp [number] Timestamp to set dir/files in.
    #
    # Formatted in seconds following Unix epoch (e.g., 1672531199).
    # @return [Directory]
    def with_timestamps(timestamp:)
      assert_not_nil(:timestamp, timestamp)
      args = {
        'timestamp' => timestamp
      }
      Directory.new(self, @client, 'withTimestamps', args)
    end

    # Retrieves this directory with the directory at the given path removed.
    # @param path [string] Location of the directory to remove (e.g., ".github/").
    # @return [Directory]
    def without_directory(path:)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      Directory.new(self, @client, 'withoutDirectory', args)
    end

    # Retrieves this directory with the file at the given path removed.
    # @param path [string] Location of the file to remove (e.g., "/file.txt").
    # @return [Directory]
    def without_file(path:)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      Directory.new(self, @client, 'withoutFile', args)
    end

    # Retrieves this directory with the files at the given paths removed.
    # @param paths [Array<string>] Location of the file to remove (e.g., ["/file.txt"]).
    # @return [Directory]
    def without_files(paths:)
      assert_not_nil(:paths, paths)
      args = {
        'paths' => paths
      }
      Directory.new(self, @client, 'withoutFiles', args)
    end

    def with(fun)
      fun.call(self)
    end
  end

  # The Dagger engine configuration and state
  class Engine < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The local (on-disk) cache for the Dagger engine
    # @return [EngineCache]
    def local_cache
      EngineCache.new(self, @client, 'localCache')
    end
  end

  # A cache storage for the Dagger engine
  class EngineCache < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The current set of entries in the cache
    # @return [EngineCacheEntrySet]
    def entry_set
      EngineCacheEntrySet.new(self, @client, 'entrySet')
    end

    # The maximum bytes to keep in the cache without pruning, after which automatic pruning may kick in.
    # @return [number]
    # @deprecated Use minFreeSpace instead.
    def keep_bytes
      n = EngineCache.new(self, @client, 'keepBytes')
      @client.invoke(n)
    end

    # The maximum bytes to keep in the cache without pruning.
    # @return [number]
    def max_used_space
      n = EngineCache.new(self, @client, 'maxUsedSpace')
      @client.invoke(n)
    end

    # The target amount of free disk space the garbage collector will attempt to leave.
    # @return [number]
    def min_free_space
      n = EngineCache.new(self, @client, 'minFreeSpace')
      @client.invoke(n)
    end

    # Prune the cache of releaseable entries
    # @return [Void]
    def prune
      n = EngineCache.new(self, @client, 'prune')
      @client.invoke(n)
    end

    # @return [number]
    def reserved_space
      n = EngineCache.new(self, @client, 'reservedSpace')
      @client.invoke(n)
    end
  end

  # An individual cache entry in a cache entry set
  class EngineCacheEntry < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Whether the cache entry is actively being used.
    # @return [boolean]
    def actively_used
      n = EngineCacheEntry.new(self, @client, 'activelyUsed')
      @client.invoke(n)
    end

    # The time the cache entry was created, in Unix nanoseconds.
    # @return [number]
    def created_time_unix_nano
      n = EngineCacheEntry.new(self, @client, 'createdTimeUnixNano')
      @client.invoke(n)
    end

    # The description of the cache entry.
    # @return [string]
    def description
      n = EngineCacheEntry.new(self, @client, 'description')
      @client.invoke(n)
    end

    # The disk space used by the cache entry.
    # @return [number]
    def disk_space_bytes
      n = EngineCacheEntry.new(self, @client, 'diskSpaceBytes')
      @client.invoke(n)
    end

    # The most recent time the cache entry was used, in Unix nanoseconds.
    # @return [number]
    def most_recent_use_time_unix_nano
      n = EngineCacheEntry.new(self, @client, 'mostRecentUseTimeUnixNano')
      @client.invoke(n)
    end
  end

  # A set of cache entries returned by a query to a cache
  class EngineCacheEntrySet < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The total disk space used by the cache entries in this set.
    # @return [number]
    def disk_space_bytes
      n = EngineCacheEntrySet.new(self, @client, 'diskSpaceBytes')
      @client.invoke(n)
    end

    # The list of individual cache entries in the set
    # @return [Array<EngineCacheEntry>]
    def entries
      n = EngineCacheEntrySet.new(self, @client, 'entries')
      @client.invoke(n)
    end

    # The number of cache entries in this set.
    # @return [number]
    def entry_count
      n = EngineCacheEntrySet.new(self, @client, 'entryCount')
      @client.invoke(n)
    end
  end

  # A definition of a custom enum defined in a Module.
  class EnumTypeDef < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # A doc string for the enum, if any.
    # @return [string]
    def description
      n = EnumTypeDef.new(self, @client, 'description')
      @client.invoke(n)
    end

    # The name of the enum.
    # @return [string]
    def name
      n = EnumTypeDef.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The location of this enum declaration.
    # @return [SourceMap]
    def source_map
      SourceMap.new(self, @client, 'sourceMap')
    end

    # If this EnumTypeDef is associated with a Module, the name of the module. Unset otherwise.
    # @return [string]
    def source_module_name
      n = EnumTypeDef.new(self, @client, 'sourceModuleName')
      @client.invoke(n)
    end

    # The values of the enum.
    # @return [Array<EnumValueTypeDef>]
    def values
      n = EnumTypeDef.new(self, @client, 'values')
      @client.invoke(n)
    end
  end

  # A definition of a value in a custom enum defined in a Module.
  class EnumValueTypeDef < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # A doc string for the enum value, if any.
    # @return [string]
    def description
      n = EnumValueTypeDef.new(self, @client, 'description')
      @client.invoke(n)
    end

    # The name of the enum value.
    # @return [string]
    def name
      n = EnumValueTypeDef.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The location of this enum value declaration.
    # @return [SourceMap]
    def source_map
      SourceMap.new(self, @client, 'sourceMap')
    end
  end

  # An environment variable name and value.
  class EnvVariable < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The environment variable name.
    # @return [string]
    def name
      n = EnvVariable.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The environment variable value.
    # @return [string]
    def value
      n = EnvVariable.new(self, @client, 'value')
      @client.invoke(n)
    end
  end

  # Error class
  class Error < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # A description of the error.
    # @return [string]
    def message
      n = Error.new(self, @client, 'message')
      @client.invoke(n)
    end
  end

  # A definition of a field on a custom object defined in a Module.
  #
  # A field on an object has a static value, as opposed to a function on an object whose value is computed by invoking code (and can accept arguments).
  class FieldTypeDef < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # A doc string for the field, if any.
    # @return [string]
    def description
      n = FieldTypeDef.new(self, @client, 'description')
      @client.invoke(n)
    end

    # The name of the field in lowerCamelCase format.
    # @return [string]
    def name
      n = FieldTypeDef.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The location of this field declaration.
    # @return [SourceMap]
    def source_map
      SourceMap.new(self, @client, 'sourceMap')
    end

    # The type of the field.
    # @return [TypeDef]
    def type_def
      TypeDef.new(self, @client, 'typeDef')
    end
  end

  # A file.
  class File < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Retrieves the contents of the file.
    # @return [string]
    def contents
      n = File.new(self, @client, 'contents')
      @client.invoke(n)
    end

    # Return the file's digest. The format of the digest is not guaranteed to be stable between releases of Dagger. It is guaranteed to be stable between invocations of the same Dagger engine.
    # @param exclude_metadata [boolean, nil] If true, exclude metadata from the digest.
    # @return [string]
    def digest(exclude_metadata: nil)
      args = {}
      args['excludeMetadata'] = exclude_metadata unless exclude_metadata.nil?
      n = File.new(self, @client, 'digest', args)
      @client.invoke(n)
    end

    # Writes the file to a file path on the host.
    # @param path [string] Location of the written directory (e.g., "output.txt").
    # @param allow_parent_dir_path [boolean, nil] If allowParentDirPath is true, the path argument can be a directory path, in which case the file will be created in that directory.
    # @return [string]
    def export(path:, allow_parent_dir_path: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['allowParentDirPath'] = allow_parent_dir_path unless allow_parent_dir_path.nil?
      n = File.new(self, @client, 'export', args)
      @client.invoke(n)
    end

    # Retrieves the name of the file.
    # @return [string]
    def name
      n = File.new(self, @client, 'name')
      @client.invoke(n)
    end

    # Retrieves the size of the file, in bytes.
    # @return [number]
    def size
      n = File.new(self, @client, 'size')
      @client.invoke(n)
    end

    # Force evaluation in the engine.
    # @return [FileID]
    def sync
      n = File.new(self, @client, 'sync')
      @client.invoke(n)
    end

    # Retrieves this file with its name set to the given name.
    # @param name [string] Name to set file to.
    # @return [File]
    def with_name(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      File.new(self, @client, 'withName', args)
    end

    # Retrieves this file with its created/modified timestamps set to the given time.
    # @param timestamp [number] Timestamp to set dir/files in.
    #
    # Formatted in seconds following Unix epoch (e.g., 1672531199).
    # @return [File]
    def with_timestamps(timestamp:)
      assert_not_nil(:timestamp, timestamp)
      args = {
        'timestamp' => timestamp
      }
      File.new(self, @client, 'withTimestamps', args)
    end

    def with(fun)
      fun.call(self)
    end
  end

  # Function represents a resolver provided by a Module.
  #
  # A function always evaluates against a parent object and is given a set of named arguments.
  class Function < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Arguments accepted by the function, if any.
    # @return [Array<FunctionArg>]
    def args
      n = Function.new(self, @client, 'args')
      @client.invoke(n)
    end

    # A doc string for the function, if any.
    # @return [string]
    def description
      n = Function.new(self, @client, 'description')
      @client.invoke(n)
    end

    # The name of the function.
    # @return [string]
    def name
      n = Function.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The type returned by the function.
    # @return [TypeDef]
    def return_type
      TypeDef.new(self, @client, 'returnType')
    end

    # The location of this function declaration.
    # @return [SourceMap]
    def source_map
      SourceMap.new(self, @client, 'sourceMap')
    end

    # Returns the function with the provided argument
    # @param name [string] The name of the argument
    # @param type_def [TypeDef] The type of the argument
    # @param description [string, nil] A doc string for the argument, if any
    # @param default_value [JSON, nil] A default value to use for this argument if not explicitly set by the caller, if any
    # @param default_path [string, nil] If the argument is a Directory or File type, default to load path from context directory, relative to root directory.
    # @param ignore [Array<string>, nil] Patterns to ignore when loading the contextual argument value.
    # @return [Function]
    def with_arg(name:, type_def:, description: nil, default_value: nil, default_path: nil, ignore: nil, source_map: nil)
      assert_not_nil(:name, name)
      assert_not_nil(:type_def, type_def)
      args = {
        'name' => name,
        'typeDef' => type_def
      }
      args['description'] = description unless description.nil?
      args['defaultValue'] = default_value unless default_value.nil?
      args['defaultPath'] = default_path unless default_path.nil?
      args['ignore'] = ignore unless ignore.nil?
      args['sourceMap'] = source_map unless source_map.nil?
      Function.new(self, @client, 'withArg', args)
    end

    # Returns the function with the given doc string.
    # @param description [string] The doc string to set.
    # @return [Function]
    def with_description(description:)
      assert_not_nil(:description, description)
      args = {
        'description' => description
      }
      Function.new(self, @client, 'withDescription', args)
    end

    # Returns the function with the given source map.
    # @param source_map [SourceMap] The source map for the function definition.
    # @return [Function]
    def with_source_map(source_map:)
      assert_not_nil(:source_map, source_map)
      args = {
        'sourceMap' => source_map
      }
      Function.new(self, @client, 'withSourceMap', args)
    end

    def with(fun)
      fun.call(self)
    end
  end

  # An argument accepted by a function.
  #
  # This is a specification for an argument at function definition time, not an argument passed at function call time.
  class FunctionArg < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Only applies to arguments of type File or Directory. If the argument is not set, load it from the given path in the context directory
    # @return [string]
    def default_path
      n = FunctionArg.new(self, @client, 'defaultPath')
      @client.invoke(n)
    end

    # A default value to use for this argument when not explicitly set by the caller, if any.
    # @return [JSON]
    def default_value
      n = FunctionArg.new(self, @client, 'defaultValue')
      @client.invoke(n)
    end

    # A doc string for the argument, if any.
    # @return [string]
    def description
      n = FunctionArg.new(self, @client, 'description')
      @client.invoke(n)
    end

    # Only applies to arguments of type Directory. The ignore patterns are applied to the input directory, and matching entries are filtered out, in a cache-efficient manner.
    # @return [Array<string>]
    def ignore
      n = FunctionArg.new(self, @client, 'ignore')
      @client.invoke(n)
    end

    # The name of the argument in lowerCamelCase format.
    # @return [string]
    def name
      n = FunctionArg.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The location of this arg declaration.
    # @return [SourceMap]
    def source_map
      SourceMap.new(self, @client, 'sourceMap')
    end

    # The type of the argument.
    # @return [TypeDef]
    def type_def
      TypeDef.new(self, @client, 'typeDef')
    end
  end

  # An active function call.
  class FunctionCall < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The argument values the function is being invoked with.
    # @return [Array<FunctionCallArgValue>]
    def input_args
      n = FunctionCall.new(self, @client, 'inputArgs')
      @client.invoke(n)
    end

    # The name of the function being called.
    # @return [string]
    def name
      n = FunctionCall.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The value of the parent object of the function being called. If the function is top-level to the module, this is always an empty object.
    # @return [JSON]
    def parent
      n = FunctionCall.new(self, @client, 'parent')
      @client.invoke(n)
    end

    # The name of the parent object of the function being called. If the function is top-level to the module, this is the name of the module.
    # @return [string]
    def parent_name
      n = FunctionCall.new(self, @client, 'parentName')
      @client.invoke(n)
    end

    # Return an error from the function.
    # @param error [Error] The error to return.
    # @return [Void]
    def return_error(error:)
      assert_not_nil(:error, error)
      args = {
        'error' => error
      }
      n = FunctionCall.new(self, @client, 'returnError', args)
      @client.invoke(n)
    end

    # Set the return value of the function call to the provided value.
    # @param value [JSON] JSON serialization of the return value.
    # @return [Void]
    def return_value(value:)
      assert_not_nil(:value, value)
      args = {
        'value' => value
      }
      n = FunctionCall.new(self, @client, 'returnValue', args)
      @client.invoke(n)
    end
  end

  # A value passed as a named argument to a function call.
  class FunctionCallArgValue < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The name of the argument.
    # @return [string]
    def name
      n = FunctionCallArgValue.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The value of the argument represented as a JSON serialized string.
    # @return [JSON]
    def value
      n = FunctionCallArgValue.new(self, @client, 'value')
      @client.invoke(n)
    end
  end

  # The result of running an SDK's codegen.
  class GeneratedCode < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The directory containing the generated code.
    # @return [Directory]
    def code
      Directory.new(self, @client, 'code')
    end

    # List of paths to mark generated in version control (i.e. .gitattributes).
    # @return [Array<string>]
    def vcs_generated_paths
      n = GeneratedCode.new(self, @client, 'vcsGeneratedPaths')
      @client.invoke(n)
    end

    # List of paths to ignore in version control (i.e. .gitignore).
    # @return [Array<string>]
    def vcs_ignored_paths
      n = GeneratedCode.new(self, @client, 'vcsIgnoredPaths')
      @client.invoke(n)
    end

    # Set the list of paths to mark generated in version control.
    # @return [GeneratedCode]
    def with_vcs_generated_paths(paths:)
      assert_not_nil(:paths, paths)
      args = {
        'paths' => paths
      }
      GeneratedCode.new(self, @client, 'withVCSGeneratedPaths', args)
    end

    # Set the list of paths to ignore in version control.
    # @return [GeneratedCode]
    def with_vcs_ignored_paths(paths:)
      assert_not_nil(:paths, paths)
      args = {
        'paths' => paths
      }
      GeneratedCode.new(self, @client, 'withVCSIgnoredPaths', args)
    end

    def with(fun)
      fun.call(self)
    end
  end

  # Module source originating from a git repo.
  class GitModuleSource < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The ref to clone the root of the git repo from
    # @return [string]
    def clone_ref
      n = GitModuleSource.new(self, @client, 'cloneRef')
      @client.invoke(n)
    end

    # The resolved commit of the git repo this source points to.
    # @return [string]
    def commit
      n = GitModuleSource.new(self, @client, 'commit')
      @client.invoke(n)
    end

    # The directory containing everything needed to load load and use the module.
    # @return [Directory]
    def context_directory
      Directory.new(self, @client, 'contextDirectory')
    end

    # The URL to access the web view of the repository (e.g., GitHub, GitLab, Bitbucket)
    # @return [string]
    def html_repo_url
      n = GitModuleSource.new(self, @client, 'htmlRepoURL')
      @client.invoke(n)
    end

    # The URL to the source's git repo in a web browser
    # @return [string]
    def html_url
      n = GitModuleSource.new(self, @client, 'htmlURL')
      @client.invoke(n)
    end

    # The clean module name of the root of the module
    # @return [string]
    def root
      n = GitModuleSource.new(self, @client, 'root')
      @client.invoke(n)
    end

    # The path to the root of the module source under the context directory. This directory contains its configuration file. It also contains its source code (possibly as a subdirectory).
    # @return [string]
    def root_subpath
      n = GitModuleSource.new(self, @client, 'rootSubpath')
      @client.invoke(n)
    end

    # The specified version of the git repo this source points to.
    # @return [string]
    def version
      n = GitModuleSource.new(self, @client, 'version')
      @client.invoke(n)
    end
  end

  # A git ref (tag, branch, or commit).
  class GitRef < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The resolved commit id at this ref.
    # @return [string]
    def commit
      n = GitRef.new(self, @client, 'commit')
      @client.invoke(n)
    end

    # The filesystem tree at this ref.
    # @param discard_git_dir [boolean, nil] Set to true to discard .git directory.
    # @return [Directory]
    def tree(discard_git_dir: nil)
      args = {}
      args['discardGitDir'] = discard_git_dir unless discard_git_dir.nil?
      Directory.new(self, @client, 'tree', args)
    end
  end

  # A git repository.
  class GitRepository < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Returns details of a branch.
    # @param name [string] Branch's name (e.g., "main").
    # @return [GitRef]
    def branch(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      GitRef.new(self, @client, 'branch', args)
    end

    # Returns details of a commit.
    # @param id [string] Identifier of the commit (e.g., "b6315d8f2810962c601af73f86831f6866ea798b").
    # @return [GitRef]
    def commit(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      GitRef.new(self, @client, 'commit', args)
    end

    # Returns details for HEAD.
    # @return [GitRef]
    def head
      GitRef.new(self, @client, 'head')
    end

    # Returns details of a ref.
    # @param name [string] Ref's name (can be a commit identifier, a tag name, a branch name, or a fully-qualified ref).
    # @return [GitRef]
    def ref(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      GitRef.new(self, @client, 'ref', args)
    end

    # Returns details of a tag.
    # @param name [string] Tag's name (e.g., "v0.3.9").
    # @return [GitRef]
    def tag(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      GitRef.new(self, @client, 'tag', args)
    end

    # tags that match any of the given glob patterns.
    # @param patterns [Array<string>, nil] Glob patterns (e.g., "refs/tags/v*").
    # @return [Array<string>]
    def tags(patterns: nil)
      args = {}
      args['patterns'] = patterns unless patterns.nil?
      n = GitRepository.new(self, @client, 'tags', args)
      @client.invoke(n)
    end

    # Header to authenticate the remote with.
    # @param header [Secret] Secret used to populate the Authorization HTTP header
    # @return [GitRepository]
    def with_auth_header(header:)
      assert_not_nil(:header, header)
      args = {
        'header' => header
      }
      GitRepository.new(self, @client, 'withAuthHeader', args)
    end

    # Token to authenticate the remote with.
    # @param token [Secret] Secret used to populate the password during basic HTTP Authorization
    # @return [GitRepository]
    def with_auth_token(token:)
      assert_not_nil(:token, token)
      args = {
        'token' => token
      }
      GitRepository.new(self, @client, 'withAuthToken', args)
    end

    def with(fun)
      fun.call(self)
    end
  end

  # Information about the host environment.
  class Host < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Accesses a directory on the host.
    # @param path [string] Location of the directory to access (e.g., ".").
    # @param exclude [Array<string>, nil] Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
    # @param include [Array<string>, nil] Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
    # @return [Directory]
    def directory(path:, exclude: nil, include: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['exclude'] = exclude unless exclude.nil?
      args['include'] = include unless include.nil?
      Directory.new(self, @client, 'directory', args)
    end

    # Accesses a file on the host.
    # @param path [string] Location of the file to retrieve (e.g., "README.md").
    # @return [File]
    def file(path:)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      File.new(self, @client, 'file', args)
    end

    # Creates a service that forwards traffic to a specified address via the host.
    # @param host [string, nil] Upstream host to forward traffic to.
    # @param ports [Array<PortForward>, nil] Ports to expose via the service, forwarding through the host network.
    #
    # If a port's frontend is unspecified or 0, it defaults to the same as the backend port.
    #
    # An empty set of ports is not valid; an error will be returned.
    # @return [Service]
    def service(host: nil, ports: nil)
      args = {}
      args['host'] = host unless host.nil?
      args['ports'] = ports unless ports.nil?
      Service.new(self, @client, 'service', args)
    end

    # Sets a secret given a user-defined name and the file path on the host, and returns the secret.
    #
    # The file is limited to a size of 512000 bytes.
    # @param name [string] The user defined name for this secret.
    # @param path [string] Location of the file to set as a secret.
    # @return [Secret]
    def set_secret_file(name:, path:)
      assert_not_nil(:name, name)
      assert_not_nil(:path, path)
      args = {
        'name' => name,
        'path' => path
      }
      Secret.new(self, @client, 'setSecretFile', args)
    end

    # Creates a tunnel that forwards traffic from the host to a service.
    # @param service [Service] Service to send traffic from the tunnel.
    # @param ports [Array<PortForward>, nil] Configure explicit port forwarding rules for the tunnel.
    #
    # If a port's frontend is unspecified or 0, a random port will be chosen by the host.
    #
    # If no ports are given, all of the service's ports are forwarded. If native is true, each port maps to the same port on the host. If native is false, each port maps to a random port chosen by the host.
    #
    # If ports are given and native is true, the ports are additive.
    # @param native [boolean, nil] Map each service port to the same port on the host, as if the service were running natively.
    #
    # Note: enabling may result in port conflicts.
    # @return [Service]
    def tunnel(service:, ports: nil, native: nil)
      assert_not_nil(:service, service)
      args = {
        'service' => service
      }
      args['ports'] = ports unless ports.nil?
      args['native'] = native unless native.nil?
      Service.new(self, @client, 'tunnel', args)
    end

    # Accesses a Unix socket on the host.
    # @param path [string] Location of the Unix socket (e.g., "/var/run/docker.sock").
    # @return [Socket]
    def unix_socket(path:)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      Socket.new(self, @client, 'unixSocket', args)
    end
  end

  # A graphql input type, which is essentially just a group of named args.
  # This is currently only used to represent pre-existing usage of graphql input types
  # in the core API. It is not used by user modules and shouldn't ever be as user
  # module accept input objects via their id rather than graphql input types.
  class InputTypeDef < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Static fields defined on this input object, if any.
    # @return [Array<FieldTypeDef>]
    def fields
      n = InputTypeDef.new(self, @client, 'fields')
      @client.invoke(n)
    end

    # The name of the input object.
    # @return [string]
    def name
      n = InputTypeDef.new(self, @client, 'name')
      @client.invoke(n)
    end
  end

  # A definition of a custom interface defined in a Module.
  class InterfaceTypeDef < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The doc string for the interface, if any.
    # @return [string]
    def description
      n = InterfaceTypeDef.new(self, @client, 'description')
      @client.invoke(n)
    end

    # Functions defined on this interface, if any.
    # @return [Array<Function>]
    def functions
      n = InterfaceTypeDef.new(self, @client, 'functions')
      @client.invoke(n)
    end

    # The name of the interface.
    # @return [string]
    def name
      n = InterfaceTypeDef.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The location of this interface declaration.
    # @return [SourceMap]
    def source_map
      SourceMap.new(self, @client, 'sourceMap')
    end

    # If this InterfaceTypeDef is associated with a Module, the name of the module. Unset otherwise.
    # @return [string]
    def source_module_name
      n = InterfaceTypeDef.new(self, @client, 'sourceModuleName')
      @client.invoke(n)
    end
  end

  # A simple key value object that represents a label.
  class Label < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The label name.
    # @return [string]
    def name
      n = Label.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The label value.
    # @return [string]
    def value
      n = Label.new(self, @client, 'value')
      @client.invoke(n)
    end
  end

  # A definition of a list type in a Module.
  class ListTypeDef < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The type of the elements in the list.
    # @return [TypeDef]
    def element_type_def
      TypeDef.new(self, @client, 'elementTypeDef')
    end
  end

  # Module source that that originates from a path locally relative to an arbitrary directory.
  class LocalModuleSource < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The directory containing everything needed to load load and use the module.
    # @return [Directory]
    def context_directory
      Directory.new(self, @client, 'contextDirectory')
    end

    # The relative path to the module root from the host directory
    # @return [string]
    def rel_host_path
      n = LocalModuleSource.new(self, @client, 'relHostPath')
      @client.invoke(n)
    end

    # The path to the root of the module source under the context directory. This directory contains its configuration file. It also contains its source code (possibly as a subdirectory).
    # @return [string]
    def root_subpath
      n = LocalModuleSource.new(self, @client, 'rootSubpath')
      @client.invoke(n)
    end
  end

  # A Dagger module.
  class Module_ < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Modules used by this module.
    # @return [Array<Module_>]
    def dependencies
      n = Module_.new(self, @client, 'dependencies')
      @client.invoke(n)
    end

    # The dependencies as configured by the module.
    # @return [Array<ModuleDependency>]
    def dependency_config
      n = Module_.new(self, @client, 'dependencyConfig')
      @client.invoke(n)
    end

    # The doc string of the module, if any
    # @return [string]
    def description
      n = Module_.new(self, @client, 'description')
      @client.invoke(n)
    end

    # Enumerations served by this module.
    # @return [Array<TypeDef>]
    def enums
      n = Module_.new(self, @client, 'enums')
      @client.invoke(n)
    end

    # The generated files and directories made on top of the module source's context directory.
    # @return [Directory]
    def generated_context_diff
      Directory.new(self, @client, 'generatedContextDiff')
    end

    # The module source's context plus any configuration and source files created by codegen.
    # @return [Directory]
    def generated_context_directory
      Directory.new(self, @client, 'generatedContextDirectory')
    end

    # Retrieves the module with the objects loaded via its SDK.
    # @return [Module_]
    def initialize_
      Module_.new(self, @client, 'initialize')
    end

    # Interfaces served by this module.
    # @return [Array<TypeDef>]
    def interfaces
      n = Module_.new(self, @client, 'interfaces')
      @client.invoke(n)
    end

    # The name of the module
    # @return [string]
    def name
      n = Module_.new(self, @client, 'name')
      @client.invoke(n)
    end

    # Objects served by this module.
    # @return [Array<TypeDef>]
    def objects
      n = Module_.new(self, @client, 'objects')
      @client.invoke(n)
    end

    # The container that runs the module's entrypoint. It will fail to execute if the module doesn't compile.
    # @return [Container]
    def runtime
      Container.new(self, @client, 'runtime')
    end

    # The SDK used by this module. Either a name of a builtin SDK or a module source ref string pointing to the SDK's implementation.
    # @return [string]
    def sdk
      n = Module_.new(self, @client, 'sdk')
      @client.invoke(n)
    end

    # Serve a module's API in the current session.
    #
    # Note: this can only be called once per session. In the future, it could return a stream or service to remove the side effect.
    # @return [Void]
    def serve
      n = Module_.new(self, @client, 'serve')
      @client.invoke(n)
    end

    # The source for the module.
    # @return [ModuleSource]
    def source
      ModuleSource.new(self, @client, 'source')
    end

    # Retrieves the module with the given description
    # @param description [string] The description to set
    # @return [Module_]
    def with_description(description:)
      assert_not_nil(:description, description)
      args = {
        'description' => description
      }
      Module_.new(self, @client, 'withDescription', args)
    end

    # This module plus the given Enum type and associated values
    # @return [Module_]
    def with_enum(enum:)
      assert_not_nil(:enum, enum)
      args = {
        'enum' => enum
      }
      Module_.new(self, @client, 'withEnum', args)
    end

    # This module plus the given Interface type and associated functions
    # @return [Module_]
    def with_interface(iface:)
      assert_not_nil(:iface, iface)
      args = {
        'iface' => iface
      }
      Module_.new(self, @client, 'withInterface', args)
    end

    # This module plus the given Object type and associated functions.
    # @return [Module_]
    def with_object(object:)
      assert_not_nil(:object, object)
      args = {
        'object' => object
      }
      Module_.new(self, @client, 'withObject', args)
    end

    # Retrieves the module with basic configuration loaded if present.
    # @param source [ModuleSource] The module source to initialize from.
    # @param engine_version [string, nil] The engine version to upgrade to.
    # @return [Module_]
    def with_source(source:, engine_version: nil)
      assert_not_nil(:source, source)
      args = {
        'source' => source
      }
      args['engineVersion'] = engine_version unless engine_version.nil?
      Module_.new(self, @client, 'withSource', args)
    end

    def with(fun)
      fun.call(self)
    end
  end

  # The configuration of dependency of a module.
  class ModuleDependency < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The name of the dependency module.
    # @return [string]
    def name
      n = ModuleDependency.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The source for the dependency module.
    # @return [ModuleSource]
    def source
      ModuleSource.new(self, @client, 'source')
    end
  end

  # The source needed to load and run a module, along with any metadata about the source such as versions/urls/etc.
  class ModuleSource < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # If the source is a of kind git, the git source representation of it.
    # @return [GitModuleSource]
    def as_git_source
      GitModuleSource.new(self, @client, 'asGitSource')
    end

    # If the source is of kind local, the local source representation of it.
    # @return [LocalModuleSource]
    def as_local_source
      LocalModuleSource.new(self, @client, 'asLocalSource')
    end

    # Load the source as a module. If this is a local source, the parent directory must have been provided during module source creation
    # @param engine_version [string, nil] The engine version to upgrade to.
    # @return [Module_]
    def as_module(engine_version: nil)
      args = {}
      args['engineVersion'] = engine_version unless engine_version.nil?
      Module_.new(self, @client, 'asModule', args)
    end

    # A human readable ref string representation of this module source.
    # @return [string]
    def as_string
      n = ModuleSource.new(self, @client, 'asString')
      @client.invoke(n)
    end

    # Returns whether the module source has a configuration file.
    # @return [boolean]
    def config_exists
      n = ModuleSource.new(self, @client, 'configExists')
      @client.invoke(n)
    end

    # The directory containing everything needed to load load and use the module.
    # @return [Directory]
    def context_directory
      Directory.new(self, @client, 'contextDirectory')
    end

    # The effective module source dependencies from the configuration, and calls to withDependencies and withoutDependencies.
    # @return [Array<ModuleDependency>]
    def dependencies
      n = ModuleSource.new(self, @client, 'dependencies')
      @client.invoke(n)
    end

    # Return the module source's content digest. The format of the digest is not guaranteed to be stable between releases of Dagger. It is guaranteed to be stable between invocations of the same Dagger engine.
    # @return [string]
    def digest
      n = ModuleSource.new(self, @client, 'digest')
      @client.invoke(n)
    end

    # The directory containing the module configuration and source code (source code may be in a subdir).
    # @param path [string] The path from the source directory to select.
    # @return [Directory]
    def directory(path:)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      Directory.new(self, @client, 'directory', args)
    end

    # The kind of source (e.g. local, git, etc.)
    # @return [ModuleSourceKind]
    def kind
      n = ModuleSource.new(self, @client, 'kind')
      @client.invoke(n)
    end

    # If set, the name of the module this source references, including any overrides at runtime by callers.
    # @return [string]
    def module_name
      n = ModuleSource.new(self, @client, 'moduleName')
      @client.invoke(n)
    end

    # The original name of the module this source references, as defined in the module configuration.
    # @return [string]
    def module_original_name
      n = ModuleSource.new(self, @client, 'moduleOriginalName')
      @client.invoke(n)
    end

    # The path to the module source's context directory on the caller's filesystem. Only valid for local sources.
    # @return [string]
    def resolve_context_path_from_caller
      n = ModuleSource.new(self, @client, 'resolveContextPathFromCaller')
      @client.invoke(n)
    end

    # Resolve the provided module source arg as a dependency relative to this module source.
    # @param dep [ModuleSource] The dependency module source to resolve.
    # @return [ModuleSource]
    def resolve_dependency(dep:)
      assert_not_nil(:dep, dep)
      args = {
        'dep' => dep
      }
      ModuleSource.new(self, @client, 'resolveDependency', args)
    end

    # Load a directory from the caller optionally with a given view applied.
    # @param path [string] The path on the caller's filesystem to load.
    # @param view_name [string, nil] If set, the name of the view to apply to the path.
    # @param ignore [Array<string>, nil] Patterns to ignore when loading the directory.
    # @return [Directory]
    def resolve_directory_from_caller(path:, view_name: nil, ignore: nil)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      args['viewName'] = view_name unless view_name.nil?
      args['ignore'] = ignore unless ignore.nil?
      Directory.new(self, @client, 'resolveDirectoryFromCaller', args)
    end

    # Load the source from its path on the caller's filesystem, including only needed+configured files and directories. Only valid for local sources.
    # @return [ModuleSource]
    def resolve_from_caller
      ModuleSource.new(self, @client, 'resolveFromCaller')
    end

    # The path relative to context of the root of the module source, which contains dagger.json. It also contains the module implementation source code, but that may or may not being a subdir of this root.
    # @return [string]
    def source_root_subpath
      n = ModuleSource.new(self, @client, 'sourceRootSubpath')
      @client.invoke(n)
    end

    # The path relative to context of the module implementation source code.
    # @return [string]
    def source_subpath
      n = ModuleSource.new(self, @client, 'sourceSubpath')
      @client.invoke(n)
    end

    # Retrieve a named view defined for this module source.
    # @param name [string] The name of the view to retrieve.
    # @return [ModuleSourceView]
    def view(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      ModuleSourceView.new(self, @client, 'view', args)
    end

    # The named views defined for this module source, which are sets of directory filters that can be applied to directory arguments provided to functions.
    # @return [Array<ModuleSourceView>]
    def views
      n = ModuleSource.new(self, @client, 'views')
      @client.invoke(n)
    end

    # Update the module source with a new context directory. Only valid for local sources.
    # @param dir [Directory] The directory to set as the context directory.
    # @return [ModuleSource]
    def with_context_directory(dir:)
      assert_not_nil(:dir, dir)
      args = {
        'dir' => dir
      }
      ModuleSource.new(self, @client, 'withContextDirectory', args)
    end

    # Append the provided dependencies to the module source's dependency list.
    # @param dependencies [Array<ModuleDependency>] The dependencies to append.
    # @return [ModuleSource]
    def with_dependencies(dependencies:)
      assert_not_nil(:dependencies, dependencies)
      args = {
        'dependencies' => dependencies
      }
      ModuleSource.new(self, @client, 'withDependencies', args)
    end

    # Sets module init arguments
    # @param merge [boolean, nil] Merge module dependencies into the current project's
    # @return [ModuleSource]
    def with_init(merge: nil)
      args = {}
      args['merge'] = merge unless merge.nil?
      ModuleSource.new(self, @client, 'withInit', args)
    end

    # Update the module source with a new name.
    # @param name [string] The name to set.
    # @return [ModuleSource]
    def with_name(name:)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      ModuleSource.new(self, @client, 'withName', args)
    end

    # Update the module source with a new SDK.
    # @param sdk [string] The SDK to set.
    # @return [ModuleSource]
    def with_sdk(sdk:)
      assert_not_nil(:sdk, sdk)
      args = {
        'sdk' => sdk
      }
      ModuleSource.new(self, @client, 'withSDK', args)
    end

    # Update the module source with a new source subpath.
    # @param path [string] The path to set as the source subpath.
    # @return [ModuleSource]
    def with_source_subpath(path:)
      assert_not_nil(:path, path)
      args = {
        'path' => path
      }
      ModuleSource.new(self, @client, 'withSourceSubpath', args)
    end

    # Update the module source with a new named view.
    # @param name [string] The name of the view to set.
    # @param patterns [Array<string>] The patterns to set as the view filters.
    # @return [ModuleSource]
    def with_view(name:, patterns:)
      assert_not_nil(:name, name)
      assert_not_nil(:patterns, patterns)
      args = {
        'name' => name,
        'patterns' => patterns
      }
      ModuleSource.new(self, @client, 'withView', args)
    end

    # Remove the provided dependencies from the module source's dependency list.
    # @param dependencies [Array<string>] The dependencies to remove.
    # @return [ModuleSource]
    def without_dependencies(dependencies:)
      assert_not_nil(:dependencies, dependencies)
      args = {
        'dependencies' => dependencies
      }
      ModuleSource.new(self, @client, 'withoutDependencies', args)
    end

    def with(fun)
      fun.call(self)
    end
  end

  # A named set of path filters that can be applied to directory arguments provided to functions.
  class ModuleSourceView < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The name of the view
    # @return [string]
    def name
      n = ModuleSourceView.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The patterns of the view used to filter paths
    # @return [Array<string>]
    def patterns
      n = ModuleSourceView.new(self, @client, 'patterns')
      @client.invoke(n)
    end
  end

  # A definition of a custom object defined in a Module.
  class ObjectTypeDef < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The function used to construct new instances of this object, if any
    # @return [Function]
    def constructor
      Function.new(self, @client, 'constructor')
    end

    # The doc string for the object, if any.
    # @return [string]
    def description
      n = ObjectTypeDef.new(self, @client, 'description')
      @client.invoke(n)
    end

    # Static fields defined on this object, if any.
    # @return [Array<FieldTypeDef>]
    def fields
      n = ObjectTypeDef.new(self, @client, 'fields')
      @client.invoke(n)
    end

    # Functions defined on this object, if any.
    # @return [Array<Function>]
    def functions
      n = ObjectTypeDef.new(self, @client, 'functions')
      @client.invoke(n)
    end

    # The name of the object.
    # @return [string]
    def name
      n = ObjectTypeDef.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The location of this object declaration.
    # @return [SourceMap]
    def source_map
      SourceMap.new(self, @client, 'sourceMap')
    end

    # If this ObjectTypeDef is associated with a Module, the name of the module. Unset otherwise.
    # @return [string]
    def source_module_name
      n = ObjectTypeDef.new(self, @client, 'sourceModuleName')
      @client.invoke(n)
    end
  end

  # A port exposed by a container.
  class Port < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The port description.
    # @return [string]
    def description
      n = Port.new(self, @client, 'description')
      @client.invoke(n)
    end

    # Skip the health check when run as a service.
    # @return [boolean]
    def experimental_skip_healthcheck
      n = Port.new(self, @client, 'experimentalSkipHealthcheck')
      @client.invoke(n)
    end

    # The port number.
    # @return [number]
    def port
      n = Port.new(self, @client, 'port')
      @client.invoke(n)
    end

    # The transport layer protocol.
    # @return [NetworkProtocol]
    def protocol
      n = Port.new(self, @client, 'protocol')
      @client.invoke(n)
    end
  end

  # The root of the DAG.
  class Client < Node
    attr_reader :client

    # Retrieves a content-addressed blob.
    # @param digest [string] Digest of the blob
    # @param size [number] Size of the blob
    # @param media_type [string] Media type of the blob
    # @param uncompressed [string] Digest of the uncompressed blob
    # @return [Directory]
    def blob(digest:, size:, media_type:, uncompressed:)
      assert_not_nil(:digest, digest)
      assert_not_nil(:size, size)
      assert_not_nil(:media_type, media_type)
      assert_not_nil(:uncompressed, uncompressed)
      args = {
        'digest' => digest,
        'size' => size,
        'mediaType' => media_type,
        'uncompressed' => uncompressed
      }
      Directory.new(self, @client, 'blob', args)
    end

    # Retrieves a container builtin to the engine.
    # @param digest [string] Digest of the image manifest
    # @return [Container]
    def builtin_container(digest:)
      assert_not_nil(:digest, digest)
      args = {
        'digest' => digest
      }
      Container.new(self, @client, 'builtinContainer', args)
    end

    # Constructs a cache volume for a given cache key.
    # @param key [string] A string identifier to target this cache volume (e.g., "modules-cache").
    # @return [CacheVolume]
    def cache_volume(key:)
      assert_not_nil(:key, key)
      args = {
        'key' => key
      }
      CacheVolume.new(self, @client, 'cacheVolume', args)
    end

    # Creates a scratch container.
    #
    # Optional platform argument initializes new containers to execute and publish as that platform. Platform defaults to that of the builder's host.
    # @param platform [Platform, nil] Platform to initialize the container with.
    # @return [Container]
    def container(platform: nil)
      args = {}
      args['platform'] = platform unless platform.nil?
      Container.new(self, @client, 'container', args)
    end

    # The FunctionCall context that the SDK caller is currently executing in.
    #
    # If the caller is not currently executing in a function, this will return an error.
    # @return [FunctionCall]
    def current_function_call
      FunctionCall.new(self, @client, 'currentFunctionCall')
    end

    # The module currently being served in the session, if any.
    # @return [CurrentModule]
    def current_module
      CurrentModule.new(self, @client, 'currentModule')
    end

    # The TypeDef representations of the objects currently being served in the session.
    # @return [Array<TypeDef>]
    def current_type_defs
      n = Client.new(self, @client, 'currentTypeDefs')
      @client.invoke(n)
    end

    # The default platform of the engine.
    # @return [Platform]
    def default_platform
      n = Client.new(self, @client, 'defaultPlatform')
      @client.invoke(n)
    end

    # Creates an empty directory.
    # @return [Directory]
    def directory
      Directory.new(self, @client, 'directory')
    end

    # The Dagger engine container configuration and state
    # @return [Engine]
    def engine
      Engine.new(self, @client, 'engine')
    end

    # Create a new error.
    # @param message [string] A brief description of the error.
    # @return [Error]
    def error(message:)
      assert_not_nil(:message, message)
      args = {
        'message' => message
      }
      Error.new(self, @client, 'error', args)
    end

    # Creates a function.
    # @param name [string] Name of the function, in its original format from the implementation language.
    # @param return_type [TypeDef] Return type of the function.
    # @return [Function]
    def function(name:, return_type:)
      assert_not_nil(:name, name)
      assert_not_nil(:return_type, return_type)
      args = {
        'name' => name,
        'returnType' => return_type
      }
      Function.new(self, @client, 'function', args)
    end

    # Create a code generation result, given a directory containing the generated code.
    # @return [GeneratedCode]
    def generated_code(code:)
      assert_not_nil(:code, code)
      args = {
        'code' => code
      }
      GeneratedCode.new(self, @client, 'generatedCode', args)
    end

    # Queries a Git repository.
    # @param url [string] URL of the git repository.
    #
    # Can be formatted as `https://{host}/{owner}/{repo}`, `git@{host}:{owner}/{repo}`.
    #
    # Suffix ".git" is optional.
    # @param keep_git_dir [boolean, nil] DEPRECATED: Set to true to keep .git directory.
    # @param experimental_service_host [Service, nil] A service which must be started before the repo is fetched.
    # @param ssh_known_hosts [string, nil] Set SSH known hosts
    # @param ssh_auth_socket [Socket, nil] Set SSH auth socket
    # @return [GitRepository]
    def git(url:, keep_git_dir: nil, experimental_service_host: nil, ssh_known_hosts: nil, ssh_auth_socket: nil)
      assert_not_nil(:url, url)
      args = {
        'url' => url
      }
      args['keepGitDir'] = keep_git_dir unless keep_git_dir.nil?
      args['experimentalServiceHost'] = experimental_service_host unless experimental_service_host.nil?
      args['sshKnownHosts'] = ssh_known_hosts unless ssh_known_hosts.nil?
      args['sshAuthSocket'] = ssh_auth_socket unless ssh_auth_socket.nil?
      GitRepository.new(self, @client, 'git', args)
    end

    # Queries the host environment.
    # @return [Host]
    def host
      Host.new(self, @client, 'host')
    end

    # Returns a file containing an http remote url content.
    # @param url [string] HTTP url to get the content from (e.g., "https://docs.dagger.io").
    # @param experimental_service_host [Service, nil] A service which must be started before the URL is fetched.
    # @return [File]
    def http(url:, experimental_service_host: nil)
      assert_not_nil(:url, url)
      args = {
        'url' => url
      }
      args['experimentalServiceHost'] = experimental_service_host unless experimental_service_host.nil?
      File.new(self, @client, 'http', args)
    end

    # Load a CacheVolume from its ID.
    # @return [CacheVolume]
    def load_cache_volume_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      CacheVolume.new(self, @client, 'loadCacheVolumeFromID', args)
    end

    # Load a Container from its ID.
    # @return [Container]
    def load_container_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Container.new(self, @client, 'loadContainerFromID', args)
    end

    # Load a CurrentModule from its ID.
    # @return [CurrentModule]
    def load_current_module_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      CurrentModule.new(self, @client, 'loadCurrentModuleFromID', args)
    end

    # Load a Directory from its ID.
    # @return [Directory]
    def load_directory_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Directory.new(self, @client, 'loadDirectoryFromID', args)
    end

    # Load a EngineCacheEntry from its ID.
    # @return [EngineCacheEntry]
    def load_engine_cache_entry_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      EngineCacheEntry.new(self, @client, 'loadEngineCacheEntryFromID', args)
    end

    # Load a EngineCacheEntrySet from its ID.
    # @return [EngineCacheEntrySet]
    def load_engine_cache_entry_set_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      EngineCacheEntrySet.new(self, @client, 'loadEngineCacheEntrySetFromID', args)
    end

    # Load a EngineCache from its ID.
    # @return [EngineCache]
    def load_engine_cache_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      EngineCache.new(self, @client, 'loadEngineCacheFromID', args)
    end

    # Load a Engine from its ID.
    # @return [Engine]
    def load_engine_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Engine.new(self, @client, 'loadEngineFromID', args)
    end

    # Load a EnumTypeDef from its ID.
    # @return [EnumTypeDef]
    def load_enum_type_def_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      EnumTypeDef.new(self, @client, 'loadEnumTypeDefFromID', args)
    end

    # Load a EnumValueTypeDef from its ID.
    # @return [EnumValueTypeDef]
    def load_enum_value_type_def_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      EnumValueTypeDef.new(self, @client, 'loadEnumValueTypeDefFromID', args)
    end

    # Load a EnvVariable from its ID.
    # @return [EnvVariable]
    def load_env_variable_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      EnvVariable.new(self, @client, 'loadEnvVariableFromID', args)
    end

    # Load a Error from its ID.
    # @return [Error]
    def load_error_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Error.new(self, @client, 'loadErrorFromID', args)
    end

    # Load a FieldTypeDef from its ID.
    # @return [FieldTypeDef]
    def load_field_type_def_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      FieldTypeDef.new(self, @client, 'loadFieldTypeDefFromID', args)
    end

    # Load a File from its ID.
    # @return [File]
    def load_file_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      File.new(self, @client, 'loadFileFromID', args)
    end

    # Load a FunctionArg from its ID.
    # @return [FunctionArg]
    def load_function_arg_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      FunctionArg.new(self, @client, 'loadFunctionArgFromID', args)
    end

    # Load a FunctionCallArgValue from its ID.
    # @return [FunctionCallArgValue]
    def load_function_call_arg_value_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      FunctionCallArgValue.new(self, @client, 'loadFunctionCallArgValueFromID', args)
    end

    # Load a FunctionCall from its ID.
    # @return [FunctionCall]
    def load_function_call_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      FunctionCall.new(self, @client, 'loadFunctionCallFromID', args)
    end

    # Load a Function from its ID.
    # @return [Function]
    def load_function_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Function.new(self, @client, 'loadFunctionFromID', args)
    end

    # Load a GeneratedCode from its ID.
    # @return [GeneratedCode]
    def load_generated_code_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      GeneratedCode.new(self, @client, 'loadGeneratedCodeFromID', args)
    end

    # Load a GitModuleSource from its ID.
    # @return [GitModuleSource]
    def load_git_module_source_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      GitModuleSource.new(self, @client, 'loadGitModuleSourceFromID', args)
    end

    # Load a GitRef from its ID.
    # @return [GitRef]
    def load_git_ref_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      GitRef.new(self, @client, 'loadGitRefFromID', args)
    end

    # Load a GitRepository from its ID.
    # @return [GitRepository]
    def load_git_repository_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      GitRepository.new(self, @client, 'loadGitRepositoryFromID', args)
    end

    # Load a Host from its ID.
    # @return [Host]
    def load_host_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Host.new(self, @client, 'loadHostFromID', args)
    end

    # Load a InputTypeDef from its ID.
    # @return [InputTypeDef]
    def load_input_type_def_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      InputTypeDef.new(self, @client, 'loadInputTypeDefFromID', args)
    end

    # Load a InterfaceTypeDef from its ID.
    # @return [InterfaceTypeDef]
    def load_interface_type_def_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      InterfaceTypeDef.new(self, @client, 'loadInterfaceTypeDefFromID', args)
    end

    # Load a Label from its ID.
    # @return [Label]
    def load_label_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Label.new(self, @client, 'loadLabelFromID', args)
    end

    # Load a ListTypeDef from its ID.
    # @return [ListTypeDef]
    def load_list_type_def_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      ListTypeDef.new(self, @client, 'loadListTypeDefFromID', args)
    end

    # Load a LocalModuleSource from its ID.
    # @return [LocalModuleSource]
    def load_local_module_source_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      LocalModuleSource.new(self, @client, 'loadLocalModuleSourceFromID', args)
    end

    # Load a ModuleDependency from its ID.
    # @return [ModuleDependency]
    def load_module_dependency_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      ModuleDependency.new(self, @client, 'loadModuleDependencyFromID', args)
    end

    # Load a Module from its ID.
    # @return [Module_]
    def load_module_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Module_.new(self, @client, 'loadModuleFromID', args)
    end

    # Load a ModuleSource from its ID.
    # @return [ModuleSource]
    def load_module_source_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      ModuleSource.new(self, @client, 'loadModuleSourceFromID', args)
    end

    # Load a ModuleSourceView from its ID.
    # @return [ModuleSourceView]
    def load_module_source_view_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      ModuleSourceView.new(self, @client, 'loadModuleSourceViewFromID', args)
    end

    # Load a ObjectTypeDef from its ID.
    # @return [ObjectTypeDef]
    def load_object_type_def_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      ObjectTypeDef.new(self, @client, 'loadObjectTypeDefFromID', args)
    end

    # Load a Port from its ID.
    # @return [Port]
    def load_port_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Port.new(self, @client, 'loadPortFromID', args)
    end

    # Load a ScalarTypeDef from its ID.
    # @return [ScalarTypeDef]
    def load_scalar_type_def_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      ScalarTypeDef.new(self, @client, 'loadScalarTypeDefFromID', args)
    end

    # Load a Secret from its ID.
    # @return [Secret]
    def load_secret_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Secret.new(self, @client, 'loadSecretFromID', args)
    end

    # Load a Service from its ID.
    # @return [Service]
    def load_service_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Service.new(self, @client, 'loadServiceFromID', args)
    end

    # Load a Socket from its ID.
    # @return [Socket]
    def load_socket_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Socket.new(self, @client, 'loadSocketFromID', args)
    end

    # Load a SourceMap from its ID.
    # @return [SourceMap]
    def load_source_map_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      SourceMap.new(self, @client, 'loadSourceMapFromID', args)
    end

    # Load a Terminal from its ID.
    # @return [Terminal]
    def load_terminal_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      Terminal.new(self, @client, 'loadTerminalFromID', args)
    end

    # Load a TypeDef from its ID.
    # @return [TypeDef]
    def load_type_def_from_id(id:)
      assert_not_nil(:id, id)
      args = {
        'id' => id
      }
      TypeDef.new(self, @client, 'loadTypeDefFromID', args)
    end

    # Create a new module.
    # @return [Module_]
    def module_
      Module_.new(self, @client, 'module')
    end

    # Create a new module dependency configuration from a module source and name
    # @param source [ModuleSource] The source of the dependency
    # @param name [string, nil] If set, the name to use for the dependency. Otherwise, once installed to a parent module, the name of the dependency module will be used by default.
    # @return [ModuleDependency]
    def module_dependency(source:, name: nil)
      assert_not_nil(:source, source)
      args = {
        'source' => source
      }
      args['name'] = name unless name.nil?
      ModuleDependency.new(self, @client, 'moduleDependency', args)
    end

    # Create a new module source instance from a source ref string.
    # @param ref_string [string] The string ref representation of the module source
    # @param ref_pin [string, nil] The pinned version of the module source
    # @param stable [boolean, nil] If true, enforce that the source is a stable version for source kinds that support versioning.
    # @param rel_host_path [string, nil] The relative path to the module root from the host directory
    # @return [ModuleSource]
    def module_source(ref_string:, ref_pin: nil, stable: nil, rel_host_path: nil)
      assert_not_nil(:ref_string, ref_string)
      args = {
        'refString' => ref_string
      }
      args['refPin'] = ref_pin unless ref_pin.nil?
      args['stable'] = stable unless stable.nil?
      args['relHostPath'] = rel_host_path unless rel_host_path.nil?
      ModuleSource.new(self, @client, 'moduleSource', args)
    end

    # Reference a secret by name.
    # @return [Secret]
    def secret(name:, accessor: nil)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      args['accessor'] = accessor unless accessor.nil?
      Secret.new(self, @client, 'secret', args)
    end

    # Sets a secret given a user defined name to its plaintext and returns the secret.
    #
    # The plaintext value is limited to a size of 128000 bytes.
    # @param name [string] The user defined name for this secret
    # @param plaintext [string] The plaintext of the secret
    # @return [Secret]
    def set_secret(name:, plaintext:)
      assert_not_nil(:name, name)
      assert_not_nil(:plaintext, plaintext)
      args = {
        'name' => name,
        'plaintext' => plaintext
      }
      Secret.new(self, @client, 'setSecret', args)
    end

    # Creates source map metadata.
    # @param filename [string] The filename from the module source.
    # @param line [number] The line number within the filename.
    # @param column [number] The column number within the line.
    # @return [SourceMap]
    def source_map(filename:, line:, column:)
      assert_not_nil(:filename, filename)
      assert_not_nil(:line, line)
      assert_not_nil(:column, column)
      args = {
        'filename' => filename,
        'line' => line,
        'column' => column
      }
      SourceMap.new(self, @client, 'sourceMap', args)
    end

    # Create a new TypeDef.
    # @return [TypeDef]
    def type_def
      TypeDef.new(self, @client, 'typeDef')
    end

    # Get the current Dagger Engine version.
    # @return [string]
    def version
      n = Client.new(self, @client, 'version')
      @client.invoke(n)
    end
  end

  # A definition of a custom scalar defined in a Module.
  class ScalarTypeDef < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # A doc string for the scalar, if any.
    # @return [string]
    def description
      n = ScalarTypeDef.new(self, @client, 'description')
      @client.invoke(n)
    end

    # The name of the scalar.
    # @return [string]
    def name
      n = ScalarTypeDef.new(self, @client, 'name')
      @client.invoke(n)
    end

    # If this ScalarTypeDef is associated with a Module, the name of the module. Unset otherwise.
    # @return [string]
    def source_module_name
      n = ScalarTypeDef.new(self, @client, 'sourceModuleName')
      @client.invoke(n)
    end
  end

  # A reference to a secret value, which can be handled more safely than the value itself.
  class Secret < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The name of this secret.
    # @return [string]
    def name
      n = Secret.new(self, @client, 'name')
      @client.invoke(n)
    end

    # The value of this secret.
    # @return [string]
    def plaintext
      n = Secret.new(self, @client, 'plaintext')
      @client.invoke(n)
    end
  end

  # A content-addressed service providing TCP connectivity.
  class Service < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Retrieves an endpoint that clients can use to reach this container.
    #
    # If no port is specified, the first exposed port is used. If none exist an error is returned.
    #
    # If a scheme is specified, a URL is returned. Otherwise, a host:port pair is returned.
    # @param port [number, nil] The exposed port number for the endpoint
    # @param scheme [string, nil] Return a URL with the given scheme, eg. http for http://
    # @return [string]
    def endpoint(port: nil, scheme: nil)
      args = {}
      args['port'] = port unless port.nil?
      args['scheme'] = scheme unless scheme.nil?
      n = Service.new(self, @client, 'endpoint', args)
      @client.invoke(n)
    end

    # Retrieves a hostname which can be used by clients to reach this container.
    # @return [string]
    def hostname
      n = Service.new(self, @client, 'hostname')
      @client.invoke(n)
    end

    # Retrieves the list of ports provided by the service.
    # @return [Array<Port>]
    def ports
      n = Service.new(self, @client, 'ports')
      @client.invoke(n)
    end

    # Start the service and wait for its health checks to succeed.
    #
    # Services bound to a Container do not need to be manually started.
    # @return [ServiceID]
    def start
      n = Service.new(self, @client, 'start')
      @client.invoke(n)
    end

    # Stop the service.
    # @param kill [boolean, nil] Immediately kill the service without waiting for a graceful exit
    # @return [ServiceID]
    def stop(kill: nil)
      args = {}
      args['kill'] = kill unless kill.nil?
      n = Service.new(self, @client, 'stop', args)
      @client.invoke(n)
    end

    # Creates a tunnel that forwards traffic from the caller's network to this service.
    # @param ports [Array<PortForward>, nil] List of frontend/backend port mappings to forward.
    #
    # Frontend is the port accepting traffic on the host, backend is the service port.
    # @param random [boolean, nil] Bind each tunnel port to a random port on the host.
    # @return [Void]
    def up(ports: nil, random: nil)
      args = {}
      args['ports'] = ports unless ports.nil?
      args['random'] = random unless random.nil?
      n = Service.new(self, @client, 'up', args)
      @client.invoke(n)
    end

    # Configures a hostname which can be used by clients within the session to reach this container.
    # @param hostname [string] The hostname to use.
    # @return [Service]
    def with_hostname(hostname:)
      assert_not_nil(:hostname, hostname)
      args = {
        'hostname' => hostname
      }
      Service.new(self, @client, 'withHostname', args)
    end

    def with(fun)
      fun.call(self)
    end
  end

  # A Unix or TCP/IP socket that can be mounted into a container.
  class Socket < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end
  end

  # Source location information.
  class SourceMap < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # The column number within the line.
    # @return [number]
    def column
      n = SourceMap.new(self, @client, 'column')
      @client.invoke(n)
    end

    # The filename from the module source.
    # @return [string]
    def filename
      n = SourceMap.new(self, @client, 'filename')
      @client.invoke(n)
    end

    # The line number within the filename.
    # @return [number]
    def line
      n = SourceMap.new(self, @client, 'line')
      @client.invoke(n)
    end

    # The module dependency this was declared in.
    # @return [string]
    def module_
      n = SourceMap.new(self, @client, 'module')
      @client.invoke(n)
    end
  end

  # An interactive terminal that clients can connect to.
  class Terminal < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # Forces evaluation of the pipeline in the engine.
    #
    # It doesn't run the default command if no exec has been set.
    # @return [TerminalID]
    def sync
      n = Terminal.new(self, @client, 'sync')
      @client.invoke(n)
    end
  end

  # A definition of a parameter or return type in a Module.
  class TypeDef < Node
    # Return the Node ID for the GraphQL entity
    # @return [String]
    def id
      @client.invoke(Node.new(self, @client, 'id'))
    end

    # If kind is ENUM, the enum-specific type definition. If kind is not ENUM, this will be null.
    # @return [EnumTypeDef]
    def as_enum
      EnumTypeDef.new(self, @client, 'asEnum')
    end

    # If kind is INPUT, the input-specific type definition. If kind is not INPUT, this will be null.
    # @return [InputTypeDef]
    def as_input
      InputTypeDef.new(self, @client, 'asInput')
    end

    # If kind is INTERFACE, the interface-specific type definition. If kind is not INTERFACE, this will be null.
    # @return [InterfaceTypeDef]
    def as_interface
      InterfaceTypeDef.new(self, @client, 'asInterface')
    end

    # If kind is LIST, the list-specific type definition. If kind is not LIST, this will be null.
    # @return [ListTypeDef]
    def as_list
      ListTypeDef.new(self, @client, 'asList')
    end

    # If kind is OBJECT, the object-specific type definition. If kind is not OBJECT, this will be null.
    # @return [ObjectTypeDef]
    def as_object
      ObjectTypeDef.new(self, @client, 'asObject')
    end

    # If kind is SCALAR, the scalar-specific type definition. If kind is not SCALAR, this will be null.
    # @return [ScalarTypeDef]
    def as_scalar
      ScalarTypeDef.new(self, @client, 'asScalar')
    end

    # The kind of type this is (e.g. primitive, list, object).
    # @return [TypeDefKind]
    def kind
      n = TypeDef.new(self, @client, 'kind')
      @client.invoke(n)
    end

    # Whether this type can be set to null. Defaults to false.
    # @return [boolean]
    def optional
      n = TypeDef.new(self, @client, 'optional')
      @client.invoke(n)
    end

    # Adds a function for constructing a new instance of an Object TypeDef, failing if the type is not an object.
    # @return [TypeDef]
    def with_constructor(function:)
      assert_not_nil(:function, function)
      args = {
        'function' => function
      }
      TypeDef.new(self, @client, 'withConstructor', args)
    end

    # Returns a TypeDef of kind Enum with the provided name.
    #
    # Note that an enum's values may be omitted if the intent is only to refer to an enum. This is how functions are able to return their own, or any other circular reference.
    # @param name [string] The name of the enum
    # @param description [string, nil] A doc string for the enum, if any
    # @param source_map [SourceMap, nil] The source map for the enum definition.
    # @return [TypeDef]
    def with_enum(name:, description: nil, source_map: nil)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      args['description'] = description unless description.nil?
      args['sourceMap'] = source_map unless source_map.nil?
      TypeDef.new(self, @client, 'withEnum', args)
    end

    # Adds a static value for an Enum TypeDef, failing if the type is not an enum.
    # @param value [string] The name of the value in the enum
    # @param description [string, nil] A doc string for the value, if any
    # @param source_map [SourceMap, nil] The source map for the enum value definition.
    # @return [TypeDef]
    def with_enum_value(value:, description: nil, source_map: nil)
      assert_not_nil(:value, value)
      args = {
        'value' => value
      }
      args['description'] = description unless description.nil?
      args['sourceMap'] = source_map unless source_map.nil?
      TypeDef.new(self, @client, 'withEnumValue', args)
    end

    # Adds a static field for an Object TypeDef, failing if the type is not an object.
    # @param name [string] The name of the field in the object
    # @param type_def [TypeDef] The type of the field
    # @param description [string, nil] A doc string for the field, if any
    # @param source_map [SourceMap, nil] The source map for the field definition.
    # @return [TypeDef]
    def with_field(name:, type_def:, description: nil, source_map: nil)
      assert_not_nil(:name, name)
      assert_not_nil(:type_def, type_def)
      args = {
        'name' => name,
        'typeDef' => type_def
      }
      args['description'] = description unless description.nil?
      args['sourceMap'] = source_map unless source_map.nil?
      TypeDef.new(self, @client, 'withField', args)
    end

    # Adds a function for an Object or Interface TypeDef, failing if the type is not one of those kinds.
    # @return [TypeDef]
    def with_function(function:)
      assert_not_nil(:function, function)
      args = {
        'function' => function
      }
      TypeDef.new(self, @client, 'withFunction', args)
    end

    # Returns a TypeDef of kind Interface with the provided name.
    # @return [TypeDef]
    def with_interface(name:, description: nil, source_map: nil)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      args['description'] = description unless description.nil?
      args['sourceMap'] = source_map unless source_map.nil?
      TypeDef.new(self, @client, 'withInterface', args)
    end

    # Sets the kind of the type.
    # @return [TypeDef]
    def with_kind(kind:)
      assert_not_nil(:kind, kind)
      args = {
        'kind' => kind
      }
      TypeDef.new(self, @client, 'withKind', args)
    end

    # Returns a TypeDef of kind List with the provided type for its elements.
    # @return [TypeDef]
    def with_list_of(element_type:)
      assert_not_nil(:element_type, element_type)
      args = {
        'elementType' => element_type
      }
      TypeDef.new(self, @client, 'withListOf', args)
    end

    # Returns a TypeDef of kind Object with the provided name.
    #
    # Note that an object's fields and functions may be omitted if the intent is only to refer to an object. This is how functions are able to return their own object, or any other circular reference.
    # @return [TypeDef]
    def with_object(name:, description: nil, source_map: nil)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      args['description'] = description unless description.nil?
      args['sourceMap'] = source_map unless source_map.nil?
      TypeDef.new(self, @client, 'withObject', args)
    end

    # Sets whether this type can be set to null.
    # @return [TypeDef]
    def with_optional(optional:)
      assert_not_nil(:optional, optional)
      args = {
        'optional' => optional
      }
      TypeDef.new(self, @client, 'withOptional', args)
    end

    # Returns a TypeDef of kind Scalar with the provided name.
    # @return [TypeDef]
    def with_scalar(name:, description: nil)
      assert_not_nil(:name, name)
      args = {
        'name' => name
      }
      args['description'] = description unless description.nil?
      TypeDef.new(self, @client, 'withScalar', args)
    end

    def with(fun)
      fun.call(self)
    end
  end
end
