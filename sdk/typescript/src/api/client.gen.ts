/**
 * This file was auto-generated by `client-gen`.
 * Do not make direct changes to the file.
 */
import { Context } from "../common/context.js"

class BaseClient {
  /**
   * @hidden
   */

  constructor(protected _ctx: Context = new Context()) {}
}

export type BuildArg = {
  /**
   * The build argument name.
   */
  name: string

  /**
   * The build argument value.
   */
  value: string
}

/**
 * Sharing mode of the cache volume.
 */
export enum CacheSharingMode {
  /**
   * Shares the cache volume amongst many build pipelines, but will serialize the writes
   */
  Locked = "LOCKED",

  /**
   * Keeps a cache volume for a single build pipeline
   */
  Private = "PRIVATE",

  /**
   * Shares the cache volume amongst many build pipelines
   */
  Shared = "SHARED",
}
/**
 * The `CacheVolumeID` scalar type represents an identifier for an object of type CacheVolume.
 */
export type CacheVolumeID = string & { __CacheVolumeID: never }

export type ContainerAsServiceOpts = {
  /**
   * Command to run instead of the container's default command (e.g., ["go", "run", "main.go"]).
   *
   * If empty, the container's default command is used.
   */
  args?: string[]

  /**
   * If the container has an entrypoint, prepend it to the args.
   */
  useEntrypoint?: boolean

  /**
   * Provides Dagger access to the executed command.
   *
   * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
   */
  experimentalPrivilegedNesting?: boolean

  /**
   * Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
   */
  insecureRootCapabilities?: boolean

  /**
   * Replace "${VAR}" or "$VAR" in the args according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean

  /**
   * If set, skip the automatic init process injected into containers by default.
   *
   * This should only be used if the user requires that their exec process be the pid 1 process in the container. Otherwise it may result in unexpected behavior.
   */
  noInit?: boolean
}

export type ContainerAsTarballOpts = {
  /**
   * Identifiers for other platform specific containers.
   *
   * Used for multi-platform images.
   */
  platformVariants?: Container[]

  /**
   * Force each layer of the image to use the specified compression algorithm.
   *
   * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
   */
  forcedCompression?: ImageLayerCompression

  /**
   * Use the specified media types for the image's layers.
   *
   * Defaults to OCI, which is largely compatible with most recent container runtimes, but Docker may be needed for older runtimes without OCI support.
   */
  mediaTypes?: ImageMediaTypes
}

export type ContainerBuildOpts = {
  /**
   * Path to the Dockerfile to use.
   */
  dockerfile?: string

  /**
   * Target build stage to build.
   */
  target?: string

  /**
   * Additional build arguments.
   */
  buildArgs?: BuildArg[]

  /**
   * Secrets to pass to the build.
   *
   * They will be mounted at /run/secrets/[secret-name] in the build container
   *
   * They can be accessed in the Dockerfile using the "secret" mount type and mount path /run/secrets/[secret-name], e.g. RUN --mount=type=secret,id=my-secret curl [http://example.com?token=$(cat /run/secrets/my-secret)](http://example.com?token=$(cat /run/secrets/my-secret))
   */
  secrets?: Secret[]
}

export type ContainerDirectoryOpts = {
  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

export type ContainerExportOpts = {
  /**
   * Identifiers for other platform specific containers.
   *
   * Used for multi-platform image.
   */
  platformVariants?: Container[]

  /**
   * Force each layer of the exported image to use the specified compression algorithm.
   *
   * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
   */
  forcedCompression?: ImageLayerCompression

  /**
   * Use the specified media types for the exported image's layers.
   *
   * Defaults to OCI, which is largely compatible with most recent container runtimes, but Docker may be needed for older runtimes without OCI support.
   */
  mediaTypes?: ImageMediaTypes

  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

export type ContainerFileOpts = {
  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  expand?: boolean
}

export type ContainerImportOpts = {
  /**
   * Identifies the tag to import from the archive, if the archive bundles multiple tags.
   */
  tag?: string
}

export type ContainerPublishOpts = {
  /**
   * Identifiers for other platform specific containers.
   *
   * Used for multi-platform image.
   */
  platformVariants?: Container[]

  /**
   * Force each layer of the published image to use the specified compression algorithm.
   *
   * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
   */
  forcedCompression?: ImageLayerCompression

  /**
   * Use the specified media types for the published image's layers.
   *
   * Defaults to OCI, which is largely compatible with most recent registries, but Docker may be needed for older registries without OCI support.
   */
  mediaTypes?: ImageMediaTypes
}

export type ContainerTerminalOpts = {
  /**
   * If set, override the container's default terminal command and invoke these command arguments instead.
   */
  cmd?: string[]

  /**
   * Provides Dagger access to the executed command.
   *
   * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
   */
  experimentalPrivilegedNesting?: boolean

  /**
   * Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
   */
  insecureRootCapabilities?: boolean
}

export type ContainerUpOpts = {
  /**
   * List of frontend/backend port mappings to forward.
   *
   * Frontend is the port accepting traffic on the host, backend is the service port.
   */
  ports?: PortForward[]

  /**
   * Bind each tunnel port to a random port on the host.
   */
  random?: boolean
}

export type ContainerWithDefaultTerminalCmdOpts = {
  /**
   * Provides Dagger access to the executed command.
   *
   * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
   */
  experimentalPrivilegedNesting?: boolean

  /**
   * Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
   */
  insecureRootCapabilities?: boolean
}

export type ContainerWithDirectoryOpts = {
  /**
   * Patterns to exclude in the written directory (e.g. ["node_modules/**", ".gitignore", ".git/"]).
   */
  exclude?: string[]

  /**
   * Patterns to include in the written directory (e.g. ["*.go", "go.mod", "go.sum"]).
   */
  include?: string[]

  /**
   * A user:group to set for the directory and its contents.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   */
  owner?: string

  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

export type ContainerWithEntrypointOpts = {
  /**
   * Don't remove the default arguments when setting the entrypoint.
   */
  keepDefaultArgs?: boolean
}

export type ContainerWithEnvVariableOpts = {
  /**
   * Replace "${VAR}" or "$VAR" in the value according to the current environment variables defined in the container (e.g. "/opt/bin:$PATH").
   */
  expand?: boolean
}

export type ContainerWithExecOpts = {
  /**
   * If the container has an entrypoint, prepend it to the args.
   */
  useEntrypoint?: boolean

  /**
   * Content to write to the command's standard input before closing (e.g., "Hello world").
   */
  stdin?: string

  /**
   * Redirect the command's standard output to a file in the container (e.g., "/tmp/stdout").
   */
  redirectStdout?: string

  /**
   * Redirect the command's standard error to a file in the container (e.g., "/tmp/stderr").
   */
  redirectStderr?: string

  /**
   * Exit codes this command is allowed to exit with without error
   */
  expect?: ReturnType

  /**
   * Provides Dagger access to the executed command.
   *
   * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
   */
  experimentalPrivilegedNesting?: boolean

  /**
   * Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
   */
  insecureRootCapabilities?: boolean

  /**
   * Replace "${VAR}" or "$VAR" in the args according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean

  /**
   * If set, skip the automatic init process injected into containers by default.
   *
   * This should only be used if the user requires that their exec process be the pid 1 process in the container. Otherwise it may result in unexpected behavior.
   */
  noInit?: boolean
}

export type ContainerWithExposedPortOpts = {
  /**
   * Transport layer network protocol
   */
  protocol?: NetworkProtocol

  /**
   * Optional port description
   */
  description?: string

  /**
   * Skip the health check when run as a service.
   */
  experimentalSkipHealthcheck?: boolean
}

export type ContainerWithFileOpts = {
  /**
   * Permission given to the copied file (e.g., 0600).
   */
  permissions?: number

  /**
   * A user:group to set for the file.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   */
  owner?: string

  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  expand?: boolean
}

export type ContainerWithFilesOpts = {
  /**
   * Permission given to the copied files (e.g., 0600).
   */
  permissions?: number

  /**
   * A user:group to set for the files.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   */
  owner?: string

  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  expand?: boolean
}

export type ContainerWithMountedCacheOpts = {
  /**
   * Identifier of the directory to use as the cache volume's root.
   */
  source?: Directory

  /**
   * Sharing mode of the cache volume.
   */
  sharing?: CacheSharingMode

  /**
   * A user:group to set for the mounted cache directory.
   *
   * Note that this changes the ownership of the specified mount along with the initial filesystem provided by source (if any). It does not have any effect if/when the cache has already been created.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   */
  owner?: string

  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

export type ContainerWithMountedDirectoryOpts = {
  /**
   * A user:group to set for the mounted directory and its contents.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   */
  owner?: string

  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

export type ContainerWithMountedFileOpts = {
  /**
   * A user or user:group to set for the mounted file.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   */
  owner?: string

  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  expand?: boolean
}

export type ContainerWithMountedSecretOpts = {
  /**
   * A user:group to set for the mounted secret.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   */
  owner?: string

  /**
   * Permission given to the mounted secret (e.g., 0600).
   *
   * This option requires an owner to be set to be active.
   */
  mode?: number

  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

export type ContainerWithMountedTempOpts = {
  /**
   * Size of the temporary directory in bytes.
   */
  size?: number

  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

export type ContainerWithNewFileOpts = {
  /**
   * Permission given to the written file (e.g., 0600).
   */
  permissions?: number

  /**
   * A user:group to set for the file.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   */
  owner?: string

  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  expand?: boolean
}

export type ContainerWithUnixSocketOpts = {
  /**
   * A user:group to set for the mounted socket.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   */
  owner?: string

  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

export type ContainerWithWorkdirOpts = {
  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

export type ContainerWithoutDirectoryOpts = {
  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

export type ContainerWithoutEntrypointOpts = {
  /**
   * Don't remove the default arguments when unsetting the entrypoint.
   */
  keepDefaultArgs?: boolean
}

export type ContainerWithoutExposedPortOpts = {
  /**
   * Port protocol to unexpose
   */
  protocol?: NetworkProtocol
}

export type ContainerWithoutFileOpts = {
  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  expand?: boolean
}

export type ContainerWithoutFilesOpts = {
  /**
   * Replace "${VAR}" or "$VAR" in the value of paths according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  expand?: boolean
}

export type ContainerWithoutMountOpts = {
  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

export type ContainerWithoutUnixSocketOpts = {
  /**
   * Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  expand?: boolean
}

/**
 * The `ContainerID` scalar type represents an identifier for an object of type Container.
 */
export type ContainerID = string & { __ContainerID: never }

export type CurrentModuleWorkdirOpts = {
  /**
   * Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
   */
  exclude?: string[]

  /**
   * Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
   */
  include?: string[]
}

/**
 * The `CurrentModuleID` scalar type represents an identifier for an object of type CurrentModule.
 */
export type CurrentModuleID = string & { __CurrentModuleID: never }

export type DirectoryAsModuleOpts = {
  /**
   * An optional subpath of the directory which contains the module's configuration file.
   *
   * This is needed when the module code is in a subdirectory but requires parent directories to be loaded in order to execute. For example, the module source code may need a go.mod, project.toml, package.json, etc. file from a parent directory.
   *
   * If not set, the module source code is loaded from the root of the directory.
   */
  sourceRootPath?: string

  /**
   * The engine version to upgrade to.
   */
  engineVersion?: string
}

export type DirectoryDockerBuildOpts = {
  /**
   * The platform to build.
   */
  platform?: Platform

  /**
   * Path to the Dockerfile to use (e.g., "frontend.Dockerfile").
   */
  dockerfile?: string

  /**
   * Target build stage to build.
   */
  target?: string

  /**
   * Build arguments to use in the build.
   */
  buildArgs?: BuildArg[]

  /**
   * Secrets to pass to the build.
   *
   * They will be mounted at /run/secrets/[secret-name].
   */
  secrets?: Secret[]
}

export type DirectoryEntriesOpts = {
  /**
   * Location of the directory to look at (e.g., "/src").
   */
  path?: string
}

export type DirectoryExportOpts = {
  /**
   * If true, then the host directory will be wiped clean before exporting so that it exactly matches the directory being exported; this means it will delete any files on the host that aren't in the exported dir. If false (the default), the contents of the directory will be merged with any existing contents of the host directory, leaving any existing files on the host that aren't in the exported directory alone.
   */
  wipe?: boolean
}

export type DirectoryTerminalOpts = {
  /**
   * If set, override the container's default terminal command and invoke these command arguments instead.
   */
  cmd?: string[]

  /**
   * Provides Dagger access to the executed command.
   *
   * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
   */
  experimentalPrivilegedNesting?: boolean

  /**
   * Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
   */
  insecureRootCapabilities?: boolean

  /**
   * If set, override the default container used for the terminal.
   */
  container?: Container
}

export type DirectoryWithDirectoryOpts = {
  /**
   * Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
   */
  exclude?: string[]

  /**
   * Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
   */
  include?: string[]
}

export type DirectoryWithFileOpts = {
  /**
   * Permission given to the copied file (e.g., 0600).
   */
  permissions?: number
}

export type DirectoryWithFilesOpts = {
  /**
   * Permission given to the copied files (e.g., 0600).
   */
  permissions?: number
}

export type DirectoryWithNewDirectoryOpts = {
  /**
   * Permission granted to the created directory (e.g., 0777).
   */
  permissions?: number
}

export type DirectoryWithNewFileOpts = {
  /**
   * Permission given to the copied file (e.g., 0600).
   */
  permissions?: number
}

/**
 * The `DirectoryID` scalar type represents an identifier for an object of type Directory.
 */
export type DirectoryID = string & { __DirectoryID: never }

export type EngineCacheEntrySetOpts = {
  key?: string
}

/**
 * The `EngineCacheEntryID` scalar type represents an identifier for an object of type EngineCacheEntry.
 */
export type EngineCacheEntryID = string & { __EngineCacheEntryID: never }

/**
 * The `EngineCacheEntrySetID` scalar type represents an identifier for an object of type EngineCacheEntrySet.
 */
export type EngineCacheEntrySetID = string & { __EngineCacheEntrySetID: never }

/**
 * The `EngineCacheID` scalar type represents an identifier for an object of type EngineCache.
 */
export type EngineCacheID = string & { __EngineCacheID: never }

/**
 * The `EngineID` scalar type represents an identifier for an object of type Engine.
 */
export type EngineID = string & { __EngineID: never }

/**
 * The `EnumTypeDefID` scalar type represents an identifier for an object of type EnumTypeDef.
 */
export type EnumTypeDefID = string & { __EnumTypeDefID: never }

/**
 * The `EnumValueTypeDefID` scalar type represents an identifier for an object of type EnumValueTypeDef.
 */
export type EnumValueTypeDefID = string & { __EnumValueTypeDefID: never }

/**
 * The `EnvVariableID` scalar type represents an identifier for an object of type EnvVariable.
 */
export type EnvVariableID = string & { __EnvVariableID: never }

/**
 * The `ErrorID` scalar type represents an identifier for an object of type Error.
 */
export type ErrorID = string & { __ErrorID: never }

/**
 * The `FieldTypeDefID` scalar type represents an identifier for an object of type FieldTypeDef.
 */
export type FieldTypeDefID = string & { __FieldTypeDefID: never }

export type FileDigestOpts = {
  /**
   * If true, exclude metadata from the digest.
   */
  excludeMetadata?: boolean
}

export type FileExportOpts = {
  /**
   * If allowParentDirPath is true, the path argument can be a directory path, in which case the file will be created in that directory.
   */
  allowParentDirPath?: boolean
}

/**
 * The `FileID` scalar type represents an identifier for an object of type File.
 */
export type FileID = string & { __FileID: never }

export type FunctionWithArgOpts = {
  /**
   * A doc string for the argument, if any
   */
  description?: string

  /**
   * A default value to use for this argument if not explicitly set by the caller, if any
   */
  defaultValue?: JSON

  /**
   * If the argument is a Directory or File type, default to load path from context directory, relative to root directory.
   */
  defaultPath?: string

  /**
   * Patterns to ignore when loading the contextual argument value.
   */
  ignore?: string[]
  sourceMap?: SourceMap
}

/**
 * The `FunctionArgID` scalar type represents an identifier for an object of type FunctionArg.
 */
export type FunctionArgID = string & { __FunctionArgID: never }

/**
 * The `FunctionCallArgValueID` scalar type represents an identifier for an object of type FunctionCallArgValue.
 */
export type FunctionCallArgValueID = string & {
  __FunctionCallArgValueID: never
}

/**
 * The `FunctionCallID` scalar type represents an identifier for an object of type FunctionCall.
 */
export type FunctionCallID = string & { __FunctionCallID: never }

/**
 * The `FunctionID` scalar type represents an identifier for an object of type Function.
 */
export type FunctionID = string & { __FunctionID: never }

/**
 * The `GeneratedCodeID` scalar type represents an identifier for an object of type GeneratedCode.
 */
export type GeneratedCodeID = string & { __GeneratedCodeID: never }

/**
 * The `GitModuleSourceID` scalar type represents an identifier for an object of type GitModuleSource.
 */
export type GitModuleSourceID = string & { __GitModuleSourceID: never }

export type GitRefTreeOpts = {
  /**
   * Set to true to discard .git directory.
   */
  discardGitDir?: boolean
}

/**
 * The `GitRefID` scalar type represents an identifier for an object of type GitRef.
 */
export type GitRefID = string & { __GitRefID: never }

export type GitRepositoryTagsOpts = {
  /**
   * Glob patterns (e.g., "refs/tags/v*").
   */
  patterns?: string[]
}

/**
 * The `GitRepositoryID` scalar type represents an identifier for an object of type GitRepository.
 */
export type GitRepositoryID = string & { __GitRepositoryID: never }

export type HostDirectoryOpts = {
  /**
   * Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
   */
  exclude?: string[]

  /**
   * Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
   */
  include?: string[]
}

export type HostServiceOpts = {
  /**
   * Upstream host to forward traffic to.
   */
  host?: string

  /**
   * Ports to expose via the service, forwarding through the host network.
   *
   * If a port's frontend is unspecified or 0, it defaults to the same as the backend port.
   *
   * An empty set of ports is not valid; an error will be returned.
   */
  ports: PortForward[]
}

export type HostTunnelOpts = {
  /**
   * Configure explicit port forwarding rules for the tunnel.
   *
   * If a port's frontend is unspecified or 0, a random port will be chosen by the host.
   *
   * If no ports are given, all of the service's ports are forwarded. If native is true, each port maps to the same port on the host. If native is false, each port maps to a random port chosen by the host.
   *
   * If ports are given and native is true, the ports are additive.
   */
  ports?: PortForward[]

  /**
   * Map each service port to the same port on the host, as if the service were running natively.
   *
   * Note: enabling may result in port conflicts.
   */
  native?: boolean
}

/**
 * The `HostID` scalar type represents an identifier for an object of type Host.
 */
export type HostID = string & { __HostID: never }

/**
 * Compression algorithm to use for image layers.
 */
export enum ImageLayerCompression {
  Estargz = "EStarGZ",
  Gzip = "Gzip",
  Uncompressed = "Uncompressed",
  Zstd = "Zstd",
}
/**
 * Mediatypes to use in published or exported image metadata.
 */
export enum ImageMediaTypes {
  Dockermediatypes = "DockerMediaTypes",
  Ocimediatypes = "OCIMediaTypes",
}
/**
 * The `InputTypeDefID` scalar type represents an identifier for an object of type InputTypeDef.
 */
export type InputTypeDefID = string & { __InputTypeDefID: never }

/**
 * The `InterfaceTypeDefID` scalar type represents an identifier for an object of type InterfaceTypeDef.
 */
export type InterfaceTypeDefID = string & { __InterfaceTypeDefID: never }

/**
 * An arbitrary JSON-encoded value.
 */
export type JSON = string & { __JSON: never }

/**
 * The `LabelID` scalar type represents an identifier for an object of type Label.
 */
export type LabelID = string & { __LabelID: never }

/**
 * The `ListTypeDefID` scalar type represents an identifier for an object of type ListTypeDef.
 */
export type ListTypeDefID = string & { __ListTypeDefID: never }

/**
 * The `LocalModuleSourceID` scalar type represents an identifier for an object of type LocalModuleSource.
 */
export type LocalModuleSourceID = string & { __LocalModuleSourceID: never }

export type ModuleWithSourceOpts = {
  /**
   * The engine version to upgrade to.
   */
  engineVersion?: string
}

/**
 * The `ModuleDependencyID` scalar type represents an identifier for an object of type ModuleDependency.
 */
export type ModuleDependencyID = string & { __ModuleDependencyID: never }

/**
 * The `ModuleID` scalar type represents an identifier for an object of type Module.
 */
export type ModuleID = string & { __ModuleID: never }

export type ModuleSourceAsModuleOpts = {
  /**
   * The engine version to upgrade to.
   */
  engineVersion?: string
}

export type ModuleSourceResolveDirectoryFromCallerOpts = {
  /**
   * If set, the name of the view to apply to the path.
   */
  viewName?: string

  /**
   * Patterns to ignore when loading the directory.
   */
  ignore?: string[]
}

export type ModuleSourceWithInitOpts = {
  /**
   * Merge module dependencies into the current project's
   */
  merge?: boolean
}

/**
 * The `ModuleSourceID` scalar type represents an identifier for an object of type ModuleSource.
 */
export type ModuleSourceID = string & { __ModuleSourceID: never }

/**
 * The kind of module source.
 */
export enum ModuleSourceKind {
  GitSource = "GIT_SOURCE",
  LocalSource = "LOCAL_SOURCE",
}
/**
 * The `ModuleSourceViewID` scalar type represents an identifier for an object of type ModuleSourceView.
 */
export type ModuleSourceViewID = string & { __ModuleSourceViewID: never }

/**
 * Transport layer network protocol associated to a port.
 */
export enum NetworkProtocol {
  Tcp = "TCP",
  Udp = "UDP",
}
/**
 * The `ObjectTypeDefID` scalar type represents an identifier for an object of type ObjectTypeDef.
 */
export type ObjectTypeDefID = string & { __ObjectTypeDefID: never }

export type PipelineLabel = {
  /**
   * Label name.
   */
  name: string

  /**
   * Label value.
   */
  value: string
}

/**
 * The platform config OS and architecture in a Container.
 *
 * The format is [os]/[platform]/[version] (e.g., "darwin/arm64/v7", "windows/amd64", "linux/arm64").
 */
export type Platform = string & { __Platform: never }

export type PortForward = {
  /**
   * Destination port for traffic.
   */
  backend: number

  /**
   * Port to expose to clients. If unspecified, a default will be chosen.
   */
  frontend?: number

  /**
   * Transport layer protocol to use for traffic.
   */
  protocol?: NetworkProtocol
}

/**
 * The `PortID` scalar type represents an identifier for an object of type Port.
 */
export type PortID = string & { __PortID: never }

export type ClientContainerOpts = {
  /**
   * Platform to initialize the container with.
   */
  platform?: Platform
}

export type ClientGitOpts = {
  /**
   * DEPRECATED: Set to true to keep .git directory.
   */
  keepGitDir?: boolean

  /**
   * A service which must be started before the repo is fetched.
   */
  experimentalServiceHost?: Service

  /**
   * Set SSH known hosts
   */
  sshKnownHosts?: string

  /**
   * Set SSH auth socket
   */
  sshAuthSocket?: Socket
}

export type ClientHttpOpts = {
  /**
   * A service which must be started before the URL is fetched.
   */
  experimentalServiceHost?: Service
}

export type ClientModuleDependencyOpts = {
  /**
   * If set, the name to use for the dependency. Otherwise, once installed to a parent module, the name of the dependency module will be used by default.
   */
  name?: string
}

export type ClientModuleSourceOpts = {
  /**
   * The pinned version of the module source
   */
  refPin?: string

  /**
   * If true, enforce that the source is a stable version for source kinds that support versioning.
   */
  stable?: boolean

  /**
   * The relative path to the module root from the host directory
   */
  relHostPath?: string
}

export type ClientSecretOpts = {
  accessor?: string
}

/**
 * Expected return type of an execution
 */
export enum ReturnType {
  /**
   * Any execution (exit codes 0-127)
   */
  Any = "ANY",

  /**
   * A failed execution (exit codes 1-127)
   */
  Failure = "FAILURE",

  /**
   * A successful execution (exit code 0)
   */
  Success = "SUCCESS",
}
/**
 * The `ScalarTypeDefID` scalar type represents an identifier for an object of type ScalarTypeDef.
 */
export type ScalarTypeDefID = string & { __ScalarTypeDefID: never }

/**
 * The `SecretID` scalar type represents an identifier for an object of type Secret.
 */
export type SecretID = string & { __SecretID: never }

export type ServiceEndpointOpts = {
  /**
   * The exposed port number for the endpoint
   */
  port?: number

  /**
   * Return a URL with the given scheme, eg. http for http://
   */
  scheme?: string
}

export type ServiceStopOpts = {
  /**
   * Immediately kill the service without waiting for a graceful exit
   */
  kill?: boolean
}

export type ServiceUpOpts = {
  /**
   * List of frontend/backend port mappings to forward.
   *
   * Frontend is the port accepting traffic on the host, backend is the service port.
   */
  ports?: PortForward[]

  /**
   * Bind each tunnel port to a random port on the host.
   */
  random?: boolean
}

/**
 * The `ServiceID` scalar type represents an identifier for an object of type Service.
 */
export type ServiceID = string & { __ServiceID: never }

/**
 * The `SocketID` scalar type represents an identifier for an object of type Socket.
 */
export type SocketID = string & { __SocketID: never }

/**
 * The `SourceMapID` scalar type represents an identifier for an object of type SourceMap.
 */
export type SourceMapID = string & { __SourceMapID: never }

/**
 * The `TerminalID` scalar type represents an identifier for an object of type Terminal.
 */
export type TerminalID = string & { __TerminalID: never }

export type TypeDefWithEnumOpts = {
  /**
   * A doc string for the enum, if any
   */
  description?: string

  /**
   * The source map for the enum definition.
   */
  sourceMap?: SourceMap
}

export type TypeDefWithEnumValueOpts = {
  /**
   * A doc string for the value, if any
   */
  description?: string

  /**
   * The source map for the enum value definition.
   */
  sourceMap?: SourceMap
}

export type TypeDefWithFieldOpts = {
  /**
   * A doc string for the field, if any
   */
  description?: string

  /**
   * The source map for the field definition.
   */
  sourceMap?: SourceMap
}

export type TypeDefWithInterfaceOpts = {
  description?: string
  sourceMap?: SourceMap
}

export type TypeDefWithObjectOpts = {
  description?: string
  sourceMap?: SourceMap
}

export type TypeDefWithScalarOpts = {
  description?: string
}

/**
 * The `TypeDefID` scalar type represents an identifier for an object of type TypeDef.
 */
export type TypeDefID = string & { __TypeDefID: never }

/**
 * Distinguishes the different kinds of TypeDefs.
 */
export enum TypeDefKind {
  /**
   * A boolean value.
   */
  BooleanKind = "BOOLEAN_KIND",

  /**
   * A GraphQL enum type and its values
   *
   * Always paired with an EnumTypeDef.
   */
  EnumKind = "ENUM_KIND",

  /**
   * A graphql input type, used only when representing the core API via TypeDefs.
   */
  InputKind = "INPUT_KIND",

  /**
   * An integer value.
   */
  IntegerKind = "INTEGER_KIND",

  /**
   * A named type of functions that can be matched+implemented by other objects+interfaces.
   *
   * Always paired with an InterfaceTypeDef.
   */
  InterfaceKind = "INTERFACE_KIND",

  /**
   * A list of values all having the same type.
   *
   * Always paired with a ListTypeDef.
   */
  ListKind = "LIST_KIND",

  /**
   * A named type defined in the GraphQL schema, with fields and functions.
   *
   * Always paired with an ObjectTypeDef.
   */
  ObjectKind = "OBJECT_KIND",

  /**
   * A scalar value of any basic kind.
   */
  ScalarKind = "SCALAR_KIND",

  /**
   * A string value.
   */
  StringKind = "STRING_KIND",

  /**
   * A special kind used to signify that no value is returned.
   *
   * This is used for functions that have no return value. The outer TypeDef specifying this Kind is always Optional, as the Void is never actually represented.
   */
  VoidKind = "VOID_KIND",
}
/**
 * The absence of a value.
 *
 * A Null Void is used as a placeholder for resolvers that do not return anything.
 */
export type Void = string & { __Void: never }

export type __TypeEnumValuesOpts = {
  includeDeprecated?: boolean
}

export type __TypeFieldsOpts = {
  includeDeprecated?: boolean
}

/**
 * A directory whose contents persist across runs.
 */
export class CacheVolume extends BaseClient {
  private readonly _id?: CacheVolumeID = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: CacheVolumeID) {
    super(ctx)

    this._id = _id
  }

  /**
   * A unique identifier for this CacheVolume.
   */
  id = async (): Promise<CacheVolumeID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<CacheVolumeID> = await ctx.execute()

    return response
  }
}

/**
 * An OCI-compatible container, also known as a Docker container.
 */
export class Container extends BaseClient {
  private readonly _id?: ContainerID = undefined
  private readonly _envVariable?: string = undefined
  private readonly _exitCode?: number = undefined
  private readonly _export?: string = undefined
  private readonly _imageRef?: string = undefined
  private readonly _label?: string = undefined
  private readonly _platform?: Platform = undefined
  private readonly _publish?: string = undefined
  private readonly _stderr?: string = undefined
  private readonly _stdout?: string = undefined
  private readonly _sync?: ContainerID = undefined
  private readonly _up?: Void = undefined
  private readonly _user?: string = undefined
  private readonly _workdir?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: ContainerID,
    _envVariable?: string,
    _exitCode?: number,
    _export?: string,
    _imageRef?: string,
    _label?: string,
    _platform?: Platform,
    _publish?: string,
    _stderr?: string,
    _stdout?: string,
    _sync?: ContainerID,
    _up?: Void,
    _user?: string,
    _workdir?: string,
  ) {
    super(ctx)

    this._id = _id
    this._envVariable = _envVariable
    this._exitCode = _exitCode
    this._export = _export
    this._imageRef = _imageRef
    this._label = _label
    this._platform = _platform
    this._publish = _publish
    this._stderr = _stderr
    this._stdout = _stdout
    this._sync = _sync
    this._up = _up
    this._user = _user
    this._workdir = _workdir
  }

  /**
   * A unique identifier for this Container.
   */
  id = async (): Promise<ContainerID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<ContainerID> = await ctx.execute()

    return response
  }

  /**
   * Turn the container into a Service.
   *
   * Be sure to set any exposed ports before this conversion.
   * @param opts.args Command to run instead of the container's default command (e.g., ["go", "run", "main.go"]).
   *
   * If empty, the container's default command is used.
   * @param opts.useEntrypoint If the container has an entrypoint, prepend it to the args.
   * @param opts.experimentalPrivilegedNesting Provides Dagger access to the executed command.
   *
   * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
   * @param opts.insecureRootCapabilities Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the args according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   * @param opts.noInit If set, skip the automatic init process injected into containers by default.
   *
   * This should only be used if the user requires that their exec process be the pid 1 process in the container. Otherwise it may result in unexpected behavior.
   */
  asService = (opts?: ContainerAsServiceOpts): Service => {
    const ctx = this._ctx.select("asService", { ...opts })
    return new Service(ctx)
  }

  /**
   * Returns a File representing the container serialized to a tarball.
   * @param opts.platformVariants Identifiers for other platform specific containers.
   *
   * Used for multi-platform images.
   * @param opts.forcedCompression Force each layer of the image to use the specified compression algorithm.
   *
   * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
   * @param opts.mediaTypes Use the specified media types for the image's layers.
   *
   * Defaults to OCI, which is largely compatible with most recent container runtimes, but Docker may be needed for older runtimes without OCI support.
   */
  asTarball = (opts?: ContainerAsTarballOpts): File => {
    const metadata = {
      forcedCompression: { is_enum: true },
      mediaTypes: { is_enum: true },
    }

    const ctx = this._ctx.select("asTarball", { ...opts, __metadata: metadata })
    return new File(ctx)
  }

  /**
   * Initializes this container from a Dockerfile build.
   * @param context Directory context used by the Dockerfile.
   * @param opts.dockerfile Path to the Dockerfile to use.
   * @param opts.target Target build stage to build.
   * @param opts.buildArgs Additional build arguments.
   * @param opts.secrets Secrets to pass to the build.
   *
   * They will be mounted at /run/secrets/[secret-name] in the build container
   *
   * They can be accessed in the Dockerfile using the "secret" mount type and mount path /run/secrets/[secret-name], e.g. RUN --mount=type=secret,id=my-secret curl [http://example.com?token=$(cat /run/secrets/my-secret)](http://example.com?token=$(cat /run/secrets/my-secret))
   */
  build = (context: Directory, opts?: ContainerBuildOpts): Container => {
    const ctx = this._ctx.select("build", { context, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves default arguments for future commands.
   */
  defaultArgs = async (): Promise<string[]> => {
    const ctx = this._ctx.select("defaultArgs")

    const response: Awaited<string[]> = await ctx.execute()

    return response
  }

  /**
   * Retrieves a directory at the given path.
   *
   * Mounts are included.
   * @param path The path of the directory to retrieve (e.g., "./src").
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  directory = (path: string, opts?: ContainerDirectoryOpts): Directory => {
    const ctx = this._ctx.select("directory", { path, ...opts })
    return new Directory(ctx)
  }

  /**
   * Retrieves entrypoint to be prepended to the arguments of all commands.
   */
  entrypoint = async (): Promise<string[]> => {
    const ctx = this._ctx.select("entrypoint")

    const response: Awaited<string[]> = await ctx.execute()

    return response
  }

  /**
   * Retrieves the value of the specified environment variable.
   * @param name The name of the environment variable to retrieve (e.g., "PATH").
   */
  envVariable = async (name: string): Promise<string> => {
    if (this._envVariable) {
      return this._envVariable
    }

    const ctx = this._ctx.select("envVariable", { name })

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieves the list of environment variables passed to commands.
   */
  envVariables = async (): Promise<EnvVariable[]> => {
    type envVariables = {
      id: EnvVariableID
    }

    const ctx = this._ctx.select("envVariables").select("id")

    const response: Awaited<envVariables[]> = await ctx.execute()

    return response.map(
      (r) =>
        new EnvVariable(
          new Context(
            [
              {
                operation: "loadEnvVariableFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The exit code of the last executed command.
   *
   * Returns an error if no command was set.
   */
  exitCode = async (): Promise<number> => {
    if (this._exitCode) {
      return this._exitCode
    }

    const ctx = this._ctx.select("exitCode")

    const response: Awaited<number> = await ctx.execute()

    return response
  }

  /**
   * EXPERIMENTAL API! Subject to change/removal at any time.
   *
   * Configures all available GPUs on the host to be accessible to this container.
   *
   * This currently works for Nvidia devices only.
   */
  experimentalWithAllGPUs = (): Container => {
    const ctx = this._ctx.select("experimentalWithAllGPUs")
    return new Container(ctx)
  }

  /**
   * EXPERIMENTAL API! Subject to change/removal at any time.
   *
   * Configures the provided list of devices to be accessible to this container.
   *
   * This currently works for Nvidia devices only.
   * @param devices List of devices to be accessible to this container.
   */
  experimentalWithGPU = (devices: string[]): Container => {
    const ctx = this._ctx.select("experimentalWithGPU", { devices })
    return new Container(ctx)
  }

  /**
   * Writes the container as an OCI tarball to the destination file path on the host.
   *
   * It can also export platform variants.
   * @param path Host's destination path (e.g., "./tarball").
   *
   * Path can be relative to the engine's workdir or absolute.
   * @param opts.platformVariants Identifiers for other platform specific containers.
   *
   * Used for multi-platform image.
   * @param opts.forcedCompression Force each layer of the exported image to use the specified compression algorithm.
   *
   * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
   * @param opts.mediaTypes Use the specified media types for the exported image's layers.
   *
   * Defaults to OCI, which is largely compatible with most recent container runtimes, but Docker may be needed for older runtimes without OCI support.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  export = async (
    path: string,
    opts?: ContainerExportOpts,
  ): Promise<string> => {
    if (this._export) {
      return this._export
    }

    const metadata = {
      forcedCompression: { is_enum: true },
      mediaTypes: { is_enum: true },
    }

    const ctx = this._ctx.select("export", {
      path,
      ...opts,
      __metadata: metadata,
    })

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieves the list of exposed ports.
   *
   * This includes ports already exposed by the image, even if not explicitly added with dagger.
   */
  exposedPorts = async (): Promise<Port[]> => {
    type exposedPorts = {
      id: PortID
    }

    const ctx = this._ctx.select("exposedPorts").select("id")

    const response: Awaited<exposedPorts[]> = await ctx.execute()

    return response.map(
      (r) =>
        new Port(
          new Context(
            [
              {
                operation: "loadPortFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * Retrieves a file at the given path.
   *
   * Mounts are included.
   * @param path The path of the file to retrieve (e.g., "./README.md").
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  file = (path: string, opts?: ContainerFileOpts): File => {
    const ctx = this._ctx.select("file", { path, ...opts })
    return new File(ctx)
  }

  /**
   * Initializes this container from a pulled base image.
   * @param address Image's address from its registry.
   *
   * Formatted as [host]/[user]/[repo]:[tag] (e.g., "docker.io/dagger/dagger:main").
   */
  from = (address: string): Container => {
    const ctx = this._ctx.select("from", { address })
    return new Container(ctx)
  }

  /**
   * The unique image reference which can only be retrieved immediately after the 'Container.From' call.
   */
  imageRef = async (): Promise<string> => {
    if (this._imageRef) {
      return this._imageRef
    }

    const ctx = this._ctx.select("imageRef")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Reads the container from an OCI tarball.
   * @param source File to read the container from.
   * @param opts.tag Identifies the tag to import from the archive, if the archive bundles multiple tags.
   */
  import_ = (source: File, opts?: ContainerImportOpts): Container => {
    const ctx = this._ctx.select("import", { source, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves the value of the specified label.
   * @param name The name of the label (e.g., "org.opencontainers.artifact.created").
   */
  label = async (name: string): Promise<string> => {
    if (this._label) {
      return this._label
    }

    const ctx = this._ctx.select("label", { name })

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieves the list of labels passed to container.
   */
  labels = async (): Promise<Label[]> => {
    type labels = {
      id: LabelID
    }

    const ctx = this._ctx.select("labels").select("id")

    const response: Awaited<labels[]> = await ctx.execute()

    return response.map(
      (r) =>
        new Label(
          new Context(
            [
              {
                operation: "loadLabelFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * Retrieves the list of paths where a directory is mounted.
   */
  mounts = async (): Promise<string[]> => {
    const ctx = this._ctx.select("mounts")

    const response: Awaited<string[]> = await ctx.execute()

    return response
  }

  /**
   * The platform this container executes and publishes as.
   */
  platform = async (): Promise<Platform> => {
    if (this._platform) {
      return this._platform
    }

    const ctx = this._ctx.select("platform")

    const response: Awaited<Platform> = await ctx.execute()

    return response
  }

  /**
   * Publishes this container as a new image to the specified address.
   *
   * Publish returns a fully qualified ref.
   *
   * It can also publish platform variants.
   * @param address Registry's address to publish the image to.
   *
   * Formatted as [host]/[user]/[repo]:[tag] (e.g. "docker.io/dagger/dagger:main").
   * @param opts.platformVariants Identifiers for other platform specific containers.
   *
   * Used for multi-platform image.
   * @param opts.forcedCompression Force each layer of the published image to use the specified compression algorithm.
   *
   * If this is unset, then if a layer already has a compressed blob in the engine's cache, that will be used (this can result in a mix of compression algorithms for different layers). If this is unset and a layer has no compressed blob in the engine's cache, then it will be compressed using Gzip.
   * @param opts.mediaTypes Use the specified media types for the published image's layers.
   *
   * Defaults to OCI, which is largely compatible with most recent registries, but Docker may be needed for older registries without OCI support.
   */
  publish = async (
    address: string,
    opts?: ContainerPublishOpts,
  ): Promise<string> => {
    if (this._publish) {
      return this._publish
    }

    const metadata = {
      forcedCompression: { is_enum: true },
      mediaTypes: { is_enum: true },
    }

    const ctx = this._ctx.select("publish", {
      address,
      ...opts,
      __metadata: metadata,
    })

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieves this container's root filesystem. Mounts are not included.
   */
  rootfs = (): Directory => {
    const ctx = this._ctx.select("rootfs")
    return new Directory(ctx)
  }

  /**
   * The error stream of the last executed command.
   *
   * Returns an error if no command was set.
   */
  stderr = async (): Promise<string> => {
    if (this._stderr) {
      return this._stderr
    }

    const ctx = this._ctx.select("stderr")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The output stream of the last executed command.
   *
   * Returns an error if no command was set.
   */
  stdout = async (): Promise<string> => {
    if (this._stdout) {
      return this._stdout
    }

    const ctx = this._ctx.select("stdout")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Forces evaluation of the pipeline in the engine.
   *
   * It doesn't run the default command if no exec has been set.
   */
  sync = async (): Promise<Container> => {
    const ctx = this._ctx.select("sync")

    const response: Awaited<ContainerID> = await ctx.execute()

    return new Container(
      new Context(
        [
          {
            operation: "loadContainerFromID",
            args: { id: response },
          },
        ],
        this._ctx.getConnection(),
      ),
    )
  }

  /**
   * Opens an interactive terminal for this container using its configured default terminal command if not overridden by args (or sh as a fallback default).
   * @param opts.cmd If set, override the container's default terminal command and invoke these command arguments instead.
   * @param opts.experimentalPrivilegedNesting Provides Dagger access to the executed command.
   *
   * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
   * @param opts.insecureRootCapabilities Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
   */
  terminal = (opts?: ContainerTerminalOpts): Container => {
    const ctx = this._ctx.select("terminal", { ...opts })
    return new Container(ctx)
  }

  /**
   * Starts a Service and creates a tunnel that forwards traffic from the caller's network to that service.
   *
   * Be sure to set any exposed ports before calling this api.
   * @param opts.ports List of frontend/backend port mappings to forward.
   *
   * Frontend is the port accepting traffic on the host, backend is the service port.
   * @param opts.random Bind each tunnel port to a random port on the host.
   */
  up = async (opts?: ContainerUpOpts): Promise<void> => {
    if (this._up) {
      return
    }

    const ctx = this._ctx.select("up", { ...opts })

    await ctx.execute()
  }

  /**
   * Retrieves the user to be set for all commands.
   */
  user = async (): Promise<string> => {
    if (this._user) {
      return this._user
    }

    const ctx = this._ctx.select("user")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieves this container plus the given OCI anotation.
   * @param name The name of the annotation.
   * @param value The value of the annotation.
   */
  withAnnotation = (name: string, value: string): Container => {
    const ctx = this._ctx.select("withAnnotation", { name, value })
    return new Container(ctx)
  }

  /**
   * Configures default arguments for future commands.
   * @param args Arguments to prepend to future executions (e.g., ["-v", "--no-cache"]).
   */
  withDefaultArgs = (args: string[]): Container => {
    const ctx = this._ctx.select("withDefaultArgs", { args })
    return new Container(ctx)
  }

  /**
   * Set the default command to invoke for the container's terminal API.
   * @param args The args of the command.
   * @param opts.experimentalPrivilegedNesting Provides Dagger access to the executed command.
   *
   * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
   * @param opts.insecureRootCapabilities Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
   */
  withDefaultTerminalCmd = (
    args: string[],
    opts?: ContainerWithDefaultTerminalCmdOpts,
  ): Container => {
    const ctx = this._ctx.select("withDefaultTerminalCmd", { args, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus a directory written at the given path.
   * @param path Location of the written directory (e.g., "/tmp/directory").
   * @param directory Identifier of the directory to write
   * @param opts.exclude Patterns to exclude in the written directory (e.g. ["node_modules/**", ".gitignore", ".git/"]).
   * @param opts.include Patterns to include in the written directory (e.g. ["*.go", "go.mod", "go.sum"]).
   * @param opts.owner A user:group to set for the directory and its contents.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  withDirectory = (
    path: string,
    directory: Directory,
    opts?: ContainerWithDirectoryOpts,
  ): Container => {
    const ctx = this._ctx.select("withDirectory", { path, directory, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container but with a different command entrypoint.
   * @param args Entrypoint to use for future executions (e.g., ["go", "run"]).
   * @param opts.keepDefaultArgs Don't remove the default arguments when setting the entrypoint.
   */
  withEntrypoint = (
    args: string[],
    opts?: ContainerWithEntrypointOpts,
  ): Container => {
    const ctx = this._ctx.select("withEntrypoint", { args, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus the given environment variable.
   * @param name The name of the environment variable (e.g., "HOST").
   * @param value The value of the environment variable. (e.g., "localhost").
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value according to the current environment variables defined in the container (e.g. "/opt/bin:$PATH").
   */
  withEnvVariable = (
    name: string,
    value: string,
    opts?: ContainerWithEnvVariableOpts,
  ): Container => {
    const ctx = this._ctx.select("withEnvVariable", { name, value, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container after executing the specified command inside it.
   * @param args Command to run instead of the container's default command (e.g., ["go", "run", "main.go"]).
   *
   * If empty, the container's default command is used.
   * @param opts.useEntrypoint If the container has an entrypoint, prepend it to the args.
   * @param opts.stdin Content to write to the command's standard input before closing (e.g., "Hello world").
   * @param opts.redirectStdout Redirect the command's standard output to a file in the container (e.g., "/tmp/stdout").
   * @param opts.redirectStderr Redirect the command's standard error to a file in the container (e.g., "/tmp/stderr").
   * @param opts.expect Exit codes this command is allowed to exit with without error
   * @param opts.experimentalPrivilegedNesting Provides Dagger access to the executed command.
   *
   * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
   * @param opts.insecureRootCapabilities Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the args according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   * @param opts.noInit If set, skip the automatic init process injected into containers by default.
   *
   * This should only be used if the user requires that their exec process be the pid 1 process in the container. Otherwise it may result in unexpected behavior.
   */
  withExec = (args: string[], opts?: ContainerWithExecOpts): Container => {
    const metadata = {
      expect: { is_enum: true },
    }

    const ctx = this._ctx.select("withExec", {
      args,
      ...opts,
      __metadata: metadata,
    })
    return new Container(ctx)
  }

  /**
   * Expose a network port.
   *
   * Exposed ports serve two purposes:
   *
   * - For health checks and introspection, when running services
   *
   * - For setting the EXPOSE OCI field when publishing the container
   * @param port Port number to expose
   * @param opts.protocol Transport layer network protocol
   * @param opts.description Optional port description
   * @param opts.experimentalSkipHealthcheck Skip the health check when run as a service.
   */
  withExposedPort = (
    port: number,
    opts?: ContainerWithExposedPortOpts,
  ): Container => {
    const metadata = {
      protocol: { is_enum: true },
    }

    const ctx = this._ctx.select("withExposedPort", {
      port,
      ...opts,
      __metadata: metadata,
    })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus the contents of the given file copied to the given path.
   * @param path Location of the copied file (e.g., "/tmp/file.txt").
   * @param source Identifier of the file to copy.
   * @param opts.permissions Permission given to the copied file (e.g., 0600).
   * @param opts.owner A user:group to set for the file.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  withFile = (
    path: string,
    source: File,
    opts?: ContainerWithFileOpts,
  ): Container => {
    const ctx = this._ctx.select("withFile", { path, source, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus the contents of the given files copied to the given path.
   * @param path Location where copied files should be placed (e.g., "/src").
   * @param sources Identifiers of the files to copy.
   * @param opts.permissions Permission given to the copied files (e.g., 0600).
   * @param opts.owner A user:group to set for the files.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  withFiles = (
    path: string,
    sources: File[],
    opts?: ContainerWithFilesOpts,
  ): Container => {
    const ctx = this._ctx.select("withFiles", { path, sources, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus the given label.
   * @param name The name of the label (e.g., "org.opencontainers.artifact.created").
   * @param value The value of the label (e.g., "2023-01-01T00:00:00Z").
   */
  withLabel = (name: string, value: string): Container => {
    const ctx = this._ctx.select("withLabel", { name, value })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus a cache volume mounted at the given path.
   * @param path Location of the cache directory (e.g., "/root/.npm").
   * @param cache Identifier of the cache volume to mount.
   * @param opts.source Identifier of the directory to use as the cache volume's root.
   * @param opts.sharing Sharing mode of the cache volume.
   * @param opts.owner A user:group to set for the mounted cache directory.
   *
   * Note that this changes the ownership of the specified mount along with the initial filesystem provided by source (if any). It does not have any effect if/when the cache has already been created.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  withMountedCache = (
    path: string,
    cache: CacheVolume,
    opts?: ContainerWithMountedCacheOpts,
  ): Container => {
    const metadata = {
      sharing: { is_enum: true },
    }

    const ctx = this._ctx.select("withMountedCache", {
      path,
      cache,
      ...opts,
      __metadata: metadata,
    })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus a directory mounted at the given path.
   * @param path Location of the mounted directory (e.g., "/mnt/directory").
   * @param source Identifier of the mounted directory.
   * @param opts.owner A user:group to set for the mounted directory and its contents.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  withMountedDirectory = (
    path: string,
    source: Directory,
    opts?: ContainerWithMountedDirectoryOpts,
  ): Container => {
    const ctx = this._ctx.select("withMountedDirectory", {
      path,
      source,
      ...opts,
    })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus a file mounted at the given path.
   * @param path Location of the mounted file (e.g., "/tmp/file.txt").
   * @param source Identifier of the mounted file.
   * @param opts.owner A user or user:group to set for the mounted file.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  withMountedFile = (
    path: string,
    source: File,
    opts?: ContainerWithMountedFileOpts,
  ): Container => {
    const ctx = this._ctx.select("withMountedFile", { path, source, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus a secret mounted into a file at the given path.
   * @param path Location of the secret file (e.g., "/tmp/secret.txt").
   * @param source Identifier of the secret to mount.
   * @param opts.owner A user:group to set for the mounted secret.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   * @param opts.mode Permission given to the mounted secret (e.g., 0600).
   *
   * This option requires an owner to be set to be active.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  withMountedSecret = (
    path: string,
    source: Secret,
    opts?: ContainerWithMountedSecretOpts,
  ): Container => {
    const ctx = this._ctx.select("withMountedSecret", { path, source, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus a temporary directory mounted at the given path. Any writes will be ephemeral to a single withExec call; they will not be persisted to subsequent withExecs.
   * @param path Location of the temporary directory (e.g., "/tmp/temp_dir").
   * @param opts.size Size of the temporary directory in bytes.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  withMountedTemp = (
    path: string,
    opts?: ContainerWithMountedTempOpts,
  ): Container => {
    const ctx = this._ctx.select("withMountedTemp", { path, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus a new file written at the given path.
   * @param path Location of the written file (e.g., "/tmp/file.txt").
   * @param contents Content of the file to write (e.g., "Hello world!").
   * @param opts.permissions Permission given to the written file (e.g., 0600).
   * @param opts.owner A user:group to set for the file.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  withNewFile = (
    path: string,
    contents: string,
    opts?: ContainerWithNewFileOpts,
  ): Container => {
    const ctx = this._ctx.select("withNewFile", { path, contents, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container with a registry authentication for a given address.
   * @param address Registry's address to bind the authentication to.
   *
   * Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
   * @param username The username of the registry's account (e.g., "Dagger").
   * @param secret The API key, password or token to authenticate to this registry.
   */
  withRegistryAuth = (
    address: string,
    username: string,
    secret: Secret,
  ): Container => {
    const ctx = this._ctx.select("withRegistryAuth", {
      address,
      username,
      secret,
    })
    return new Container(ctx)
  }

  /**
   * Retrieves the container with the given directory mounted to /.
   * @param directory Directory to mount.
   */
  withRootfs = (directory: Directory): Container => {
    const ctx = this._ctx.select("withRootfs", { directory })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus an env variable containing the given secret.
   * @param name The name of the secret variable (e.g., "API_SECRET").
   * @param secret The identifier of the secret value.
   */
  withSecretVariable = (name: string, secret: Secret): Container => {
    const ctx = this._ctx.select("withSecretVariable", { name, secret })
    return new Container(ctx)
  }

  /**
   * Establish a runtime dependency on a service.
   *
   * The service will be started automatically when needed and detached when it is no longer needed, executing the default command if none is set.
   *
   * The service will be reachable from the container via the provided hostname alias.
   *
   * The service dependency will also convey to any files or directories produced by the container.
   * @param alias A name that can be used to reach the service from the container
   * @param service Identifier of the service container
   */
  withServiceBinding = (alias: string, service: Service): Container => {
    const ctx = this._ctx.select("withServiceBinding", { alias, service })
    return new Container(ctx)
  }

  /**
   * Retrieves this container plus a socket forwarded to the given Unix socket path.
   * @param path Location of the forwarded Unix socket (e.g., "/tmp/socket").
   * @param source Identifier of the socket to forward.
   * @param opts.owner A user:group to set for the mounted socket.
   *
   * The user and group can either be an ID (1000:1000) or a name (foo:bar).
   *
   * If the group is omitted, it defaults to the same as the user.
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  withUnixSocket = (
    path: string,
    source: Socket,
    opts?: ContainerWithUnixSocketOpts,
  ): Container => {
    const ctx = this._ctx.select("withUnixSocket", { path, source, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container with a different command user.
   * @param name The user to set (e.g., "root").
   */
  withUser = (name: string): Container => {
    const ctx = this._ctx.select("withUser", { name })
    return new Container(ctx)
  }

  /**
   * Retrieves this container with a different working directory.
   * @param path The path to set as the working directory (e.g., "/app").
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  withWorkdir = (path: string, opts?: ContainerWithWorkdirOpts): Container => {
    const ctx = this._ctx.select("withWorkdir", { path, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container minus the given OCI annotation.
   * @param name The name of the annotation.
   */
  withoutAnnotation = (name: string): Container => {
    const ctx = this._ctx.select("withoutAnnotation", { name })
    return new Container(ctx)
  }

  /**
   * Retrieves this container with unset default arguments for future commands.
   */
  withoutDefaultArgs = (): Container => {
    const ctx = this._ctx.select("withoutDefaultArgs")
    return new Container(ctx)
  }

  /**
   * Retrieves this container with the directory at the given path removed.
   * @param path Location of the directory to remove (e.g., ".github/").
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  withoutDirectory = (
    path: string,
    opts?: ContainerWithoutDirectoryOpts,
  ): Container => {
    const ctx = this._ctx.select("withoutDirectory", { path, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container with an unset command entrypoint.
   * @param opts.keepDefaultArgs Don't remove the default arguments when unsetting the entrypoint.
   */
  withoutEntrypoint = (opts?: ContainerWithoutEntrypointOpts): Container => {
    const ctx = this._ctx.select("withoutEntrypoint", { ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container minus the given environment variable.
   * @param name The name of the environment variable (e.g., "HOST").
   */
  withoutEnvVariable = (name: string): Container => {
    const ctx = this._ctx.select("withoutEnvVariable", { name })
    return new Container(ctx)
  }

  /**
   * Unexpose a previously exposed port.
   * @param port Port number to unexpose
   * @param opts.protocol Port protocol to unexpose
   */
  withoutExposedPort = (
    port: number,
    opts?: ContainerWithoutExposedPortOpts,
  ): Container => {
    const metadata = {
      protocol: { is_enum: true },
    }

    const ctx = this._ctx.select("withoutExposedPort", {
      port,
      ...opts,
      __metadata: metadata,
    })
    return new Container(ctx)
  }

  /**
   * Retrieves this container with the file at the given path removed.
   * @param path Location of the file to remove (e.g., "/file.txt").
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  withoutFile = (path: string, opts?: ContainerWithoutFileOpts): Container => {
    const ctx = this._ctx.select("withoutFile", { path, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container with the files at the given paths removed.
   * @param paths Location of the files to remove (e.g., ["/file.txt"]).
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of paths according to the current environment variables defined in the container (e.g. "/$VAR/foo.txt").
   */
  withoutFiles = (
    paths: string[],
    opts?: ContainerWithoutFilesOpts,
  ): Container => {
    const ctx = this._ctx.select("withoutFiles", { paths, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container minus the given environment label.
   * @param name The name of the label to remove (e.g., "org.opencontainers.artifact.created").
   */
  withoutLabel = (name: string): Container => {
    const ctx = this._ctx.select("withoutLabel", { name })
    return new Container(ctx)
  }

  /**
   * Retrieves this container after unmounting everything at the given path.
   * @param path Location of the cache directory (e.g., "/root/.npm").
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  withoutMount = (
    path: string,
    opts?: ContainerWithoutMountOpts,
  ): Container => {
    const ctx = this._ctx.select("withoutMount", { path, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container without the registry authentication of a given address.
   * @param address Registry's address to remove the authentication from.
   *
   * Formatted as [host]/[user]/[repo]:[tag] (e.g. docker.io/dagger/dagger:main).
   */
  withoutRegistryAuth = (address: string): Container => {
    const ctx = this._ctx.select("withoutRegistryAuth", { address })
    return new Container(ctx)
  }

  /**
   * Retrieves this container minus the given environment variable containing the secret.
   * @param name The name of the environment variable (e.g., "HOST").
   */
  withoutSecretVariable = (name: string): Container => {
    const ctx = this._ctx.select("withoutSecretVariable", { name })
    return new Container(ctx)
  }

  /**
   * Retrieves this container with a previously added Unix socket removed.
   * @param path Location of the socket to remove (e.g., "/tmp/socket").
   * @param opts.expand Replace "${VAR}" or "$VAR" in the value of path according to the current environment variables defined in the container (e.g. "/$VAR/foo").
   */
  withoutUnixSocket = (
    path: string,
    opts?: ContainerWithoutUnixSocketOpts,
  ): Container => {
    const ctx = this._ctx.select("withoutUnixSocket", { path, ...opts })
    return new Container(ctx)
  }

  /**
   * Retrieves this container with an unset command user.
   *
   * Should default to root.
   */
  withoutUser = (): Container => {
    const ctx = this._ctx.select("withoutUser")
    return new Container(ctx)
  }

  /**
   * Retrieves this container with an unset working directory.
   *
   * Should default to "/".
   */
  withoutWorkdir = (): Container => {
    const ctx = this._ctx.select("withoutWorkdir")
    return new Container(ctx)
  }

  /**
   * Retrieves the working directory for all commands.
   */
  workdir = async (): Promise<string> => {
    if (this._workdir) {
      return this._workdir
    }

    const ctx = this._ctx.select("workdir")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Call the provided function with current Container.
   *
   * This is useful for reusability and readability by not breaking the calling chain.
   */
  with = (arg: (param: Container) => Container) => {
    return arg(this)
  }
}

/**
 * Reflective module API provided to functions at runtime.
 */
export class CurrentModule extends BaseClient {
  private readonly _id?: CurrentModuleID = undefined
  private readonly _name?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: CurrentModuleID, _name?: string) {
    super(ctx)

    this._id = _id
    this._name = _name
  }

  /**
   * A unique identifier for this CurrentModule.
   */
  id = async (): Promise<CurrentModuleID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<CurrentModuleID> = await ctx.execute()

    return response
  }

  /**
   * The name of the module being executed in
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The directory containing the module's source code loaded into the engine (plus any generated code that may have been created).
   */
  source = (): Directory => {
    const ctx = this._ctx.select("source")
    return new Directory(ctx)
  }

  /**
   * Load a directory from the module's scratch working directory, including any changes that may have been made to it during module function execution.
   * @param path Location of the directory to access (e.g., ".").
   * @param opts.exclude Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
   * @param opts.include Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
   */
  workdir = (path: string, opts?: CurrentModuleWorkdirOpts): Directory => {
    const ctx = this._ctx.select("workdir", { path, ...opts })
    return new Directory(ctx)
  }

  /**
   * Load a file from the module's scratch working directory, including any changes that may have been made to it during module function execution.Load a file from the module's scratch working directory, including any changes that may have been made to it during module function execution.
   * @param path Location of the file to retrieve (e.g., "README.md").
   */
  workdirFile = (path: string): File => {
    const ctx = this._ctx.select("workdirFile", { path })
    return new File(ctx)
  }
}

/**
 * A directory.
 */
export class Directory extends BaseClient {
  private readonly _id?: DirectoryID = undefined
  private readonly _digest?: string = undefined
  private readonly _export?: string = undefined
  private readonly _sync?: DirectoryID = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: DirectoryID,
    _digest?: string,
    _export?: string,
    _sync?: DirectoryID,
  ) {
    super(ctx)

    this._id = _id
    this._digest = _digest
    this._export = _export
    this._sync = _sync
  }

  /**
   * A unique identifier for this Directory.
   */
  id = async (): Promise<DirectoryID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<DirectoryID> = await ctx.execute()

    return response
  }

  /**
   * Load the directory as a Dagger module
   * @param opts.sourceRootPath An optional subpath of the directory which contains the module's configuration file.
   *
   * This is needed when the module code is in a subdirectory but requires parent directories to be loaded in order to execute. For example, the module source code may need a go.mod, project.toml, package.json, etc. file from a parent directory.
   *
   * If not set, the module source code is loaded from the root of the directory.
   * @param opts.engineVersion The engine version to upgrade to.
   */
  asModule = (opts?: DirectoryAsModuleOpts): Module_ => {
    const ctx = this._ctx.select("asModule", { ...opts })
    return new Module_(ctx)
  }

  /**
   * Gets the difference between this directory and an another directory.
   * @param other Identifier of the directory to compare.
   */
  diff = (other: Directory): Directory => {
    const ctx = this._ctx.select("diff", { other })
    return new Directory(ctx)
  }

  /**
   * Return the directory's digest. The format of the digest is not guaranteed to be stable between releases of Dagger. It is guaranteed to be stable between invocations of the same Dagger engine.
   */
  digest = async (): Promise<string> => {
    if (this._digest) {
      return this._digest
    }

    const ctx = this._ctx.select("digest")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieves a directory at the given path.
   * @param path Location of the directory to retrieve (e.g., "/src").
   */
  directory = (path: string): Directory => {
    const ctx = this._ctx.select("directory", { path })
    return new Directory(ctx)
  }

  /**
   * Builds a new Docker container from this directory.
   * @param opts.platform The platform to build.
   * @param opts.dockerfile Path to the Dockerfile to use (e.g., "frontend.Dockerfile").
   * @param opts.target Target build stage to build.
   * @param opts.buildArgs Build arguments to use in the build.
   * @param opts.secrets Secrets to pass to the build.
   *
   * They will be mounted at /run/secrets/[secret-name].
   */
  dockerBuild = (opts?: DirectoryDockerBuildOpts): Container => {
    const ctx = this._ctx.select("dockerBuild", { ...opts })
    return new Container(ctx)
  }

  /**
   * Returns a list of files and directories at the given path.
   * @param opts.path Location of the directory to look at (e.g., "/src").
   */
  entries = async (opts?: DirectoryEntriesOpts): Promise<string[]> => {
    const ctx = this._ctx.select("entries", { ...opts })

    const response: Awaited<string[]> = await ctx.execute()

    return response
  }

  /**
   * Writes the contents of the directory to a path on the host.
   * @param path Location of the copied directory (e.g., "logs/").
   * @param opts.wipe If true, then the host directory will be wiped clean before exporting so that it exactly matches the directory being exported; this means it will delete any files on the host that aren't in the exported dir. If false (the default), the contents of the directory will be merged with any existing contents of the host directory, leaving any existing files on the host that aren't in the exported directory alone.
   */
  export = async (
    path: string,
    opts?: DirectoryExportOpts,
  ): Promise<string> => {
    if (this._export) {
      return this._export
    }

    const ctx = this._ctx.select("export", { path, ...opts })

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieves a file at the given path.
   * @param path Location of the file to retrieve (e.g., "README.md").
   */
  file = (path: string): File => {
    const ctx = this._ctx.select("file", { path })
    return new File(ctx)
  }

  /**
   * Returns a list of files and directories that matche the given pattern.
   * @param pattern Pattern to match (e.g., "*.md").
   */
  glob = async (pattern: string): Promise<string[]> => {
    const ctx = this._ctx.select("glob", { pattern })

    const response: Awaited<string[]> = await ctx.execute()

    return response
  }

  /**
   * Force evaluation in the engine.
   */
  sync = async (): Promise<Directory> => {
    const ctx = this._ctx.select("sync")

    const response: Awaited<DirectoryID> = await ctx.execute()

    return new Directory(
      new Context(
        [
          {
            operation: "loadDirectoryFromID",
            args: { id: response },
          },
        ],
        this._ctx.getConnection(),
      ),
    )
  }

  /**
   * Opens an interactive terminal in new container with this directory mounted inside.
   * @param opts.cmd If set, override the container's default terminal command and invoke these command arguments instead.
   * @param opts.experimentalPrivilegedNesting Provides Dagger access to the executed command.
   *
   * Do not use this option unless you trust the command being executed; the command being executed WILL BE GRANTED FULL ACCESS TO YOUR HOST FILESYSTEM.
   * @param opts.insecureRootCapabilities Execute the command with all root capabilities. This is similar to running a command with "sudo" or executing "docker run" with the "--privileged" flag. Containerization does not provide any security guarantees when using this option. It should only be used when absolutely necessary and only with trusted commands.
   * @param opts.container If set, override the default container used for the terminal.
   */
  terminal = (opts?: DirectoryTerminalOpts): Directory => {
    const ctx = this._ctx.select("terminal", { ...opts })
    return new Directory(ctx)
  }

  /**
   * Retrieves this directory plus a directory written at the given path.
   * @param path Location of the written directory (e.g., "/src/").
   * @param directory Identifier of the directory to copy.
   * @param opts.exclude Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
   * @param opts.include Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
   */
  withDirectory = (
    path: string,
    directory: Directory,
    opts?: DirectoryWithDirectoryOpts,
  ): Directory => {
    const ctx = this._ctx.select("withDirectory", { path, directory, ...opts })
    return new Directory(ctx)
  }

  /**
   * Retrieves this directory plus the contents of the given file copied to the given path.
   * @param path Location of the copied file (e.g., "/file.txt").
   * @param source Identifier of the file to copy.
   * @param opts.permissions Permission given to the copied file (e.g., 0600).
   */
  withFile = (
    path: string,
    source: File,
    opts?: DirectoryWithFileOpts,
  ): Directory => {
    const ctx = this._ctx.select("withFile", { path, source, ...opts })
    return new Directory(ctx)
  }

  /**
   * Retrieves this directory plus the contents of the given files copied to the given path.
   * @param path Location where copied files should be placed (e.g., "/src").
   * @param sources Identifiers of the files to copy.
   * @param opts.permissions Permission given to the copied files (e.g., 0600).
   */
  withFiles = (
    path: string,
    sources: File[],
    opts?: DirectoryWithFilesOpts,
  ): Directory => {
    const ctx = this._ctx.select("withFiles", { path, sources, ...opts })
    return new Directory(ctx)
  }

  /**
   * Retrieves this directory plus a new directory created at the given path.
   * @param path Location of the directory created (e.g., "/logs").
   * @param opts.permissions Permission granted to the created directory (e.g., 0777).
   */
  withNewDirectory = (
    path: string,
    opts?: DirectoryWithNewDirectoryOpts,
  ): Directory => {
    const ctx = this._ctx.select("withNewDirectory", { path, ...opts })
    return new Directory(ctx)
  }

  /**
   * Retrieves this directory plus a new file written at the given path.
   * @param path Location of the written file (e.g., "/file.txt").
   * @param contents Content of the written file (e.g., "Hello world!").
   * @param opts.permissions Permission given to the copied file (e.g., 0600).
   */
  withNewFile = (
    path: string,
    contents: string,
    opts?: DirectoryWithNewFileOpts,
  ): Directory => {
    const ctx = this._ctx.select("withNewFile", { path, contents, ...opts })
    return new Directory(ctx)
  }

  /**
   * Retrieves this directory with all file/dir timestamps set to the given time.
   * @param timestamp Timestamp to set dir/files in.
   *
   * Formatted in seconds following Unix epoch (e.g., 1672531199).
   */
  withTimestamps = (timestamp: number): Directory => {
    const ctx = this._ctx.select("withTimestamps", { timestamp })
    return new Directory(ctx)
  }

  /**
   * Retrieves this directory with the directory at the given path removed.
   * @param path Location of the directory to remove (e.g., ".github/").
   */
  withoutDirectory = (path: string): Directory => {
    const ctx = this._ctx.select("withoutDirectory", { path })
    return new Directory(ctx)
  }

  /**
   * Retrieves this directory with the file at the given path removed.
   * @param path Location of the file to remove (e.g., "/file.txt").
   */
  withoutFile = (path: string): Directory => {
    const ctx = this._ctx.select("withoutFile", { path })
    return new Directory(ctx)
  }

  /**
   * Retrieves this directory with the files at the given paths removed.
   * @param paths Location of the file to remove (e.g., ["/file.txt"]).
   */
  withoutFiles = (paths: string[]): Directory => {
    const ctx = this._ctx.select("withoutFiles", { paths })
    return new Directory(ctx)
  }

  /**
   * Call the provided function with current Directory.
   *
   * This is useful for reusability and readability by not breaking the calling chain.
   */
  with = (arg: (param: Directory) => Directory) => {
    return arg(this)
  }
}

/**
 * The Dagger engine configuration and state
 */
export class Engine extends BaseClient {
  private readonly _id?: EngineID = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: EngineID) {
    super(ctx)

    this._id = _id
  }

  /**
   * A unique identifier for this Engine.
   */
  id = async (): Promise<EngineID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<EngineID> = await ctx.execute()

    return response
  }

  /**
   * The local (on-disk) cache for the Dagger engine
   */
  localCache = (): EngineCache => {
    const ctx = this._ctx.select("localCache")
    return new EngineCache(ctx)
  }
}

/**
 * A cache storage for the Dagger engine
 */
export class EngineCache extends BaseClient {
  private readonly _id?: EngineCacheID = undefined
  private readonly _keepBytes?: number = undefined
  private readonly _maxUsedSpace?: number = undefined
  private readonly _minFreeSpace?: number = undefined
  private readonly _prune?: Void = undefined
  private readonly _reservedSpace?: number = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: EngineCacheID,
    _keepBytes?: number,
    _maxUsedSpace?: number,
    _minFreeSpace?: number,
    _prune?: Void,
    _reservedSpace?: number,
  ) {
    super(ctx)

    this._id = _id
    this._keepBytes = _keepBytes
    this._maxUsedSpace = _maxUsedSpace
    this._minFreeSpace = _minFreeSpace
    this._prune = _prune
    this._reservedSpace = _reservedSpace
  }

  /**
   * A unique identifier for this EngineCache.
   */
  id = async (): Promise<EngineCacheID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<EngineCacheID> = await ctx.execute()

    return response
  }

  /**
   * The current set of entries in the cache
   */
  entrySet = (opts?: EngineCacheEntrySetOpts): EngineCacheEntrySet => {
    const ctx = this._ctx.select("entrySet", { ...opts })
    return new EngineCacheEntrySet(ctx)
  }

  /**
   * The maximum bytes to keep in the cache without pruning, after which automatic pruning may kick in.
   * @deprecated Use minFreeSpace instead.
   */
  keepBytes = async (): Promise<number> => {
    if (this._keepBytes) {
      return this._keepBytes
    }

    const ctx = this._ctx.select("keepBytes")

    const response: Awaited<number> = await ctx.execute()

    return response
  }

  /**
   * The maximum bytes to keep in the cache without pruning.
   */
  maxUsedSpace = async (): Promise<number> => {
    if (this._maxUsedSpace) {
      return this._maxUsedSpace
    }

    const ctx = this._ctx.select("maxUsedSpace")

    const response: Awaited<number> = await ctx.execute()

    return response
  }

  /**
   * The target amount of free disk space the garbage collector will attempt to leave.
   */
  minFreeSpace = async (): Promise<number> => {
    if (this._minFreeSpace) {
      return this._minFreeSpace
    }

    const ctx = this._ctx.select("minFreeSpace")

    const response: Awaited<number> = await ctx.execute()

    return response
  }

  /**
   * Prune the cache of releaseable entries
   */
  prune = async (): Promise<void> => {
    if (this._prune) {
      return
    }

    const ctx = this._ctx.select("prune")

    await ctx.execute()
  }
  reservedSpace = async (): Promise<number> => {
    if (this._reservedSpace) {
      return this._reservedSpace
    }

    const ctx = this._ctx.select("reservedSpace")

    const response: Awaited<number> = await ctx.execute()

    return response
  }
}

/**
 * An individual cache entry in a cache entry set
 */
export class EngineCacheEntry extends BaseClient {
  private readonly _id?: EngineCacheEntryID = undefined
  private readonly _activelyUsed?: boolean = undefined
  private readonly _createdTimeUnixNano?: number = undefined
  private readonly _description?: string = undefined
  private readonly _diskSpaceBytes?: number = undefined
  private readonly _mostRecentUseTimeUnixNano?: number = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: EngineCacheEntryID,
    _activelyUsed?: boolean,
    _createdTimeUnixNano?: number,
    _description?: string,
    _diskSpaceBytes?: number,
    _mostRecentUseTimeUnixNano?: number,
  ) {
    super(ctx)

    this._id = _id
    this._activelyUsed = _activelyUsed
    this._createdTimeUnixNano = _createdTimeUnixNano
    this._description = _description
    this._diskSpaceBytes = _diskSpaceBytes
    this._mostRecentUseTimeUnixNano = _mostRecentUseTimeUnixNano
  }

  /**
   * A unique identifier for this EngineCacheEntry.
   */
  id = async (): Promise<EngineCacheEntryID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<EngineCacheEntryID> = await ctx.execute()

    return response
  }

  /**
   * Whether the cache entry is actively being used.
   */
  activelyUsed = async (): Promise<boolean> => {
    if (this._activelyUsed) {
      return this._activelyUsed
    }

    const ctx = this._ctx.select("activelyUsed")

    const response: Awaited<boolean> = await ctx.execute()

    return response
  }

  /**
   * The time the cache entry was created, in Unix nanoseconds.
   */
  createdTimeUnixNano = async (): Promise<number> => {
    if (this._createdTimeUnixNano) {
      return this._createdTimeUnixNano
    }

    const ctx = this._ctx.select("createdTimeUnixNano")

    const response: Awaited<number> = await ctx.execute()

    return response
  }

  /**
   * The description of the cache entry.
   */
  description = async (): Promise<string> => {
    if (this._description) {
      return this._description
    }

    const ctx = this._ctx.select("description")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The disk space used by the cache entry.
   */
  diskSpaceBytes = async (): Promise<number> => {
    if (this._diskSpaceBytes) {
      return this._diskSpaceBytes
    }

    const ctx = this._ctx.select("diskSpaceBytes")

    const response: Awaited<number> = await ctx.execute()

    return response
  }

  /**
   * The most recent time the cache entry was used, in Unix nanoseconds.
   */
  mostRecentUseTimeUnixNano = async (): Promise<number> => {
    if (this._mostRecentUseTimeUnixNano) {
      return this._mostRecentUseTimeUnixNano
    }

    const ctx = this._ctx.select("mostRecentUseTimeUnixNano")

    const response: Awaited<number> = await ctx.execute()

    return response
  }
}

/**
 * A set of cache entries returned by a query to a cache
 */
export class EngineCacheEntrySet extends BaseClient {
  private readonly _id?: EngineCacheEntrySetID = undefined
  private readonly _diskSpaceBytes?: number = undefined
  private readonly _entryCount?: number = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: EngineCacheEntrySetID,
    _diskSpaceBytes?: number,
    _entryCount?: number,
  ) {
    super(ctx)

    this._id = _id
    this._diskSpaceBytes = _diskSpaceBytes
    this._entryCount = _entryCount
  }

  /**
   * A unique identifier for this EngineCacheEntrySet.
   */
  id = async (): Promise<EngineCacheEntrySetID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<EngineCacheEntrySetID> = await ctx.execute()

    return response
  }

  /**
   * The total disk space used by the cache entries in this set.
   */
  diskSpaceBytes = async (): Promise<number> => {
    if (this._diskSpaceBytes) {
      return this._diskSpaceBytes
    }

    const ctx = this._ctx.select("diskSpaceBytes")

    const response: Awaited<number> = await ctx.execute()

    return response
  }

  /**
   * The list of individual cache entries in the set
   */
  entries = async (): Promise<EngineCacheEntry[]> => {
    type entries = {
      id: EngineCacheEntryID
    }

    const ctx = this._ctx.select("entries").select("id")

    const response: Awaited<entries[]> = await ctx.execute()

    return response.map(
      (r) =>
        new EngineCacheEntry(
          new Context(
            [
              {
                operation: "loadEngineCacheEntryFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The number of cache entries in this set.
   */
  entryCount = async (): Promise<number> => {
    if (this._entryCount) {
      return this._entryCount
    }

    const ctx = this._ctx.select("entryCount")

    const response: Awaited<number> = await ctx.execute()

    return response
  }
}

/**
 * A definition of a custom enum defined in a Module.
 */
export class EnumTypeDef extends BaseClient {
  private readonly _id?: EnumTypeDefID = undefined
  private readonly _description?: string = undefined
  private readonly _name?: string = undefined
  private readonly _sourceModuleName?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: EnumTypeDefID,
    _description?: string,
    _name?: string,
    _sourceModuleName?: string,
  ) {
    super(ctx)

    this._id = _id
    this._description = _description
    this._name = _name
    this._sourceModuleName = _sourceModuleName
  }

  /**
   * A unique identifier for this EnumTypeDef.
   */
  id = async (): Promise<EnumTypeDefID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<EnumTypeDefID> = await ctx.execute()

    return response
  }

  /**
   * A doc string for the enum, if any.
   */
  description = async (): Promise<string> => {
    if (this._description) {
      return this._description
    }

    const ctx = this._ctx.select("description")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The name of the enum.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The location of this enum declaration.
   */
  sourceMap = (): SourceMap => {
    const ctx = this._ctx.select("sourceMap")
    return new SourceMap(ctx)
  }

  /**
   * If this EnumTypeDef is associated with a Module, the name of the module. Unset otherwise.
   */
  sourceModuleName = async (): Promise<string> => {
    if (this._sourceModuleName) {
      return this._sourceModuleName
    }

    const ctx = this._ctx.select("sourceModuleName")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The values of the enum.
   */
  values = async (): Promise<EnumValueTypeDef[]> => {
    type values = {
      id: EnumValueTypeDefID
    }

    const ctx = this._ctx.select("values").select("id")

    const response: Awaited<values[]> = await ctx.execute()

    return response.map(
      (r) =>
        new EnumValueTypeDef(
          new Context(
            [
              {
                operation: "loadEnumValueTypeDefFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }
}

/**
 * A definition of a value in a custom enum defined in a Module.
 */
export class EnumValueTypeDef extends BaseClient {
  private readonly _id?: EnumValueTypeDefID = undefined
  private readonly _description?: string = undefined
  private readonly _name?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: EnumValueTypeDefID,
    _description?: string,
    _name?: string,
  ) {
    super(ctx)

    this._id = _id
    this._description = _description
    this._name = _name
  }

  /**
   * A unique identifier for this EnumValueTypeDef.
   */
  id = async (): Promise<EnumValueTypeDefID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<EnumValueTypeDefID> = await ctx.execute()

    return response
  }

  /**
   * A doc string for the enum value, if any.
   */
  description = async (): Promise<string> => {
    if (this._description) {
      return this._description
    }

    const ctx = this._ctx.select("description")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The name of the enum value.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The location of this enum value declaration.
   */
  sourceMap = (): SourceMap => {
    const ctx = this._ctx.select("sourceMap")
    return new SourceMap(ctx)
  }
}

/**
 * An environment variable name and value.
 */
export class EnvVariable extends BaseClient {
  private readonly _id?: EnvVariableID = undefined
  private readonly _name?: string = undefined
  private readonly _value?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: EnvVariableID,
    _name?: string,
    _value?: string,
  ) {
    super(ctx)

    this._id = _id
    this._name = _name
    this._value = _value
  }

  /**
   * A unique identifier for this EnvVariable.
   */
  id = async (): Promise<EnvVariableID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<EnvVariableID> = await ctx.execute()

    return response
  }

  /**
   * The environment variable name.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The environment variable value.
   */
  value = async (): Promise<string> => {
    if (this._value) {
      return this._value
    }

    const ctx = this._ctx.select("value")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

export class Error extends BaseClient {
  private readonly _id?: ErrorID = undefined
  private readonly _message?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: ErrorID, _message?: string) {
    super(ctx)

    this._id = _id
    this._message = _message
  }

  /**
   * A unique identifier for this Error.
   */
  id = async (): Promise<ErrorID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<ErrorID> = await ctx.execute()

    return response
  }

  /**
   * A description of the error.
   */
  message = async (): Promise<string> => {
    if (this._message) {
      return this._message
    }

    const ctx = this._ctx.select("message")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

/**
 * A definition of a field on a custom object defined in a Module.
 *
 * A field on an object has a static value, as opposed to a function on an object whose value is computed by invoking code (and can accept arguments).
 */
export class FieldTypeDef extends BaseClient {
  private readonly _id?: FieldTypeDefID = undefined
  private readonly _description?: string = undefined
  private readonly _name?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: FieldTypeDefID,
    _description?: string,
    _name?: string,
  ) {
    super(ctx)

    this._id = _id
    this._description = _description
    this._name = _name
  }

  /**
   * A unique identifier for this FieldTypeDef.
   */
  id = async (): Promise<FieldTypeDefID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<FieldTypeDefID> = await ctx.execute()

    return response
  }

  /**
   * A doc string for the field, if any.
   */
  description = async (): Promise<string> => {
    if (this._description) {
      return this._description
    }

    const ctx = this._ctx.select("description")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The name of the field in lowerCamelCase format.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The location of this field declaration.
   */
  sourceMap = (): SourceMap => {
    const ctx = this._ctx.select("sourceMap")
    return new SourceMap(ctx)
  }

  /**
   * The type of the field.
   */
  typeDef = (): TypeDef => {
    const ctx = this._ctx.select("typeDef")
    return new TypeDef(ctx)
  }
}

/**
 * A file.
 */
export class File extends BaseClient {
  private readonly _id?: FileID = undefined
  private readonly _contents?: string = undefined
  private readonly _digest?: string = undefined
  private readonly _export?: string = undefined
  private readonly _name?: string = undefined
  private readonly _size?: number = undefined
  private readonly _sync?: FileID = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: FileID,
    _contents?: string,
    _digest?: string,
    _export?: string,
    _name?: string,
    _size?: number,
    _sync?: FileID,
  ) {
    super(ctx)

    this._id = _id
    this._contents = _contents
    this._digest = _digest
    this._export = _export
    this._name = _name
    this._size = _size
    this._sync = _sync
  }

  /**
   * A unique identifier for this File.
   */
  id = async (): Promise<FileID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<FileID> = await ctx.execute()

    return response
  }

  /**
   * Retrieves the contents of the file.
   */
  contents = async (): Promise<string> => {
    if (this._contents) {
      return this._contents
    }

    const ctx = this._ctx.select("contents")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Return the file's digest. The format of the digest is not guaranteed to be stable between releases of Dagger. It is guaranteed to be stable between invocations of the same Dagger engine.
   * @param opts.excludeMetadata If true, exclude metadata from the digest.
   */
  digest = async (opts?: FileDigestOpts): Promise<string> => {
    if (this._digest) {
      return this._digest
    }

    const ctx = this._ctx.select("digest", { ...opts })

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Writes the file to a file path on the host.
   * @param path Location of the written directory (e.g., "output.txt").
   * @param opts.allowParentDirPath If allowParentDirPath is true, the path argument can be a directory path, in which case the file will be created in that directory.
   */
  export = async (path: string, opts?: FileExportOpts): Promise<string> => {
    if (this._export) {
      return this._export
    }

    const ctx = this._ctx.select("export", { path, ...opts })

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieves the name of the file.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieves the size of the file, in bytes.
   */
  size = async (): Promise<number> => {
    if (this._size) {
      return this._size
    }

    const ctx = this._ctx.select("size")

    const response: Awaited<number> = await ctx.execute()

    return response
  }

  /**
   * Force evaluation in the engine.
   */
  sync = async (): Promise<File> => {
    const ctx = this._ctx.select("sync")

    const response: Awaited<FileID> = await ctx.execute()

    return new File(
      new Context(
        [
          {
            operation: "loadFileFromID",
            args: { id: response },
          },
        ],
        this._ctx.getConnection(),
      ),
    )
  }

  /**
   * Retrieves this file with its name set to the given name.
   * @param name Name to set file to.
   */
  withName = (name: string): File => {
    const ctx = this._ctx.select("withName", { name })
    return new File(ctx)
  }

  /**
   * Retrieves this file with its created/modified timestamps set to the given time.
   * @param timestamp Timestamp to set dir/files in.
   *
   * Formatted in seconds following Unix epoch (e.g., 1672531199).
   */
  withTimestamps = (timestamp: number): File => {
    const ctx = this._ctx.select("withTimestamps", { timestamp })
    return new File(ctx)
  }

  /**
   * Call the provided function with current File.
   *
   * This is useful for reusability and readability by not breaking the calling chain.
   */
  with = (arg: (param: File) => File) => {
    return arg(this)
  }
}

/**
 * Function represents a resolver provided by a Module.
 *
 * A function always evaluates against a parent object and is given a set of named arguments.
 */
export class Function_ extends BaseClient {
  private readonly _id?: FunctionID = undefined
  private readonly _description?: string = undefined
  private readonly _name?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: FunctionID,
    _description?: string,
    _name?: string,
  ) {
    super(ctx)

    this._id = _id
    this._description = _description
    this._name = _name
  }

  /**
   * A unique identifier for this Function.
   */
  id = async (): Promise<FunctionID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<FunctionID> = await ctx.execute()

    return response
  }

  /**
   * Arguments accepted by the function, if any.
   */
  args = async (): Promise<FunctionArg[]> => {
    type args = {
      id: FunctionArgID
    }

    const ctx = this._ctx.select("args").select("id")

    const response: Awaited<args[]> = await ctx.execute()

    return response.map(
      (r) =>
        new FunctionArg(
          new Context(
            [
              {
                operation: "loadFunctionArgFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * A doc string for the function, if any.
   */
  description = async (): Promise<string> => {
    if (this._description) {
      return this._description
    }

    const ctx = this._ctx.select("description")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The name of the function.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The type returned by the function.
   */
  returnType = (): TypeDef => {
    const ctx = this._ctx.select("returnType")
    return new TypeDef(ctx)
  }

  /**
   * The location of this function declaration.
   */
  sourceMap = (): SourceMap => {
    const ctx = this._ctx.select("sourceMap")
    return new SourceMap(ctx)
  }

  /**
   * Returns the function with the provided argument
   * @param name The name of the argument
   * @param typeDef The type of the argument
   * @param opts.description A doc string for the argument, if any
   * @param opts.defaultValue A default value to use for this argument if not explicitly set by the caller, if any
   * @param opts.defaultPath If the argument is a Directory or File type, default to load path from context directory, relative to root directory.
   * @param opts.ignore Patterns to ignore when loading the contextual argument value.
   */
  withArg = (
    name: string,
    typeDef: TypeDef,
    opts?: FunctionWithArgOpts,
  ): Function_ => {
    const ctx = this._ctx.select("withArg", { name, typeDef, ...opts })
    return new Function_(ctx)
  }

  /**
   * Returns the function with the given doc string.
   * @param description The doc string to set.
   */
  withDescription = (description: string): Function_ => {
    const ctx = this._ctx.select("withDescription", { description })
    return new Function_(ctx)
  }

  /**
   * Returns the function with the given source map.
   * @param sourceMap The source map for the function definition.
   */
  withSourceMap = (sourceMap: SourceMap): Function_ => {
    const ctx = this._ctx.select("withSourceMap", { sourceMap })
    return new Function_(ctx)
  }

  /**
   * Call the provided function with current Function.
   *
   * This is useful for reusability and readability by not breaking the calling chain.
   */
  with = (arg: (param: Function_) => Function_) => {
    return arg(this)
  }
}

/**
 * An argument accepted by a function.
 *
 * This is a specification for an argument at function definition time, not an argument passed at function call time.
 */
export class FunctionArg extends BaseClient {
  private readonly _id?: FunctionArgID = undefined
  private readonly _defaultPath?: string = undefined
  private readonly _defaultValue?: JSON = undefined
  private readonly _description?: string = undefined
  private readonly _name?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: FunctionArgID,
    _defaultPath?: string,
    _defaultValue?: JSON,
    _description?: string,
    _name?: string,
  ) {
    super(ctx)

    this._id = _id
    this._defaultPath = _defaultPath
    this._defaultValue = _defaultValue
    this._description = _description
    this._name = _name
  }

  /**
   * A unique identifier for this FunctionArg.
   */
  id = async (): Promise<FunctionArgID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<FunctionArgID> = await ctx.execute()

    return response
  }

  /**
   * Only applies to arguments of type File or Directory. If the argument is not set, load it from the given path in the context directory
   */
  defaultPath = async (): Promise<string> => {
    if (this._defaultPath) {
      return this._defaultPath
    }

    const ctx = this._ctx.select("defaultPath")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * A default value to use for this argument when not explicitly set by the caller, if any.
   */
  defaultValue = async (): Promise<JSON> => {
    if (this._defaultValue) {
      return this._defaultValue
    }

    const ctx = this._ctx.select("defaultValue")

    const response: Awaited<JSON> = await ctx.execute()

    return response
  }

  /**
   * A doc string for the argument, if any.
   */
  description = async (): Promise<string> => {
    if (this._description) {
      return this._description
    }

    const ctx = this._ctx.select("description")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Only applies to arguments of type Directory. The ignore patterns are applied to the input directory, and matching entries are filtered out, in a cache-efficient manner.
   */
  ignore = async (): Promise<string[]> => {
    const ctx = this._ctx.select("ignore")

    const response: Awaited<string[]> = await ctx.execute()

    return response
  }

  /**
   * The name of the argument in lowerCamelCase format.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The location of this arg declaration.
   */
  sourceMap = (): SourceMap => {
    const ctx = this._ctx.select("sourceMap")
    return new SourceMap(ctx)
  }

  /**
   * The type of the argument.
   */
  typeDef = (): TypeDef => {
    const ctx = this._ctx.select("typeDef")
    return new TypeDef(ctx)
  }
}

/**
 * An active function call.
 */
export class FunctionCall extends BaseClient {
  private readonly _id?: FunctionCallID = undefined
  private readonly _name?: string = undefined
  private readonly _parent?: JSON = undefined
  private readonly _parentName?: string = undefined
  private readonly _returnError?: Void = undefined
  private readonly _returnValue?: Void = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: FunctionCallID,
    _name?: string,
    _parent?: JSON,
    _parentName?: string,
    _returnError?: Void,
    _returnValue?: Void,
  ) {
    super(ctx)

    this._id = _id
    this._name = _name
    this._parent = _parent
    this._parentName = _parentName
    this._returnError = _returnError
    this._returnValue = _returnValue
  }

  /**
   * A unique identifier for this FunctionCall.
   */
  id = async (): Promise<FunctionCallID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<FunctionCallID> = await ctx.execute()

    return response
  }

  /**
   * The argument values the function is being invoked with.
   */
  inputArgs = async (): Promise<FunctionCallArgValue[]> => {
    type inputArgs = {
      id: FunctionCallArgValueID
    }

    const ctx = this._ctx.select("inputArgs").select("id")

    const response: Awaited<inputArgs[]> = await ctx.execute()

    return response.map(
      (r) =>
        new FunctionCallArgValue(
          new Context(
            [
              {
                operation: "loadFunctionCallArgValueFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The name of the function being called.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The value of the parent object of the function being called. If the function is top-level to the module, this is always an empty object.
   */
  parent = async (): Promise<JSON> => {
    if (this._parent) {
      return this._parent
    }

    const ctx = this._ctx.select("parent")

    const response: Awaited<JSON> = await ctx.execute()

    return response
  }

  /**
   * The name of the parent object of the function being called. If the function is top-level to the module, this is the name of the module.
   */
  parentName = async (): Promise<string> => {
    if (this._parentName) {
      return this._parentName
    }

    const ctx = this._ctx.select("parentName")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Return an error from the function.
   * @param error The error to return.
   */
  returnError = async (error: Error): Promise<void> => {
    if (this._returnError) {
      return
    }

    const ctx = this._ctx.select("returnError", { error })

    await ctx.execute()
  }

  /**
   * Set the return value of the function call to the provided value.
   * @param value JSON serialization of the return value.
   */
  returnValue = async (value: JSON): Promise<void> => {
    if (this._returnValue) {
      return
    }

    const ctx = this._ctx.select("returnValue", { value })

    await ctx.execute()
  }
}

/**
 * A value passed as a named argument to a function call.
 */
export class FunctionCallArgValue extends BaseClient {
  private readonly _id?: FunctionCallArgValueID = undefined
  private readonly _name?: string = undefined
  private readonly _value?: JSON = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: FunctionCallArgValueID,
    _name?: string,
    _value?: JSON,
  ) {
    super(ctx)

    this._id = _id
    this._name = _name
    this._value = _value
  }

  /**
   * A unique identifier for this FunctionCallArgValue.
   */
  id = async (): Promise<FunctionCallArgValueID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<FunctionCallArgValueID> = await ctx.execute()

    return response
  }

  /**
   * The name of the argument.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The value of the argument represented as a JSON serialized string.
   */
  value = async (): Promise<JSON> => {
    if (this._value) {
      return this._value
    }

    const ctx = this._ctx.select("value")

    const response: Awaited<JSON> = await ctx.execute()

    return response
  }
}

/**
 * The result of running an SDK's codegen.
 */
export class GeneratedCode extends BaseClient {
  private readonly _id?: GeneratedCodeID = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: GeneratedCodeID) {
    super(ctx)

    this._id = _id
  }

  /**
   * A unique identifier for this GeneratedCode.
   */
  id = async (): Promise<GeneratedCodeID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<GeneratedCodeID> = await ctx.execute()

    return response
  }

  /**
   * The directory containing the generated code.
   */
  code = (): Directory => {
    const ctx = this._ctx.select("code")
    return new Directory(ctx)
  }

  /**
   * List of paths to mark generated in version control (i.e. .gitattributes).
   */
  vcsGeneratedPaths = async (): Promise<string[]> => {
    const ctx = this._ctx.select("vcsGeneratedPaths")

    const response: Awaited<string[]> = await ctx.execute()

    return response
  }

  /**
   * List of paths to ignore in version control (i.e. .gitignore).
   */
  vcsIgnoredPaths = async (): Promise<string[]> => {
    const ctx = this._ctx.select("vcsIgnoredPaths")

    const response: Awaited<string[]> = await ctx.execute()

    return response
  }

  /**
   * Set the list of paths to mark generated in version control.
   */
  withVCSGeneratedPaths = (paths: string[]): GeneratedCode => {
    const ctx = this._ctx.select("withVCSGeneratedPaths", { paths })
    return new GeneratedCode(ctx)
  }

  /**
   * Set the list of paths to ignore in version control.
   */
  withVCSIgnoredPaths = (paths: string[]): GeneratedCode => {
    const ctx = this._ctx.select("withVCSIgnoredPaths", { paths })
    return new GeneratedCode(ctx)
  }

  /**
   * Call the provided function with current GeneratedCode.
   *
   * This is useful for reusability and readability by not breaking the calling chain.
   */
  with = (arg: (param: GeneratedCode) => GeneratedCode) => {
    return arg(this)
  }
}

/**
 * Module source originating from a git repo.
 */
export class GitModuleSource extends BaseClient {
  private readonly _id?: GitModuleSourceID = undefined
  private readonly _cloneRef?: string = undefined
  private readonly _commit?: string = undefined
  private readonly _htmlRepoURL?: string = undefined
  private readonly _htmlURL?: string = undefined
  private readonly _root?: string = undefined
  private readonly _rootSubpath?: string = undefined
  private readonly _version?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: GitModuleSourceID,
    _cloneRef?: string,
    _commit?: string,
    _htmlRepoURL?: string,
    _htmlURL?: string,
    _root?: string,
    _rootSubpath?: string,
    _version?: string,
  ) {
    super(ctx)

    this._id = _id
    this._cloneRef = _cloneRef
    this._commit = _commit
    this._htmlRepoURL = _htmlRepoURL
    this._htmlURL = _htmlURL
    this._root = _root
    this._rootSubpath = _rootSubpath
    this._version = _version
  }

  /**
   * A unique identifier for this GitModuleSource.
   */
  id = async (): Promise<GitModuleSourceID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<GitModuleSourceID> = await ctx.execute()

    return response
  }

  /**
   * The ref to clone the root of the git repo from
   */
  cloneRef = async (): Promise<string> => {
    if (this._cloneRef) {
      return this._cloneRef
    }

    const ctx = this._ctx.select("cloneRef")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The resolved commit of the git repo this source points to.
   */
  commit = async (): Promise<string> => {
    if (this._commit) {
      return this._commit
    }

    const ctx = this._ctx.select("commit")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The directory containing everything needed to load load and use the module.
   */
  contextDirectory = (): Directory => {
    const ctx = this._ctx.select("contextDirectory")
    return new Directory(ctx)
  }

  /**
   * The URL to access the web view of the repository (e.g., GitHub, GitLab, Bitbucket)
   */
  htmlRepoURL = async (): Promise<string> => {
    if (this._htmlRepoURL) {
      return this._htmlRepoURL
    }

    const ctx = this._ctx.select("htmlRepoURL")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The URL to the source's git repo in a web browser
   */
  htmlURL = async (): Promise<string> => {
    if (this._htmlURL) {
      return this._htmlURL
    }

    const ctx = this._ctx.select("htmlURL")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The clean module name of the root of the module
   */
  root = async (): Promise<string> => {
    if (this._root) {
      return this._root
    }

    const ctx = this._ctx.select("root")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The path to the root of the module source under the context directory. This directory contains its configuration file. It also contains its source code (possibly as a subdirectory).
   */
  rootSubpath = async (): Promise<string> => {
    if (this._rootSubpath) {
      return this._rootSubpath
    }

    const ctx = this._ctx.select("rootSubpath")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The specified version of the git repo this source points to.
   */
  version = async (): Promise<string> => {
    if (this._version) {
      return this._version
    }

    const ctx = this._ctx.select("version")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

/**
 * A git ref (tag, branch, or commit).
 */
export class GitRef extends BaseClient {
  private readonly _id?: GitRefID = undefined
  private readonly _commit?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: GitRefID, _commit?: string) {
    super(ctx)

    this._id = _id
    this._commit = _commit
  }

  /**
   * A unique identifier for this GitRef.
   */
  id = async (): Promise<GitRefID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<GitRefID> = await ctx.execute()

    return response
  }

  /**
   * The resolved commit id at this ref.
   */
  commit = async (): Promise<string> => {
    if (this._commit) {
      return this._commit
    }

    const ctx = this._ctx.select("commit")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The filesystem tree at this ref.
   * @param opts.discardGitDir Set to true to discard .git directory.
   */
  tree = (opts?: GitRefTreeOpts): Directory => {
    const ctx = this._ctx.select("tree", { ...opts })
    return new Directory(ctx)
  }
}

/**
 * A git repository.
 */
export class GitRepository extends BaseClient {
  private readonly _id?: GitRepositoryID = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: GitRepositoryID) {
    super(ctx)

    this._id = _id
  }

  /**
   * A unique identifier for this GitRepository.
   */
  id = async (): Promise<GitRepositoryID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<GitRepositoryID> = await ctx.execute()

    return response
  }

  /**
   * Returns details of a branch.
   * @param name Branch's name (e.g., "main").
   */
  branch = (name: string): GitRef => {
    const ctx = this._ctx.select("branch", { name })
    return new GitRef(ctx)
  }

  /**
   * Returns details of a commit.
   * @param id Identifier of the commit (e.g., "b6315d8f2810962c601af73f86831f6866ea798b").
   */
  commit = (id: string): GitRef => {
    const ctx = this._ctx.select("commit", { id })
    return new GitRef(ctx)
  }

  /**
   * Returns details for HEAD.
   */
  head = (): GitRef => {
    const ctx = this._ctx.select("head")
    return new GitRef(ctx)
  }

  /**
   * Returns details of a ref.
   * @param name Ref's name (can be a commit identifier, a tag name, a branch name, or a fully-qualified ref).
   */
  ref = (name: string): GitRef => {
    const ctx = this._ctx.select("ref", { name })
    return new GitRef(ctx)
  }

  /**
   * Returns details of a tag.
   * @param name Tag's name (e.g., "v0.3.9").
   */
  tag = (name: string): GitRef => {
    const ctx = this._ctx.select("tag", { name })
    return new GitRef(ctx)
  }

  /**
   * tags that match any of the given glob patterns.
   * @param opts.patterns Glob patterns (e.g., "refs/tags/v*").
   */
  tags = async (opts?: GitRepositoryTagsOpts): Promise<string[]> => {
    const ctx = this._ctx.select("tags", { ...opts })

    const response: Awaited<string[]> = await ctx.execute()

    return response
  }

  /**
   * Header to authenticate the remote with.
   * @param header Secret used to populate the Authorization HTTP header
   */
  withAuthHeader = (header: Secret): GitRepository => {
    const ctx = this._ctx.select("withAuthHeader", { header })
    return new GitRepository(ctx)
  }

  /**
   * Token to authenticate the remote with.
   * @param token Secret used to populate the password during basic HTTP Authorization
   */
  withAuthToken = (token: Secret): GitRepository => {
    const ctx = this._ctx.select("withAuthToken", { token })
    return new GitRepository(ctx)
  }

  /**
   * Call the provided function with current GitRepository.
   *
   * This is useful for reusability and readability by not breaking the calling chain.
   */
  with = (arg: (param: GitRepository) => GitRepository) => {
    return arg(this)
  }
}

/**
 * Information about the host environment.
 */
export class Host extends BaseClient {
  private readonly _id?: HostID = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: HostID) {
    super(ctx)

    this._id = _id
  }

  /**
   * A unique identifier for this Host.
   */
  id = async (): Promise<HostID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<HostID> = await ctx.execute()

    return response
  }

  /**
   * Accesses a directory on the host.
   * @param path Location of the directory to access (e.g., ".").
   * @param opts.exclude Exclude artifacts that match the given pattern (e.g., ["node_modules/", ".git*"]).
   * @param opts.include Include only artifacts that match the given pattern (e.g., ["app/", "package.*"]).
   */
  directory = (path: string, opts?: HostDirectoryOpts): Directory => {
    const ctx = this._ctx.select("directory", { path, ...opts })
    return new Directory(ctx)
  }

  /**
   * Accesses a file on the host.
   * @param path Location of the file to retrieve (e.g., "README.md").
   */
  file = (path: string): File => {
    const ctx = this._ctx.select("file", { path })
    return new File(ctx)
  }

  /**
   * Creates a service that forwards traffic to a specified address via the host.
   * @param opts.host Upstream host to forward traffic to.
   * @param opts.ports Ports to expose via the service, forwarding through the host network.
   *
   * If a port's frontend is unspecified or 0, it defaults to the same as the backend port.
   *
   * An empty set of ports is not valid; an error will be returned.
   */
  service = (opts?: HostServiceOpts): Service => {
    const ctx = this._ctx.select("service", { ...opts })
    return new Service(ctx)
  }

  /**
   * Sets a secret given a user-defined name and the file path on the host, and returns the secret.
   *
   * The file is limited to a size of 512000 bytes.
   * @param name The user defined name for this secret.
   * @param path Location of the file to set as a secret.
   */
  setSecretFile = (name: string, path: string): Secret => {
    const ctx = this._ctx.select("setSecretFile", { name, path })
    return new Secret(ctx)
  }

  /**
   * Creates a tunnel that forwards traffic from the host to a service.
   * @param service Service to send traffic from the tunnel.
   * @param opts.ports Configure explicit port forwarding rules for the tunnel.
   *
   * If a port's frontend is unspecified or 0, a random port will be chosen by the host.
   *
   * If no ports are given, all of the service's ports are forwarded. If native is true, each port maps to the same port on the host. If native is false, each port maps to a random port chosen by the host.
   *
   * If ports are given and native is true, the ports are additive.
   * @param opts.native Map each service port to the same port on the host, as if the service were running natively.
   *
   * Note: enabling may result in port conflicts.
   */
  tunnel = (service: Service, opts?: HostTunnelOpts): Service => {
    const ctx = this._ctx.select("tunnel", { service, ...opts })
    return new Service(ctx)
  }

  /**
   * Accesses a Unix socket on the host.
   * @param path Location of the Unix socket (e.g., "/var/run/docker.sock").
   */
  unixSocket = (path: string): Socket => {
    const ctx = this._ctx.select("unixSocket", { path })
    return new Socket(ctx)
  }
}

/**
 * A graphql input type, which is essentially just a group of named args.
 * This is currently only used to represent pre-existing usage of graphql input types
 * in the core API. It is not used by user modules and shouldn't ever be as user
 * module accept input objects via their id rather than graphql input types.
 */
export class InputTypeDef extends BaseClient {
  private readonly _id?: InputTypeDefID = undefined
  private readonly _name?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: InputTypeDefID, _name?: string) {
    super(ctx)

    this._id = _id
    this._name = _name
  }

  /**
   * A unique identifier for this InputTypeDef.
   */
  id = async (): Promise<InputTypeDefID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<InputTypeDefID> = await ctx.execute()

    return response
  }

  /**
   * Static fields defined on this input object, if any.
   */
  fields = async (): Promise<FieldTypeDef[]> => {
    type fields = {
      id: FieldTypeDefID
    }

    const ctx = this._ctx.select("fields").select("id")

    const response: Awaited<fields[]> = await ctx.execute()

    return response.map(
      (r) =>
        new FieldTypeDef(
          new Context(
            [
              {
                operation: "loadFieldTypeDefFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The name of the input object.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

/**
 * A definition of a custom interface defined in a Module.
 */
export class InterfaceTypeDef extends BaseClient {
  private readonly _id?: InterfaceTypeDefID = undefined
  private readonly _description?: string = undefined
  private readonly _name?: string = undefined
  private readonly _sourceModuleName?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: InterfaceTypeDefID,
    _description?: string,
    _name?: string,
    _sourceModuleName?: string,
  ) {
    super(ctx)

    this._id = _id
    this._description = _description
    this._name = _name
    this._sourceModuleName = _sourceModuleName
  }

  /**
   * A unique identifier for this InterfaceTypeDef.
   */
  id = async (): Promise<InterfaceTypeDefID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<InterfaceTypeDefID> = await ctx.execute()

    return response
  }

  /**
   * The doc string for the interface, if any.
   */
  description = async (): Promise<string> => {
    if (this._description) {
      return this._description
    }

    const ctx = this._ctx.select("description")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Functions defined on this interface, if any.
   */
  functions = async (): Promise<Function_[]> => {
    type functions = {
      id: FunctionID
    }

    const ctx = this._ctx.select("functions").select("id")

    const response: Awaited<functions[]> = await ctx.execute()

    return response.map(
      (r) =>
        new Function_(
          new Context(
            [
              {
                operation: "loadFunction_FromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The name of the interface.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The location of this interface declaration.
   */
  sourceMap = (): SourceMap => {
    const ctx = this._ctx.select("sourceMap")
    return new SourceMap(ctx)
  }

  /**
   * If this InterfaceTypeDef is associated with a Module, the name of the module. Unset otherwise.
   */
  sourceModuleName = async (): Promise<string> => {
    if (this._sourceModuleName) {
      return this._sourceModuleName
    }

    const ctx = this._ctx.select("sourceModuleName")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

/**
 * A simple key value object that represents a label.
 */
export class Label extends BaseClient {
  private readonly _id?: LabelID = undefined
  private readonly _name?: string = undefined
  private readonly _value?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: LabelID, _name?: string, _value?: string) {
    super(ctx)

    this._id = _id
    this._name = _name
    this._value = _value
  }

  /**
   * A unique identifier for this Label.
   */
  id = async (): Promise<LabelID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<LabelID> = await ctx.execute()

    return response
  }

  /**
   * The label name.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The label value.
   */
  value = async (): Promise<string> => {
    if (this._value) {
      return this._value
    }

    const ctx = this._ctx.select("value")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

/**
 * A definition of a list type in a Module.
 */
export class ListTypeDef extends BaseClient {
  private readonly _id?: ListTypeDefID = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: ListTypeDefID) {
    super(ctx)

    this._id = _id
  }

  /**
   * A unique identifier for this ListTypeDef.
   */
  id = async (): Promise<ListTypeDefID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<ListTypeDefID> = await ctx.execute()

    return response
  }

  /**
   * The type of the elements in the list.
   */
  elementTypeDef = (): TypeDef => {
    const ctx = this._ctx.select("elementTypeDef")
    return new TypeDef(ctx)
  }
}

/**
 * Module source that that originates from a path locally relative to an arbitrary directory.
 */
export class LocalModuleSource extends BaseClient {
  private readonly _id?: LocalModuleSourceID = undefined
  private readonly _relHostPath?: string = undefined
  private readonly _rootSubpath?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: LocalModuleSourceID,
    _relHostPath?: string,
    _rootSubpath?: string,
  ) {
    super(ctx)

    this._id = _id
    this._relHostPath = _relHostPath
    this._rootSubpath = _rootSubpath
  }

  /**
   * A unique identifier for this LocalModuleSource.
   */
  id = async (): Promise<LocalModuleSourceID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<LocalModuleSourceID> = await ctx.execute()

    return response
  }

  /**
   * The directory containing everything needed to load load and use the module.
   */
  contextDirectory = (): Directory => {
    const ctx = this._ctx.select("contextDirectory")
    return new Directory(ctx)
  }

  /**
   * The relative path to the module root from the host directory
   */
  relHostPath = async (): Promise<string> => {
    if (this._relHostPath) {
      return this._relHostPath
    }

    const ctx = this._ctx.select("relHostPath")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The path to the root of the module source under the context directory. This directory contains its configuration file. It also contains its source code (possibly as a subdirectory).
   */
  rootSubpath = async (): Promise<string> => {
    if (this._rootSubpath) {
      return this._rootSubpath
    }

    const ctx = this._ctx.select("rootSubpath")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

/**
 * A Dagger module.
 */
export class Module_ extends BaseClient {
  private readonly _id?: ModuleID = undefined
  private readonly _description?: string = undefined
  private readonly _name?: string = undefined
  private readonly _sdk?: string = undefined
  private readonly _serve?: Void = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: ModuleID,
    _description?: string,
    _name?: string,
    _sdk?: string,
    _serve?: Void,
  ) {
    super(ctx)

    this._id = _id
    this._description = _description
    this._name = _name
    this._sdk = _sdk
    this._serve = _serve
  }

  /**
   * A unique identifier for this Module.
   */
  id = async (): Promise<ModuleID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<ModuleID> = await ctx.execute()

    return response
  }

  /**
   * Modules used by this module.
   */
  dependencies = async (): Promise<Module_[]> => {
    type dependencies = {
      id: ModuleID
    }

    const ctx = this._ctx.select("dependencies").select("id")

    const response: Awaited<dependencies[]> = await ctx.execute()

    return response.map(
      (r) =>
        new Module_(
          new Context(
            [
              {
                operation: "loadModule_FromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The dependencies as configured by the module.
   */
  dependencyConfig = async (): Promise<ModuleDependency[]> => {
    type dependencyConfig = {
      id: ModuleDependencyID
    }

    const ctx = this._ctx.select("dependencyConfig").select("id")

    const response: Awaited<dependencyConfig[]> = await ctx.execute()

    return response.map(
      (r) =>
        new ModuleDependency(
          new Context(
            [
              {
                operation: "loadModuleDependencyFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The doc string of the module, if any
   */
  description = async (): Promise<string> => {
    if (this._description) {
      return this._description
    }

    const ctx = this._ctx.select("description")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Enumerations served by this module.
   */
  enums = async (): Promise<TypeDef[]> => {
    type enums = {
      id: TypeDefID
    }

    const ctx = this._ctx.select("enums").select("id")

    const response: Awaited<enums[]> = await ctx.execute()

    return response.map(
      (r) =>
        new TypeDef(
          new Context(
            [
              {
                operation: "loadTypeDefFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The generated files and directories made on top of the module source's context directory.
   */
  generatedContextDiff = (): Directory => {
    const ctx = this._ctx.select("generatedContextDiff")
    return new Directory(ctx)
  }

  /**
   * The module source's context plus any configuration and source files created by codegen.
   */
  generatedContextDirectory = (): Directory => {
    const ctx = this._ctx.select("generatedContextDirectory")
    return new Directory(ctx)
  }

  /**
   * Retrieves the module with the objects loaded via its SDK.
   */
  initialize = (): Module_ => {
    const ctx = this._ctx.select("initialize")
    return new Module_(ctx)
  }

  /**
   * Interfaces served by this module.
   */
  interfaces = async (): Promise<TypeDef[]> => {
    type interfaces = {
      id: TypeDefID
    }

    const ctx = this._ctx.select("interfaces").select("id")

    const response: Awaited<interfaces[]> = await ctx.execute()

    return response.map(
      (r) =>
        new TypeDef(
          new Context(
            [
              {
                operation: "loadTypeDefFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The name of the module
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Objects served by this module.
   */
  objects = async (): Promise<TypeDef[]> => {
    type objects = {
      id: TypeDefID
    }

    const ctx = this._ctx.select("objects").select("id")

    const response: Awaited<objects[]> = await ctx.execute()

    return response.map(
      (r) =>
        new TypeDef(
          new Context(
            [
              {
                operation: "loadTypeDefFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The container that runs the module's entrypoint. It will fail to execute if the module doesn't compile.
   */
  runtime = (): Container => {
    const ctx = this._ctx.select("runtime")
    return new Container(ctx)
  }

  /**
   * The SDK used by this module. Either a name of a builtin SDK or a module source ref string pointing to the SDK's implementation.
   */
  sdk = async (): Promise<string> => {
    if (this._sdk) {
      return this._sdk
    }

    const ctx = this._ctx.select("sdk")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Serve a module's API in the current session.
   *
   * Note: this can only be called once per session. In the future, it could return a stream or service to remove the side effect.
   */
  serve = async (): Promise<void> => {
    if (this._serve) {
      return
    }

    const ctx = this._ctx.select("serve")

    await ctx.execute()
  }

  /**
   * The source for the module.
   */
  source = (): ModuleSource => {
    const ctx = this._ctx.select("source")
    return new ModuleSource(ctx)
  }

  /**
   * Retrieves the module with the given description
   * @param description The description to set
   */
  withDescription = (description: string): Module_ => {
    const ctx = this._ctx.select("withDescription", { description })
    return new Module_(ctx)
  }

  /**
   * This module plus the given Enum type and associated values
   */
  withEnum = (enum_: TypeDef): Module_ => {
    const ctx = this._ctx.select("withEnum", {
      enum: enum_,
    })
    return new Module_(ctx)
  }

  /**
   * This module plus the given Interface type and associated functions
   */
  withInterface = (iface: TypeDef): Module_ => {
    const ctx = this._ctx.select("withInterface", { iface })
    return new Module_(ctx)
  }

  /**
   * This module plus the given Object type and associated functions.
   */
  withObject = (object: TypeDef): Module_ => {
    const ctx = this._ctx.select("withObject", { object })
    return new Module_(ctx)
  }

  /**
   * Retrieves the module with basic configuration loaded if present.
   * @param source The module source to initialize from.
   * @param opts.engineVersion The engine version to upgrade to.
   */
  withSource = (source: ModuleSource, opts?: ModuleWithSourceOpts): Module_ => {
    const ctx = this._ctx.select("withSource", { source, ...opts })
    return new Module_(ctx)
  }

  /**
   * Call the provided function with current Module.
   *
   * This is useful for reusability and readability by not breaking the calling chain.
   */
  with = (arg: (param: Module_) => Module_) => {
    return arg(this)
  }
}

/**
 * The configuration of dependency of a module.
 */
export class ModuleDependency extends BaseClient {
  private readonly _id?: ModuleDependencyID = undefined
  private readonly _name?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: ModuleDependencyID, _name?: string) {
    super(ctx)

    this._id = _id
    this._name = _name
  }

  /**
   * A unique identifier for this ModuleDependency.
   */
  id = async (): Promise<ModuleDependencyID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<ModuleDependencyID> = await ctx.execute()

    return response
  }

  /**
   * The name of the dependency module.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The source for the dependency module.
   */
  source = (): ModuleSource => {
    const ctx = this._ctx.select("source")
    return new ModuleSource(ctx)
  }
}

/**
 * The source needed to load and run a module, along with any metadata about the source such as versions/urls/etc.
 */
export class ModuleSource extends BaseClient {
  private readonly _id?: ModuleSourceID = undefined
  private readonly _asString?: string = undefined
  private readonly _configExists?: boolean = undefined
  private readonly _digest?: string = undefined
  private readonly _kind?: ModuleSourceKind = undefined
  private readonly _moduleName?: string = undefined
  private readonly _moduleOriginalName?: string = undefined
  private readonly _pin?: string = undefined
  private readonly _resolveContextPathFromCaller?: string = undefined
  private readonly _sourceRootSubpath?: string = undefined
  private readonly _sourceSubpath?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: ModuleSourceID,
    _asString?: string,
    _configExists?: boolean,
    _digest?: string,
    _kind?: ModuleSourceKind,
    _moduleName?: string,
    _moduleOriginalName?: string,
    _pin?: string,
    _resolveContextPathFromCaller?: string,
    _sourceRootSubpath?: string,
    _sourceSubpath?: string,
  ) {
    super(ctx)

    this._id = _id
    this._asString = _asString
    this._configExists = _configExists
    this._digest = _digest
    this._kind = _kind
    this._moduleName = _moduleName
    this._moduleOriginalName = _moduleOriginalName
    this._pin = _pin
    this._resolveContextPathFromCaller = _resolveContextPathFromCaller
    this._sourceRootSubpath = _sourceRootSubpath
    this._sourceSubpath = _sourceSubpath
  }

  /**
   * A unique identifier for this ModuleSource.
   */
  id = async (): Promise<ModuleSourceID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<ModuleSourceID> = await ctx.execute()

    return response
  }

  /**
   * If the source is a of kind git, the git source representation of it.
   */
  asGitSource = (): GitModuleSource => {
    const ctx = this._ctx.select("asGitSource")
    return new GitModuleSource(ctx)
  }

  /**
   * If the source is of kind local, the local source representation of it.
   */
  asLocalSource = (): LocalModuleSource => {
    const ctx = this._ctx.select("asLocalSource")
    return new LocalModuleSource(ctx)
  }

  /**
   * Load the source as a module. If this is a local source, the parent directory must have been provided during module source creation
   * @param opts.engineVersion The engine version to upgrade to.
   */
  asModule = (opts?: ModuleSourceAsModuleOpts): Module_ => {
    const ctx = this._ctx.select("asModule", { ...opts })
    return new Module_(ctx)
  }

  /**
   * A human readable ref string representation of this module source.
   */
  asString = async (): Promise<string> => {
    if (this._asString) {
      return this._asString
    }

    const ctx = this._ctx.select("asString")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Returns whether the module source has a configuration file.
   */
  configExists = async (): Promise<boolean> => {
    if (this._configExists) {
      return this._configExists
    }

    const ctx = this._ctx.select("configExists")

    const response: Awaited<boolean> = await ctx.execute()

    return response
  }

  /**
   * The directory containing everything needed to load and use the module.
   */
  contextDirectory = (): Directory => {
    const ctx = this._ctx.select("contextDirectory")
    return new Directory(ctx)
  }

  /**
   * The effective module source dependencies from the configuration, and calls to withDependencies and withoutDependencies.
   */
  dependencies = async (): Promise<ModuleDependency[]> => {
    type dependencies = {
      id: ModuleDependencyID
    }

    const ctx = this._ctx.select("dependencies").select("id")

    const response: Awaited<dependencies[]> = await ctx.execute()

    return response.map(
      (r) =>
        new ModuleDependency(
          new Context(
            [
              {
                operation: "loadModuleDependencyFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * Return the module source's content digest. The format of the digest is not guaranteed to be stable between releases of Dagger. It is guaranteed to be stable between invocations of the same Dagger engine.
   */
  digest = async (): Promise<string> => {
    if (this._digest) {
      return this._digest
    }

    const ctx = this._ctx.select("digest")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The directory containing the module configuration and source code (source code may be in a subdir).
   * @param path The path from the source directory to select.
   */
  directory = (path: string): Directory => {
    const ctx = this._ctx.select("directory", { path })
    return new Directory(ctx)
  }

  /**
   * The kind of source (e.g. local, git, etc.)
   */
  kind = async (): Promise<ModuleSourceKind> => {
    if (this._kind) {
      return this._kind
    }

    const ctx = this._ctx.select("kind")

    const response: Awaited<ModuleSourceKind> = await ctx.execute()

    return response
  }

  /**
   * If set, the name of the module this source references, including any overrides at runtime by callers.
   */
  moduleName = async (): Promise<string> => {
    if (this._moduleName) {
      return this._moduleName
    }

    const ctx = this._ctx.select("moduleName")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The original name of the module this source references, as defined in the module configuration.
   */
  moduleOriginalName = async (): Promise<string> => {
    if (this._moduleOriginalName) {
      return this._moduleOriginalName
    }

    const ctx = this._ctx.select("moduleOriginalName")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The pinned version of this module source.
   */
  pin = async (): Promise<string> => {
    if (this._pin) {
      return this._pin
    }

    const ctx = this._ctx.select("pin")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The path to the module source's context directory on the caller's filesystem. Only valid for local sources.
   */
  resolveContextPathFromCaller = async (): Promise<string> => {
    if (this._resolveContextPathFromCaller) {
      return this._resolveContextPathFromCaller
    }

    const ctx = this._ctx.select("resolveContextPathFromCaller")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Resolve the provided module source arg as a dependency relative to this module source.
   * @param dep The dependency module source to resolve.
   */
  resolveDependency = (dep: ModuleSource): ModuleSource => {
    const ctx = this._ctx.select("resolveDependency", { dep })
    return new ModuleSource(ctx)
  }

  /**
   * Load a directory from the caller optionally with a given view applied.
   * @param path The path on the caller's filesystem to load.
   * @param opts.viewName If set, the name of the view to apply to the path.
   * @param opts.ignore Patterns to ignore when loading the directory.
   */
  resolveDirectoryFromCaller = (
    path: string,
    opts?: ModuleSourceResolveDirectoryFromCallerOpts,
  ): Directory => {
    const ctx = this._ctx.select("resolveDirectoryFromCaller", {
      path,
      ...opts,
    })
    return new Directory(ctx)
  }

  /**
   * Load the source from its path on the caller's filesystem, including only needed+configured files and directories. Only valid for local sources.
   */
  resolveFromCaller = (): ModuleSource => {
    const ctx = this._ctx.select("resolveFromCaller")
    return new ModuleSource(ctx)
  }

  /**
   * The path relative to context of the root of the module source, which contains dagger.json. It also contains the module implementation source code, but that may or may not being a subdir of this root.
   */
  sourceRootSubpath = async (): Promise<string> => {
    if (this._sourceRootSubpath) {
      return this._sourceRootSubpath
    }

    const ctx = this._ctx.select("sourceRootSubpath")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The path relative to context of the module implementation source code.
   */
  sourceSubpath = async (): Promise<string> => {
    if (this._sourceSubpath) {
      return this._sourceSubpath
    }

    const ctx = this._ctx.select("sourceSubpath")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieve a named view defined for this module source.
   * @param name The name of the view to retrieve.
   */
  view = (name: string): ModuleSourceView => {
    const ctx = this._ctx.select("view", { name })
    return new ModuleSourceView(ctx)
  }

  /**
   * The named views defined for this module source, which are sets of directory filters that can be applied to directory arguments provided to functions.
   */
  views = async (): Promise<ModuleSourceView[]> => {
    type views = {
      id: ModuleSourceViewID
    }

    const ctx = this._ctx.select("views").select("id")

    const response: Awaited<views[]> = await ctx.execute()

    return response.map(
      (r) =>
        new ModuleSourceView(
          new Context(
            [
              {
                operation: "loadModuleSourceViewFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * Update the module source with a new context directory. Only valid for local sources.
   * @param dir The directory to set as the context directory.
   */
  withContextDirectory = (dir: Directory): ModuleSource => {
    const ctx = this._ctx.select("withContextDirectory", { dir })
    return new ModuleSource(ctx)
  }

  /**
   * Append the provided dependencies to the module source's dependency list.
   * @param dependencies The dependencies to append.
   */
  withDependencies = (dependencies: ModuleDependency[]): ModuleSource => {
    const ctx = this._ctx.select("withDependencies", { dependencies })
    return new ModuleSource(ctx)
  }

  /**
   * Sets module init arguments
   * @param opts.merge Merge module dependencies into the current project's
   */
  withInit = (opts?: ModuleSourceWithInitOpts): ModuleSource => {
    const ctx = this._ctx.select("withInit", { ...opts })
    return new ModuleSource(ctx)
  }

  /**
   * Update the module source with a new name.
   * @param name The name to set.
   */
  withName = (name: string): ModuleSource => {
    const ctx = this._ctx.select("withName", { name })
    return new ModuleSource(ctx)
  }

  /**
   * Update the module source with a new SDK.
   * @param sdk The SDK to set.
   */
  withSDK = (sdk: string): ModuleSource => {
    const ctx = this._ctx.select("withSDK", { sdk })
    return new ModuleSource(ctx)
  }

  /**
   * Update the module source with a new source subpath.
   * @param path The path to set as the source subpath.
   */
  withSourceSubpath = (path: string): ModuleSource => {
    const ctx = this._ctx.select("withSourceSubpath", { path })
    return new ModuleSource(ctx)
  }

  /**
   * Update the module source with a new named view.
   * @param name The name of the view to set.
   * @param patterns The patterns to set as the view filters.
   */
  withView = (name: string, patterns: string[]): ModuleSource => {
    const ctx = this._ctx.select("withView", { name, patterns })
    return new ModuleSource(ctx)
  }

  /**
   * Remove the provided dependencies from the module source's dependency list.
   * @param dependencies The dependencies to remove.
   */
  withoutDependencies = (dependencies: string[]): ModuleSource => {
    const ctx = this._ctx.select("withoutDependencies", { dependencies })
    return new ModuleSource(ctx)
  }

  /**
   * Call the provided function with current ModuleSource.
   *
   * This is useful for reusability and readability by not breaking the calling chain.
   */
  with = (arg: (param: ModuleSource) => ModuleSource) => {
    return arg(this)
  }
}

/**
 * A named set of path filters that can be applied to directory arguments provided to functions.
 */
export class ModuleSourceView extends BaseClient {
  private readonly _id?: ModuleSourceViewID = undefined
  private readonly _name?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: ModuleSourceViewID, _name?: string) {
    super(ctx)

    this._id = _id
    this._name = _name
  }

  /**
   * A unique identifier for this ModuleSourceView.
   */
  id = async (): Promise<ModuleSourceViewID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<ModuleSourceViewID> = await ctx.execute()

    return response
  }

  /**
   * The name of the view
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The patterns of the view used to filter paths
   */
  patterns = async (): Promise<string[]> => {
    const ctx = this._ctx.select("patterns")

    const response: Awaited<string[]> = await ctx.execute()

    return response
  }
}

/**
 * A definition of a custom object defined in a Module.
 */
export class ObjectTypeDef extends BaseClient {
  private readonly _id?: ObjectTypeDefID = undefined
  private readonly _description?: string = undefined
  private readonly _name?: string = undefined
  private readonly _sourceModuleName?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: ObjectTypeDefID,
    _description?: string,
    _name?: string,
    _sourceModuleName?: string,
  ) {
    super(ctx)

    this._id = _id
    this._description = _description
    this._name = _name
    this._sourceModuleName = _sourceModuleName
  }

  /**
   * A unique identifier for this ObjectTypeDef.
   */
  id = async (): Promise<ObjectTypeDefID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<ObjectTypeDefID> = await ctx.execute()

    return response
  }

  /**
   * The function used to construct new instances of this object, if any
   */
  constructor_ = (): Function_ => {
    const ctx = this._ctx.select("constructor")
    return new Function_(ctx)
  }

  /**
   * The doc string for the object, if any.
   */
  description = async (): Promise<string> => {
    if (this._description) {
      return this._description
    }

    const ctx = this._ctx.select("description")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Static fields defined on this object, if any.
   */
  fields = async (): Promise<FieldTypeDef[]> => {
    type fields = {
      id: FieldTypeDefID
    }

    const ctx = this._ctx.select("fields").select("id")

    const response: Awaited<fields[]> = await ctx.execute()

    return response.map(
      (r) =>
        new FieldTypeDef(
          new Context(
            [
              {
                operation: "loadFieldTypeDefFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * Functions defined on this object, if any.
   */
  functions = async (): Promise<Function_[]> => {
    type functions = {
      id: FunctionID
    }

    const ctx = this._ctx.select("functions").select("id")

    const response: Awaited<functions[]> = await ctx.execute()

    return response.map(
      (r) =>
        new Function_(
          new Context(
            [
              {
                operation: "loadFunction_FromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The name of the object.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The location of this object declaration.
   */
  sourceMap = (): SourceMap => {
    const ctx = this._ctx.select("sourceMap")
    return new SourceMap(ctx)
  }

  /**
   * If this ObjectTypeDef is associated with a Module, the name of the module. Unset otherwise.
   */
  sourceModuleName = async (): Promise<string> => {
    if (this._sourceModuleName) {
      return this._sourceModuleName
    }

    const ctx = this._ctx.select("sourceModuleName")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

/**
 * A port exposed by a container.
 */
export class Port extends BaseClient {
  private readonly _id?: PortID = undefined
  private readonly _description?: string = undefined
  private readonly _experimentalSkipHealthcheck?: boolean = undefined
  private readonly _port?: number = undefined
  private readonly _protocol?: NetworkProtocol = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: PortID,
    _description?: string,
    _experimentalSkipHealthcheck?: boolean,
    _port?: number,
    _protocol?: NetworkProtocol,
  ) {
    super(ctx)

    this._id = _id
    this._description = _description
    this._experimentalSkipHealthcheck = _experimentalSkipHealthcheck
    this._port = _port
    this._protocol = _protocol
  }

  /**
   * A unique identifier for this Port.
   */
  id = async (): Promise<PortID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<PortID> = await ctx.execute()

    return response
  }

  /**
   * The port description.
   */
  description = async (): Promise<string> => {
    if (this._description) {
      return this._description
    }

    const ctx = this._ctx.select("description")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Skip the health check when run as a service.
   */
  experimentalSkipHealthcheck = async (): Promise<boolean> => {
    if (this._experimentalSkipHealthcheck) {
      return this._experimentalSkipHealthcheck
    }

    const ctx = this._ctx.select("experimentalSkipHealthcheck")

    const response: Awaited<boolean> = await ctx.execute()

    return response
  }

  /**
   * The port number.
   */
  port = async (): Promise<number> => {
    if (this._port) {
      return this._port
    }

    const ctx = this._ctx.select("port")

    const response: Awaited<number> = await ctx.execute()

    return response
  }

  /**
   * The transport layer protocol.
   */
  protocol = async (): Promise<NetworkProtocol> => {
    if (this._protocol) {
      return this._protocol
    }

    const ctx = this._ctx.select("protocol")

    const response: Awaited<NetworkProtocol> = await ctx.execute()

    return response
  }
}

/**
 * The root of the DAG.
 */
export class Client extends BaseClient {
  private readonly _defaultPlatform?: Platform = undefined
  private readonly _version?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _defaultPlatform?: Platform, _version?: string) {
    super(ctx)

    this._defaultPlatform = _defaultPlatform
    this._version = _version
  }

  /**
   * Get the Raw GraphQL client.
   */
  public getGQLClient() {
    return this._ctx.getGQLClient()
  }

  /**
   * Retrieves a content-addressed blob.
   * @param digest Digest of the blob
   */
  blob = (digest: string): Directory => {
    const ctx = this._ctx.select("blob", { digest })
    return new Directory(ctx)
  }

  /**
   * Retrieves a container builtin to the engine.
   * @param digest Digest of the image manifest
   */
  builtinContainer = (digest: string): Container => {
    const ctx = this._ctx.select("builtinContainer", { digest })
    return new Container(ctx)
  }

  /**
   * Constructs a cache volume for a given cache key.
   * @param key A string identifier to target this cache volume (e.g., "modules-cache").
   */
  cacheVolume = (key: string): CacheVolume => {
    const ctx = this._ctx.select("cacheVolume", { key })
    return new CacheVolume(ctx)
  }

  /**
   * Creates a scratch container.
   *
   * Optional platform argument initializes new containers to execute and publish as that platform. Platform defaults to that of the builder's host.
   * @param opts.platform Platform to initialize the container with.
   */
  container = (opts?: ClientContainerOpts): Container => {
    const ctx = this._ctx.select("container", { ...opts })
    return new Container(ctx)
  }

  /**
   * The FunctionCall context that the SDK caller is currently executing in.
   *
   * If the caller is not currently executing in a function, this will return an error.
   */
  currentFunctionCall = (): FunctionCall => {
    const ctx = this._ctx.select("currentFunctionCall")
    return new FunctionCall(ctx)
  }

  /**
   * The module currently being served in the session, if any.
   */
  currentModule = (): CurrentModule => {
    const ctx = this._ctx.select("currentModule")
    return new CurrentModule(ctx)
  }

  /**
   * The TypeDef representations of the objects currently being served in the session.
   */
  currentTypeDefs = async (): Promise<TypeDef[]> => {
    type currentTypeDefs = {
      id: TypeDefID
    }

    const ctx = this._ctx.select("currentTypeDefs").select("id")

    const response: Awaited<currentTypeDefs[]> = await ctx.execute()

    return response.map(
      (r) =>
        new TypeDef(
          new Context(
            [
              {
                operation: "loadTypeDefFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * The default platform of the engine.
   */
  defaultPlatform = async (): Promise<Platform> => {
    const ctx = this._ctx.select("defaultPlatform")

    const response: Awaited<Platform> = await ctx.execute()

    return response
  }

  /**
   * Creates an empty directory.
   */
  directory = (): Directory => {
    const ctx = this._ctx.select("directory")
    return new Directory(ctx)
  }

  /**
   * The Dagger engine container configuration and state
   */
  engine = (): Engine => {
    const ctx = this._ctx.select("engine")
    return new Engine(ctx)
  }

  /**
   * Create a new error.
   * @param message A brief description of the error.
   */
  error = (message: string): Error => {
    const ctx = this._ctx.select("error", { message })
    return new Error(ctx)
  }

  /**
   * Creates a function.
   * @param name Name of the function, in its original format from the implementation language.
   * @param returnType Return type of the function.
   */
  function_ = (name: string, returnType: TypeDef): Function_ => {
    const ctx = this._ctx.select("function", { name, returnType })
    return new Function_(ctx)
  }

  /**
   * Create a code generation result, given a directory containing the generated code.
   */
  generatedCode = (code: Directory): GeneratedCode => {
    const ctx = this._ctx.select("generatedCode", { code })
    return new GeneratedCode(ctx)
  }

  /**
   * Queries a Git repository.
   * @param url URL of the git repository.
   *
   * Can be formatted as `https://{host}/{owner}/{repo}`, `git@{host}:{owner}/{repo}`.
   *
   * Suffix ".git" is optional.
   * @param opts.keepGitDir DEPRECATED: Set to true to keep .git directory.
   * @param opts.experimentalServiceHost A service which must be started before the repo is fetched.
   * @param opts.sshKnownHosts Set SSH known hosts
   * @param opts.sshAuthSocket Set SSH auth socket
   */
  git = (url: string, opts?: ClientGitOpts): GitRepository => {
    const ctx = this._ctx.select("git", { url, ...opts })
    return new GitRepository(ctx)
  }

  /**
   * Queries the host environment.
   */
  host = (): Host => {
    const ctx = this._ctx.select("host")
    return new Host(ctx)
  }

  /**
   * Returns a file containing an http remote url content.
   * @param url HTTP url to get the content from (e.g., "https://docs.dagger.io").
   * @param opts.experimentalServiceHost A service which must be started before the URL is fetched.
   */
  http = (url: string, opts?: ClientHttpOpts): File => {
    const ctx = this._ctx.select("http", { url, ...opts })
    return new File(ctx)
  }

  /**
   * Load a CacheVolume from its ID.
   */
  loadCacheVolumeFromID = (id: CacheVolumeID): CacheVolume => {
    const ctx = this._ctx.select("loadCacheVolumeFromID", { id })
    return new CacheVolume(ctx)
  }

  /**
   * Load a Container from its ID.
   */
  loadContainerFromID = (id: ContainerID): Container => {
    const ctx = this._ctx.select("loadContainerFromID", { id })
    return new Container(ctx)
  }

  /**
   * Load a CurrentModule from its ID.
   */
  loadCurrentModuleFromID = (id: CurrentModuleID): CurrentModule => {
    const ctx = this._ctx.select("loadCurrentModuleFromID", { id })
    return new CurrentModule(ctx)
  }

  /**
   * Load a Directory from its ID.
   */
  loadDirectoryFromID = (id: DirectoryID): Directory => {
    const ctx = this._ctx.select("loadDirectoryFromID", { id })
    return new Directory(ctx)
  }

  /**
   * Load a EngineCacheEntry from its ID.
   */
  loadEngineCacheEntryFromID = (id: EngineCacheEntryID): EngineCacheEntry => {
    const ctx = this._ctx.select("loadEngineCacheEntryFromID", { id })
    return new EngineCacheEntry(ctx)
  }

  /**
   * Load a EngineCacheEntrySet from its ID.
   */
  loadEngineCacheEntrySetFromID = (
    id: EngineCacheEntrySetID,
  ): EngineCacheEntrySet => {
    const ctx = this._ctx.select("loadEngineCacheEntrySetFromID", { id })
    return new EngineCacheEntrySet(ctx)
  }

  /**
   * Load a EngineCache from its ID.
   */
  loadEngineCacheFromID = (id: EngineCacheID): EngineCache => {
    const ctx = this._ctx.select("loadEngineCacheFromID", { id })
    return new EngineCache(ctx)
  }

  /**
   * Load a Engine from its ID.
   */
  loadEngineFromID = (id: EngineID): Engine => {
    const ctx = this._ctx.select("loadEngineFromID", { id })
    return new Engine(ctx)
  }

  /**
   * Load a EnumTypeDef from its ID.
   */
  loadEnumTypeDefFromID = (id: EnumTypeDefID): EnumTypeDef => {
    const ctx = this._ctx.select("loadEnumTypeDefFromID", { id })
    return new EnumTypeDef(ctx)
  }

  /**
   * Load a EnumValueTypeDef from its ID.
   */
  loadEnumValueTypeDefFromID = (id: EnumValueTypeDefID): EnumValueTypeDef => {
    const ctx = this._ctx.select("loadEnumValueTypeDefFromID", { id })
    return new EnumValueTypeDef(ctx)
  }

  /**
   * Load a EnvVariable from its ID.
   */
  loadEnvVariableFromID = (id: EnvVariableID): EnvVariable => {
    const ctx = this._ctx.select("loadEnvVariableFromID", { id })
    return new EnvVariable(ctx)
  }

  /**
   * Load a Error from its ID.
   */
  loadErrorFromID = (id: ErrorID): Error => {
    const ctx = this._ctx.select("loadErrorFromID", { id })
    return new Error(ctx)
  }

  /**
   * Load a FieldTypeDef from its ID.
   */
  loadFieldTypeDefFromID = (id: FieldTypeDefID): FieldTypeDef => {
    const ctx = this._ctx.select("loadFieldTypeDefFromID", { id })
    return new FieldTypeDef(ctx)
  }

  /**
   * Load a File from its ID.
   */
  loadFileFromID = (id: FileID): File => {
    const ctx = this._ctx.select("loadFileFromID", { id })
    return new File(ctx)
  }

  /**
   * Load a FunctionArg from its ID.
   */
  loadFunctionArgFromID = (id: FunctionArgID): FunctionArg => {
    const ctx = this._ctx.select("loadFunctionArgFromID", { id })
    return new FunctionArg(ctx)
  }

  /**
   * Load a FunctionCallArgValue from its ID.
   */
  loadFunctionCallArgValueFromID = (
    id: FunctionCallArgValueID,
  ): FunctionCallArgValue => {
    const ctx = this._ctx.select("loadFunctionCallArgValueFromID", { id })
    return new FunctionCallArgValue(ctx)
  }

  /**
   * Load a FunctionCall from its ID.
   */
  loadFunctionCallFromID = (id: FunctionCallID): FunctionCall => {
    const ctx = this._ctx.select("loadFunctionCallFromID", { id })
    return new FunctionCall(ctx)
  }

  /**
   * Load a Function from its ID.
   */
  loadFunctionFromID = (id: FunctionID): Function_ => {
    const ctx = this._ctx.select("loadFunctionFromID", { id })
    return new Function_(ctx)
  }

  /**
   * Load a GeneratedCode from its ID.
   */
  loadGeneratedCodeFromID = (id: GeneratedCodeID): GeneratedCode => {
    const ctx = this._ctx.select("loadGeneratedCodeFromID", { id })
    return new GeneratedCode(ctx)
  }

  /**
   * Load a GitModuleSource from its ID.
   */
  loadGitModuleSourceFromID = (id: GitModuleSourceID): GitModuleSource => {
    const ctx = this._ctx.select("loadGitModuleSourceFromID", { id })
    return new GitModuleSource(ctx)
  }

  /**
   * Load a GitRef from its ID.
   */
  loadGitRefFromID = (id: GitRefID): GitRef => {
    const ctx = this._ctx.select("loadGitRefFromID", { id })
    return new GitRef(ctx)
  }

  /**
   * Load a GitRepository from its ID.
   */
  loadGitRepositoryFromID = (id: GitRepositoryID): GitRepository => {
    const ctx = this._ctx.select("loadGitRepositoryFromID", { id })
    return new GitRepository(ctx)
  }

  /**
   * Load a Host from its ID.
   */
  loadHostFromID = (id: HostID): Host => {
    const ctx = this._ctx.select("loadHostFromID", { id })
    return new Host(ctx)
  }

  /**
   * Load a InputTypeDef from its ID.
   */
  loadInputTypeDefFromID = (id: InputTypeDefID): InputTypeDef => {
    const ctx = this._ctx.select("loadInputTypeDefFromID", { id })
    return new InputTypeDef(ctx)
  }

  /**
   * Load a InterfaceTypeDef from its ID.
   */
  loadInterfaceTypeDefFromID = (id: InterfaceTypeDefID): InterfaceTypeDef => {
    const ctx = this._ctx.select("loadInterfaceTypeDefFromID", { id })
    return new InterfaceTypeDef(ctx)
  }

  /**
   * Load a Label from its ID.
   */
  loadLabelFromID = (id: LabelID): Label => {
    const ctx = this._ctx.select("loadLabelFromID", { id })
    return new Label(ctx)
  }

  /**
   * Load a ListTypeDef from its ID.
   */
  loadListTypeDefFromID = (id: ListTypeDefID): ListTypeDef => {
    const ctx = this._ctx.select("loadListTypeDefFromID", { id })
    return new ListTypeDef(ctx)
  }

  /**
   * Load a LocalModuleSource from its ID.
   */
  loadLocalModuleSourceFromID = (
    id: LocalModuleSourceID,
  ): LocalModuleSource => {
    const ctx = this._ctx.select("loadLocalModuleSourceFromID", { id })
    return new LocalModuleSource(ctx)
  }

  /**
   * Load a ModuleDependency from its ID.
   */
  loadModuleDependencyFromID = (id: ModuleDependencyID): ModuleDependency => {
    const ctx = this._ctx.select("loadModuleDependencyFromID", { id })
    return new ModuleDependency(ctx)
  }

  /**
   * Load a Module from its ID.
   */
  loadModuleFromID = (id: ModuleID): Module_ => {
    const ctx = this._ctx.select("loadModuleFromID", { id })
    return new Module_(ctx)
  }

  /**
   * Load a ModuleSource from its ID.
   */
  loadModuleSourceFromID = (id: ModuleSourceID): ModuleSource => {
    const ctx = this._ctx.select("loadModuleSourceFromID", { id })
    return new ModuleSource(ctx)
  }

  /**
   * Load a ModuleSourceView from its ID.
   */
  loadModuleSourceViewFromID = (id: ModuleSourceViewID): ModuleSourceView => {
    const ctx = this._ctx.select("loadModuleSourceViewFromID", { id })
    return new ModuleSourceView(ctx)
  }

  /**
   * Load a ObjectTypeDef from its ID.
   */
  loadObjectTypeDefFromID = (id: ObjectTypeDefID): ObjectTypeDef => {
    const ctx = this._ctx.select("loadObjectTypeDefFromID", { id })
    return new ObjectTypeDef(ctx)
  }

  /**
   * Load a Port from its ID.
   */
  loadPortFromID = (id: PortID): Port => {
    const ctx = this._ctx.select("loadPortFromID", { id })
    return new Port(ctx)
  }

  /**
   * Load a ScalarTypeDef from its ID.
   */
  loadScalarTypeDefFromID = (id: ScalarTypeDefID): ScalarTypeDef => {
    const ctx = this._ctx.select("loadScalarTypeDefFromID", { id })
    return new ScalarTypeDef(ctx)
  }

  /**
   * Load a Secret from its ID.
   */
  loadSecretFromID = (id: SecretID): Secret => {
    const ctx = this._ctx.select("loadSecretFromID", { id })
    return new Secret(ctx)
  }

  /**
   * Load a Service from its ID.
   */
  loadServiceFromID = (id: ServiceID): Service => {
    const ctx = this._ctx.select("loadServiceFromID", { id })
    return new Service(ctx)
  }

  /**
   * Load a Socket from its ID.
   */
  loadSocketFromID = (id: SocketID): Socket => {
    const ctx = this._ctx.select("loadSocketFromID", { id })
    return new Socket(ctx)
  }

  /**
   * Load a SourceMap from its ID.
   */
  loadSourceMapFromID = (id: SourceMapID): SourceMap => {
    const ctx = this._ctx.select("loadSourceMapFromID", { id })
    return new SourceMap(ctx)
  }

  /**
   * Load a Terminal from its ID.
   */
  loadTerminalFromID = (id: TerminalID): Terminal => {
    const ctx = this._ctx.select("loadTerminalFromID", { id })
    return new Terminal(ctx)
  }

  /**
   * Load a TypeDef from its ID.
   */
  loadTypeDefFromID = (id: TypeDefID): TypeDef => {
    const ctx = this._ctx.select("loadTypeDefFromID", { id })
    return new TypeDef(ctx)
  }

  /**
   * Create a new module.
   */
  module_ = (): Module_ => {
    const ctx = this._ctx.select("module")
    return new Module_(ctx)
  }

  /**
   * Create a new module dependency configuration from a module source and name
   * @param source The source of the dependency
   * @param opts.name If set, the name to use for the dependency. Otherwise, once installed to a parent module, the name of the dependency module will be used by default.
   */
  moduleDependency = (
    source: ModuleSource,
    opts?: ClientModuleDependencyOpts,
  ): ModuleDependency => {
    const ctx = this._ctx.select("moduleDependency", { source, ...opts })
    return new ModuleDependency(ctx)
  }

  /**
   * Create a new module source instance from a source ref string.
   * @param refString The string ref representation of the module source
   * @param opts.refPin The pinned version of the module source
   * @param opts.stable If true, enforce that the source is a stable version for source kinds that support versioning.
   * @param opts.relHostPath The relative path to the module root from the host directory
   */
  moduleSource = (
    refString: string,
    opts?: ClientModuleSourceOpts,
  ): ModuleSource => {
    const ctx = this._ctx.select("moduleSource", { refString, ...opts })
    return new ModuleSource(ctx)
  }

  /**
   * Reference a secret by name.
   */
  secret = (name: string, opts?: ClientSecretOpts): Secret => {
    const ctx = this._ctx.select("secret", { name, ...opts })
    return new Secret(ctx)
  }

  /**
   * Sets a secret given a user defined name to its plaintext and returns the secret.
   *
   * The plaintext value is limited to a size of 128000 bytes.
   * @param name The user defined name for this secret
   * @param plaintext The plaintext of the secret
   */
  setSecret = (name: string, plaintext: string): Secret => {
    const ctx = this._ctx.select("setSecret", { name, plaintext })
    return new Secret(ctx)
  }

  /**
   * Creates source map metadata.
   * @param filename The filename from the module source.
   * @param line The line number within the filename.
   * @param column The column number within the line.
   */
  sourceMap = (filename: string, line: number, column: number): SourceMap => {
    const ctx = this._ctx.select("sourceMap", { filename, line, column })
    return new SourceMap(ctx)
  }

  /**
   * Create a new TypeDef.
   */
  typeDef = (): TypeDef => {
    const ctx = this._ctx.select("typeDef")
    return new TypeDef(ctx)
  }

  /**
   * Get the current Dagger Engine version.
   */
  version = async (): Promise<string> => {
    const ctx = this._ctx.select("version")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

/**
 * A definition of a custom scalar defined in a Module.
 */
export class ScalarTypeDef extends BaseClient {
  private readonly _id?: ScalarTypeDefID = undefined
  private readonly _description?: string = undefined
  private readonly _name?: string = undefined
  private readonly _sourceModuleName?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: ScalarTypeDefID,
    _description?: string,
    _name?: string,
    _sourceModuleName?: string,
  ) {
    super(ctx)

    this._id = _id
    this._description = _description
    this._name = _name
    this._sourceModuleName = _sourceModuleName
  }

  /**
   * A unique identifier for this ScalarTypeDef.
   */
  id = async (): Promise<ScalarTypeDefID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<ScalarTypeDefID> = await ctx.execute()

    return response
  }

  /**
   * A doc string for the scalar, if any.
   */
  description = async (): Promise<string> => {
    if (this._description) {
      return this._description
    }

    const ctx = this._ctx.select("description")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The name of the scalar.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * If this ScalarTypeDef is associated with a Module, the name of the module. Unset otherwise.
   */
  sourceModuleName = async (): Promise<string> => {
    if (this._sourceModuleName) {
      return this._sourceModuleName
    }

    const ctx = this._ctx.select("sourceModuleName")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

/**
 * A reference to a secret value, which can be handled more safely than the value itself.
 */
export class Secret extends BaseClient {
  private readonly _id?: SecretID = undefined
  private readonly _name?: string = undefined
  private readonly _plaintext?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: SecretID,
    _name?: string,
    _plaintext?: string,
  ) {
    super(ctx)

    this._id = _id
    this._name = _name
    this._plaintext = _plaintext
  }

  /**
   * A unique identifier for this Secret.
   */
  id = async (): Promise<SecretID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<SecretID> = await ctx.execute()

    return response
  }

  /**
   * The name of this secret.
   */
  name = async (): Promise<string> => {
    if (this._name) {
      return this._name
    }

    const ctx = this._ctx.select("name")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The value of this secret.
   */
  plaintext = async (): Promise<string> => {
    if (this._plaintext) {
      return this._plaintext
    }

    const ctx = this._ctx.select("plaintext")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

/**
 * A content-addressed service providing TCP connectivity.
 */
export class Service extends BaseClient {
  private readonly _id?: ServiceID = undefined
  private readonly _endpoint?: string = undefined
  private readonly _hostname?: string = undefined
  private readonly _start?: ServiceID = undefined
  private readonly _stop?: ServiceID = undefined
  private readonly _up?: Void = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: ServiceID,
    _endpoint?: string,
    _hostname?: string,
    _start?: ServiceID,
    _stop?: ServiceID,
    _up?: Void,
  ) {
    super(ctx)

    this._id = _id
    this._endpoint = _endpoint
    this._hostname = _hostname
    this._start = _start
    this._stop = _stop
    this._up = _up
  }

  /**
   * A unique identifier for this Service.
   */
  id = async (): Promise<ServiceID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<ServiceID> = await ctx.execute()

    return response
  }

  /**
   * Retrieves an endpoint that clients can use to reach this container.
   *
   * If no port is specified, the first exposed port is used. If none exist an error is returned.
   *
   * If a scheme is specified, a URL is returned. Otherwise, a host:port pair is returned.
   * @param opts.port The exposed port number for the endpoint
   * @param opts.scheme Return a URL with the given scheme, eg. http for http://
   */
  endpoint = async (opts?: ServiceEndpointOpts): Promise<string> => {
    if (this._endpoint) {
      return this._endpoint
    }

    const ctx = this._ctx.select("endpoint", { ...opts })

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieves a hostname which can be used by clients to reach this container.
   */
  hostname = async (): Promise<string> => {
    if (this._hostname) {
      return this._hostname
    }

    const ctx = this._ctx.select("hostname")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * Retrieves the list of ports provided by the service.
   */
  ports = async (): Promise<Port[]> => {
    type ports = {
      id: PortID
    }

    const ctx = this._ctx.select("ports").select("id")

    const response: Awaited<ports[]> = await ctx.execute()

    return response.map(
      (r) =>
        new Port(
          new Context(
            [
              {
                operation: "loadPortFromID",
                args: { id: r.id },
              },
            ],
            this._ctx.getConnection(),
          ),
          r.id,
        ),
    )
  }

  /**
   * Start the service and wait for its health checks to succeed.
   *
   * Services bound to a Container do not need to be manually started.
   */
  start = async (): Promise<Service> => {
    const ctx = this._ctx.select("start")

    const response: Awaited<ServiceID> = await ctx.execute()

    return new Service(
      new Context(
        [
          {
            operation: "loadServiceFromID",
            args: { id: response },
          },
        ],
        this._ctx.getConnection(),
      ),
    )
  }

  /**
   * Stop the service.
   * @param opts.kill Immediately kill the service without waiting for a graceful exit
   */
  stop = async (opts?: ServiceStopOpts): Promise<Service> => {
    const ctx = this._ctx.select("stop", { ...opts })

    const response: Awaited<ServiceID> = await ctx.execute()

    return new Service(
      new Context(
        [
          {
            operation: "loadServiceFromID",
            args: { id: response },
          },
        ],
        this._ctx.getConnection(),
      ),
    )
  }

  /**
   * Creates a tunnel that forwards traffic from the caller's network to this service.
   * @param opts.ports List of frontend/backend port mappings to forward.
   *
   * Frontend is the port accepting traffic on the host, backend is the service port.
   * @param opts.random Bind each tunnel port to a random port on the host.
   */
  up = async (opts?: ServiceUpOpts): Promise<void> => {
    if (this._up) {
      return
    }

    const ctx = this._ctx.select("up", { ...opts })

    await ctx.execute()
  }

  /**
   * Configures a hostname which can be used by clients within the session to reach this container.
   * @param hostname The hostname to use.
   */
  withHostname = (hostname: string): Service => {
    const ctx = this._ctx.select("withHostname", { hostname })
    return new Service(ctx)
  }

  /**
   * Call the provided function with current Service.
   *
   * This is useful for reusability and readability by not breaking the calling chain.
   */
  with = (arg: (param: Service) => Service) => {
    return arg(this)
  }
}

/**
 * A Unix or TCP/IP socket that can be mounted into a container.
 */
export class Socket extends BaseClient {
  private readonly _id?: SocketID = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: SocketID) {
    super(ctx)

    this._id = _id
  }

  /**
   * A unique identifier for this Socket.
   */
  id = async (): Promise<SocketID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<SocketID> = await ctx.execute()

    return response
  }
}

/**
 * Source location information.
 */
export class SourceMap extends BaseClient {
  private readonly _id?: SourceMapID = undefined
  private readonly _column?: number = undefined
  private readonly _filename?: string = undefined
  private readonly _line?: number = undefined
  private readonly _module?: string = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: SourceMapID,
    _column?: number,
    _filename?: string,
    _line?: number,
    _module?: string,
  ) {
    super(ctx)

    this._id = _id
    this._column = _column
    this._filename = _filename
    this._line = _line
    this._module = _module
  }

  /**
   * A unique identifier for this SourceMap.
   */
  id = async (): Promise<SourceMapID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<SourceMapID> = await ctx.execute()

    return response
  }

  /**
   * The column number within the line.
   */
  column = async (): Promise<number> => {
    if (this._column) {
      return this._column
    }

    const ctx = this._ctx.select("column")

    const response: Awaited<number> = await ctx.execute()

    return response
  }

  /**
   * The filename from the module source.
   */
  filename = async (): Promise<string> => {
    if (this._filename) {
      return this._filename
    }

    const ctx = this._ctx.select("filename")

    const response: Awaited<string> = await ctx.execute()

    return response
  }

  /**
   * The line number within the filename.
   */
  line = async (): Promise<number> => {
    if (this._line) {
      return this._line
    }

    const ctx = this._ctx.select("line")

    const response: Awaited<number> = await ctx.execute()

    return response
  }

  /**
   * The module dependency this was declared in.
   */
  module_ = async (): Promise<string> => {
    if (this._module) {
      return this._module
    }

    const ctx = this._ctx.select("module")

    const response: Awaited<string> = await ctx.execute()

    return response
  }
}

/**
 * An interactive terminal that clients can connect to.
 */
export class Terminal extends BaseClient {
  private readonly _id?: TerminalID = undefined
  private readonly _sync?: TerminalID = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(ctx?: Context, _id?: TerminalID, _sync?: TerminalID) {
    super(ctx)

    this._id = _id
    this._sync = _sync
  }

  /**
   * A unique identifier for this Terminal.
   */
  id = async (): Promise<TerminalID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<TerminalID> = await ctx.execute()

    return response
  }

  /**
   * Forces evaluation of the pipeline in the engine.
   *
   * It doesn't run the default command if no exec has been set.
   */
  sync = async (): Promise<Terminal> => {
    const ctx = this._ctx.select("sync")

    const response: Awaited<TerminalID> = await ctx.execute()

    return new Terminal(
      new Context(
        [
          {
            operation: "loadTerminalFromID",
            args: { id: response },
          },
        ],
        this._ctx.getConnection(),
      ),
    )
  }
}

/**
 * A definition of a parameter or return type in a Module.
 */
export class TypeDef extends BaseClient {
  private readonly _id?: TypeDefID = undefined
  private readonly _kind?: TypeDefKind = undefined
  private readonly _optional?: boolean = undefined

  /**
   * Constructor is used for internal usage only, do not create object from it.
   */
  constructor(
    ctx?: Context,
    _id?: TypeDefID,
    _kind?: TypeDefKind,
    _optional?: boolean,
  ) {
    super(ctx)

    this._id = _id
    this._kind = _kind
    this._optional = _optional
  }

  /**
   * A unique identifier for this TypeDef.
   */
  id = async (): Promise<TypeDefID> => {
    if (this._id) {
      return this._id
    }

    const ctx = this._ctx.select("id")

    const response: Awaited<TypeDefID> = await ctx.execute()

    return response
  }

  /**
   * If kind is ENUM, the enum-specific type definition. If kind is not ENUM, this will be null.
   */
  asEnum = (): EnumTypeDef => {
    const ctx = this._ctx.select("asEnum")
    return new EnumTypeDef(ctx)
  }

  /**
   * If kind is INPUT, the input-specific type definition. If kind is not INPUT, this will be null.
   */
  asInput = (): InputTypeDef => {
    const ctx = this._ctx.select("asInput")
    return new InputTypeDef(ctx)
  }

  /**
   * If kind is INTERFACE, the interface-specific type definition. If kind is not INTERFACE, this will be null.
   */
  asInterface = (): InterfaceTypeDef => {
    const ctx = this._ctx.select("asInterface")
    return new InterfaceTypeDef(ctx)
  }

  /**
   * If kind is LIST, the list-specific type definition. If kind is not LIST, this will be null.
   */
  asList = (): ListTypeDef => {
    const ctx = this._ctx.select("asList")
    return new ListTypeDef(ctx)
  }

  /**
   * If kind is OBJECT, the object-specific type definition. If kind is not OBJECT, this will be null.
   */
  asObject = (): ObjectTypeDef => {
    const ctx = this._ctx.select("asObject")
    return new ObjectTypeDef(ctx)
  }

  /**
   * If kind is SCALAR, the scalar-specific type definition. If kind is not SCALAR, this will be null.
   */
  asScalar = (): ScalarTypeDef => {
    const ctx = this._ctx.select("asScalar")
    return new ScalarTypeDef(ctx)
  }

  /**
   * The kind of type this is (e.g. primitive, list, object).
   */
  kind = async (): Promise<TypeDefKind> => {
    if (this._kind) {
      return this._kind
    }

    const ctx = this._ctx.select("kind")

    const response: Awaited<TypeDefKind> = await ctx.execute()

    return response
  }

  /**
   * Whether this type can be set to null. Defaults to false.
   */
  optional = async (): Promise<boolean> => {
    if (this._optional) {
      return this._optional
    }

    const ctx = this._ctx.select("optional")

    const response: Awaited<boolean> = await ctx.execute()

    return response
  }

  /**
   * Adds a function for constructing a new instance of an Object TypeDef, failing if the type is not an object.
   */
  withConstructor = (function_: Function_): TypeDef => {
    const ctx = this._ctx.select("withConstructor", {
      function: function_,
    })
    return new TypeDef(ctx)
  }

  /**
   * Returns a TypeDef of kind Enum with the provided name.
   *
   * Note that an enum's values may be omitted if the intent is only to refer to an enum. This is how functions are able to return their own, or any other circular reference.
   * @param name The name of the enum
   * @param opts.description A doc string for the enum, if any
   * @param opts.sourceMap The source map for the enum definition.
   */
  withEnum = (name: string, opts?: TypeDefWithEnumOpts): TypeDef => {
    const ctx = this._ctx.select("withEnum", { name, ...opts })
    return new TypeDef(ctx)
  }

  /**
   * Adds a static value for an Enum TypeDef, failing if the type is not an enum.
   * @param value The name of the value in the enum
   * @param opts.description A doc string for the value, if any
   * @param opts.sourceMap The source map for the enum value definition.
   */
  withEnumValue = (value: string, opts?: TypeDefWithEnumValueOpts): TypeDef => {
    const ctx = this._ctx.select("withEnumValue", { value, ...opts })
    return new TypeDef(ctx)
  }

  /**
   * Adds a static field for an Object TypeDef, failing if the type is not an object.
   * @param name The name of the field in the object
   * @param typeDef The type of the field
   * @param opts.description A doc string for the field, if any
   * @param opts.sourceMap The source map for the field definition.
   */
  withField = (
    name: string,
    typeDef: TypeDef,
    opts?: TypeDefWithFieldOpts,
  ): TypeDef => {
    const ctx = this._ctx.select("withField", { name, typeDef, ...opts })
    return new TypeDef(ctx)
  }

  /**
   * Adds a function for an Object or Interface TypeDef, failing if the type is not one of those kinds.
   */
  withFunction = (function_: Function_): TypeDef => {
    const ctx = this._ctx.select("withFunction", {
      function: function_,
    })
    return new TypeDef(ctx)
  }

  /**
   * Returns a TypeDef of kind Interface with the provided name.
   */
  withInterface = (name: string, opts?: TypeDefWithInterfaceOpts): TypeDef => {
    const ctx = this._ctx.select("withInterface", { name, ...opts })
    return new TypeDef(ctx)
  }

  /**
   * Sets the kind of the type.
   */
  withKind = (kind: TypeDefKind): TypeDef => {
    const metadata = {
      kind: { is_enum: true },
    }

    const ctx = this._ctx.select("withKind", { kind, __metadata: metadata })
    return new TypeDef(ctx)
  }

  /**
   * Returns a TypeDef of kind List with the provided type for its elements.
   */
  withListOf = (elementType: TypeDef): TypeDef => {
    const ctx = this._ctx.select("withListOf", { elementType })
    return new TypeDef(ctx)
  }

  /**
   * Returns a TypeDef of kind Object with the provided name.
   *
   * Note that an object's fields and functions may be omitted if the intent is only to refer to an object. This is how functions are able to return their own object, or any other circular reference.
   */
  withObject = (name: string, opts?: TypeDefWithObjectOpts): TypeDef => {
    const ctx = this._ctx.select("withObject", { name, ...opts })
    return new TypeDef(ctx)
  }

  /**
   * Sets whether this type can be set to null.
   */
  withOptional = (optional: boolean): TypeDef => {
    const ctx = this._ctx.select("withOptional", { optional })
    return new TypeDef(ctx)
  }

  /**
   * Returns a TypeDef of kind Scalar with the provided name.
   */
  withScalar = (name: string, opts?: TypeDefWithScalarOpts): TypeDef => {
    const ctx = this._ctx.select("withScalar", { name, ...opts })
    return new TypeDef(ctx)
  }

  /**
   * Call the provided function with current TypeDef.
   *
   * This is useful for reusability and readability by not breaking the calling chain.
   */
  with = (arg: (param: TypeDef) => TypeDef) => {
    return arg(this)
  }
}

export const dag = new Client()
