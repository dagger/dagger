// Code generated by dagger. DO NOT EDIT.

package main

import (
	"context"

	. "dagger.io/dagger"
	"dagger.io/dagger/querybuilder"
	"github.com/Khan/genqlient/graphql"
)

func DaggerClient() *daggerClient {
	return &daggerClient{DefaultContext().Client()}
}

type daggerClient struct {
	*Client
}

type DemoClient struct {
	Q *querybuilder.Selection
	C graphql.Client

	publish *string
}

func (r *DemoClient) ClientImage() *EnvironmentArtifact {
	q := r.Q.Select("clientImage")

	return &EnvironmentArtifact{
		Q: q,
		C: r.C,
	}
}

func (r *DemoClient) Publish(ctx context.Context, version string) (string, error) {
	if r.publish != nil {
		return *r.publish, nil
	}
	q := r.Q.Select("publish")
	q = q.Arg("version", version)

	var response string

	q = q.Bind(&response)
	return response, q.Execute(ctx, r.C)
}

func (r *DemoClient) UnitTest() *EnvironmentCheck {
	q := r.Q.Select("unitTest")

	return &EnvironmentCheck{
		Q: q,
		C: r.C,
	}
}

type DemoServer struct {
	Q *querybuilder.Selection
	C graphql.Client

	publish *string
}

func (r *DemoServer) Binary() *EnvironmentArtifact {
	q := r.Q.Select("binary")

	return &EnvironmentArtifact{
		Q: q,
		C: r.C,
	}
}

func (r *DemoServer) Publish(ctx context.Context, version string) (string, error) {
	if r.publish != nil {
		return *r.publish, nil
	}
	q := r.Q.Select("publish")
	q = q.Arg("version", version)

	var response string

	q = q.Bind(&response)
	return response, q.Execute(ctx, r.C)
}

func (r *DemoServer) ServerImage() *EnvironmentArtifact {
	q := r.Q.Select("serverImage")

	return &EnvironmentArtifact{
		Q: q,
		C: r.C,
	}
}

func (r *DemoServer) UnitTest() *EnvironmentCheck {
	q := r.Q.Select("unitTest")

	return &EnvironmentCheck{
		Q: q,
		C: r.C,
	}
}

func (r *daggerClient) DemoClient() *DemoClient {
	q := r.Q.Select("demoClient")

	return &DemoClient{
		Q: q,
		C: r.C,
	}
}

func (r *daggerClient) DemoServer() *DemoServer {
	q := r.Q.Select("demoServer")

	return &DemoServer{
		Q: q,
		C: r.C,
	}
}
